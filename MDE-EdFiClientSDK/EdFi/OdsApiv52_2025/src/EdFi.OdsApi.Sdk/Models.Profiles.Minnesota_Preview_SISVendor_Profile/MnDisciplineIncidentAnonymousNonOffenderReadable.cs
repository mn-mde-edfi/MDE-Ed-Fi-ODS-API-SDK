/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// MnDisciplineIncidentAnonymousNonOffenderReadable
    /// </summary>
    [DataContract(Name = "mn_disciplineIncidentAnonymousNonOffender_readable")]
    public partial class MnDisciplineIncidentAnonymousNonOffenderReadable : IEquatable<MnDisciplineIncidentAnonymousNonOffenderReadable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnDisciplineIncidentAnonymousNonOffenderReadable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MnDisciplineIncidentAnonymousNonOffenderReadable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MnDisciplineIncidentAnonymousNonOffenderReadable" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="disciplineIncidentReference">disciplineIncidentReference (required).</param>
        /// <param name="costToVictimDescriptor">Cost incurred to victim after the incident. (required).</param>
        /// <param name="didInjuryOccur">Was the victim injured? (required).</param>
        /// <param name="didSeriousBodilyInjuryOccur">Did the victim face serious bodily injury?.</param>
        /// <param name="estimatedStudentsEnrolled">Number of nonoffenders that were enrolled in the school..</param>
        /// <param name="estimatedStudentsNotEnrolled">Number of nonoffenders that were not enrolled in the school..</param>
        /// <param name="nonOffenderCount">Count of victims if there were multiple involved..</param>
        /// <param name="nonOffenderTypeDescriptor">Identifies the type of victim involved..</param>
        /// <param name="physicalAssaultState">Is repoting this incident a requirement to report assault of a district employee?.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public MnDisciplineIncidentAnonymousNonOffenderReadable(string id = default(string), MnDisciplineIncidentReference disciplineIncidentReference = default(MnDisciplineIncidentReference), string costToVictimDescriptor = default(string), bool didInjuryOccur = default(bool), bool didSeriousBodilyInjuryOccur = default(bool), int estimatedStudentsEnrolled = default(int), int estimatedStudentsNotEnrolled = default(int), int nonOffenderCount = default(int), string nonOffenderTypeDescriptor = default(string), bool physicalAssaultState = default(bool), string etag = default(string))
        {
            // to ensure "disciplineIncidentReference" is required (not null)
            if (disciplineIncidentReference == null)
            {
                throw new ArgumentNullException("disciplineIncidentReference is a required property for MnDisciplineIncidentAnonymousNonOffenderReadable and cannot be null");
            }
            this.DisciplineIncidentReference = disciplineIncidentReference;
            // to ensure "costToVictimDescriptor" is required (not null)
            if (costToVictimDescriptor == null)
            {
                throw new ArgumentNullException("costToVictimDescriptor is a required property for MnDisciplineIncidentAnonymousNonOffenderReadable and cannot be null");
            }
            this.CostToVictimDescriptor = costToVictimDescriptor;
            this.DidInjuryOccur = didInjuryOccur;
            this.Id = id;
            this.DidSeriousBodilyInjuryOccur = didSeriousBodilyInjuryOccur;
            this.EstimatedStudentsEnrolled = estimatedStudentsEnrolled;
            this.EstimatedStudentsNotEnrolled = estimatedStudentsNotEnrolled;
            this.NonOffenderCount = nonOffenderCount;
            this.NonOffenderTypeDescriptor = nonOffenderTypeDescriptor;
            this.PhysicalAssaultState = physicalAssaultState;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DisciplineIncidentReference
        /// </summary>
        [DataMember(Name = "disciplineIncidentReference", IsRequired = true, EmitDefaultValue = false)]
        public MnDisciplineIncidentReference DisciplineIncidentReference { get; set; }

        /// <summary>
        /// Cost incurred to victim after the incident.
        /// </summary>
        /// <value>Cost incurred to victim after the incident.</value>
        [DataMember(Name = "costToVictimDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string CostToVictimDescriptor { get; set; }

        /// <summary>
        /// Was the victim injured?
        /// </summary>
        /// <value>Was the victim injured?</value>
        [DataMember(Name = "didInjuryOccur", IsRequired = true, EmitDefaultValue = true)]
        public bool DidInjuryOccur { get; set; }

        /// <summary>
        /// Did the victim face serious bodily injury?
        /// </summary>
        /// <value>Did the victim face serious bodily injury?</value>
        [DataMember(Name = "didSeriousBodilyInjuryOccur", EmitDefaultValue = true)]
        public bool DidSeriousBodilyInjuryOccur { get; set; }

        /// <summary>
        /// Number of nonoffenders that were enrolled in the school.
        /// </summary>
        /// <value>Number of nonoffenders that were enrolled in the school.</value>
        [DataMember(Name = "estimatedStudentsEnrolled", EmitDefaultValue = false)]
        public int EstimatedStudentsEnrolled { get; set; }

        /// <summary>
        /// Number of nonoffenders that were not enrolled in the school.
        /// </summary>
        /// <value>Number of nonoffenders that were not enrolled in the school.</value>
        [DataMember(Name = "estimatedStudentsNotEnrolled", EmitDefaultValue = false)]
        public int EstimatedStudentsNotEnrolled { get; set; }

        /// <summary>
        /// Count of victims if there were multiple involved.
        /// </summary>
        /// <value>Count of victims if there were multiple involved.</value>
        [DataMember(Name = "nonOffenderCount", EmitDefaultValue = false)]
        public int NonOffenderCount { get; set; }

        /// <summary>
        /// Identifies the type of victim involved.
        /// </summary>
        /// <value>Identifies the type of victim involved.</value>
        [DataMember(Name = "nonOffenderTypeDescriptor", EmitDefaultValue = false)]
        public string NonOffenderTypeDescriptor { get; set; }

        /// <summary>
        /// Is repoting this incident a requirement to report assault of a district employee?
        /// </summary>
        /// <value>Is repoting this incident a requirement to report assault of a district employee?</value>
        [DataMember(Name = "physicalAssaultState", EmitDefaultValue = true)]
        public bool PhysicalAssaultState { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MnDisciplineIncidentAnonymousNonOffenderReadable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisciplineIncidentReference: ").Append(DisciplineIncidentReference).Append("\n");
            sb.Append("  CostToVictimDescriptor: ").Append(CostToVictimDescriptor).Append("\n");
            sb.Append("  DidInjuryOccur: ").Append(DidInjuryOccur).Append("\n");
            sb.Append("  DidSeriousBodilyInjuryOccur: ").Append(DidSeriousBodilyInjuryOccur).Append("\n");
            sb.Append("  EstimatedStudentsEnrolled: ").Append(EstimatedStudentsEnrolled).Append("\n");
            sb.Append("  EstimatedStudentsNotEnrolled: ").Append(EstimatedStudentsNotEnrolled).Append("\n");
            sb.Append("  NonOffenderCount: ").Append(NonOffenderCount).Append("\n");
            sb.Append("  NonOffenderTypeDescriptor: ").Append(NonOffenderTypeDescriptor).Append("\n");
            sb.Append("  PhysicalAssaultState: ").Append(PhysicalAssaultState).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnDisciplineIncidentAnonymousNonOffenderReadable);
        }

        /// <summary>
        /// Returns true if MnDisciplineIncidentAnonymousNonOffenderReadable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnDisciplineIncidentAnonymousNonOffenderReadable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnDisciplineIncidentAnonymousNonOffenderReadable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisciplineIncidentReference == input.DisciplineIncidentReference ||
                    (this.DisciplineIncidentReference != null &&
                    this.DisciplineIncidentReference.Equals(input.DisciplineIncidentReference))
                ) && 
                (
                    this.CostToVictimDescriptor == input.CostToVictimDescriptor ||
                    (this.CostToVictimDescriptor != null &&
                    this.CostToVictimDescriptor.Equals(input.CostToVictimDescriptor))
                ) && 
                (
                    this.DidInjuryOccur == input.DidInjuryOccur ||
                    this.DidInjuryOccur.Equals(input.DidInjuryOccur)
                ) && 
                (
                    this.DidSeriousBodilyInjuryOccur == input.DidSeriousBodilyInjuryOccur ||
                    this.DidSeriousBodilyInjuryOccur.Equals(input.DidSeriousBodilyInjuryOccur)
                ) && 
                (
                    this.EstimatedStudentsEnrolled == input.EstimatedStudentsEnrolled ||
                    this.EstimatedStudentsEnrolled.Equals(input.EstimatedStudentsEnrolled)
                ) && 
                (
                    this.EstimatedStudentsNotEnrolled == input.EstimatedStudentsNotEnrolled ||
                    this.EstimatedStudentsNotEnrolled.Equals(input.EstimatedStudentsNotEnrolled)
                ) && 
                (
                    this.NonOffenderCount == input.NonOffenderCount ||
                    this.NonOffenderCount.Equals(input.NonOffenderCount)
                ) && 
                (
                    this.NonOffenderTypeDescriptor == input.NonOffenderTypeDescriptor ||
                    (this.NonOffenderTypeDescriptor != null &&
                    this.NonOffenderTypeDescriptor.Equals(input.NonOffenderTypeDescriptor))
                ) && 
                (
                    this.PhysicalAssaultState == input.PhysicalAssaultState ||
                    this.PhysicalAssaultState.Equals(input.PhysicalAssaultState)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisciplineIncidentReference != null)
                {
                    hashCode = (hashCode * 59) + this.DisciplineIncidentReference.GetHashCode();
                }
                if (this.CostToVictimDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.CostToVictimDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DidInjuryOccur.GetHashCode();
                hashCode = (hashCode * 59) + this.DidSeriousBodilyInjuryOccur.GetHashCode();
                hashCode = (hashCode * 59) + this.EstimatedStudentsEnrolled.GetHashCode();
                hashCode = (hashCode * 59) + this.EstimatedStudentsNotEnrolled.GetHashCode();
                hashCode = (hashCode * 59) + this.NonOffenderCount.GetHashCode();
                if (this.NonOffenderTypeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.NonOffenderTypeDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PhysicalAssaultState.GetHashCode();
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CostToVictimDescriptor (string) maxLength
            if (this.CostToVictimDescriptor != null && this.CostToVictimDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CostToVictimDescriptor, length must be less than 306.", new [] { "CostToVictimDescriptor" });
            }

            // NonOffenderTypeDescriptor (string) maxLength
            if (this.NonOffenderTypeDescriptor != null && this.NonOffenderTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NonOffenderTypeDescriptor, length must be less than 306.", new [] { "NonOffenderTypeDescriptor" });
            }

            yield break;
        }
    }

}
