/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// MnStudentAssessmentPrecodeSiteReadable
    /// </summary>
    [DataContract(Name = "mn_studentAssessmentPrecodeSite_readable")]
    public partial class MnStudentAssessmentPrecodeSiteReadable : IEquatable<MnStudentAssessmentPrecodeSiteReadable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentAssessmentPrecodeSiteReadable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MnStudentAssessmentPrecodeSiteReadable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentAssessmentPrecodeSiteReadable" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="precodeTypeDescriptor">Type of pre-code site record. For example, MCA/MTAS, ACCESS/ALT-ACCESS (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="contactElectronicMailAddress">Email address or login of administrative contact.</param>
        /// <param name="contactFirstName">First name of administrative contact.</param>
        /// <param name="contactLastSurname">Last name of administrative contact.</param>
        /// <param name="contactTelephones">An unordered collection of studentAssessmentPrecodeSiteContactTelephones. The telephone number(s) for the administrative contact, and extension if applicable..</param>
        /// <param name="contactTitle">Title of administrative contact.</param>
        /// <param name="shippingInstructions">An unordered collection of studentAssessmentPrecodeSiteShippingInstructions. Shipping instructions such as Labels, Shipping Date, Shipping Preference.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public MnStudentAssessmentPrecodeSiteReadable(string id = default(string), string precodeTypeDescriptor = default(string), MnEducationOrganizationReference educationOrganizationReference = default(MnEducationOrganizationReference), string contactElectronicMailAddress = default(string), string contactFirstName = default(string), string contactLastSurname = default(string), List<MnStudentAssessmentPrecodeSiteContactTelephoneReadable> contactTelephones = default(List<MnStudentAssessmentPrecodeSiteContactTelephoneReadable>), string contactTitle = default(string), List<MnStudentAssessmentPrecodeSiteShippingInstructionReadable> shippingInstructions = default(List<MnStudentAssessmentPrecodeSiteShippingInstructionReadable>), string etag = default(string))
        {
            // to ensure "precodeTypeDescriptor" is required (not null)
            if (precodeTypeDescriptor == null)
            {
                throw new ArgumentNullException("precodeTypeDescriptor is a required property for MnStudentAssessmentPrecodeSiteReadable and cannot be null");
            }
            this.PrecodeTypeDescriptor = precodeTypeDescriptor;
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new ArgumentNullException("educationOrganizationReference is a required property for MnStudentAssessmentPrecodeSiteReadable and cannot be null");
            }
            this.EducationOrganizationReference = educationOrganizationReference;
            this.Id = id;
            this.ContactElectronicMailAddress = contactElectronicMailAddress;
            this.ContactFirstName = contactFirstName;
            this.ContactLastSurname = contactLastSurname;
            this.ContactTelephones = contactTelephones;
            this.ContactTitle = contactTitle;
            this.ShippingInstructions = shippingInstructions;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Type of pre-code site record. For example, MCA/MTAS, ACCESS/ALT-ACCESS
        /// </summary>
        /// <value>Type of pre-code site record. For example, MCA/MTAS, ACCESS/ALT-ACCESS</value>
        [DataMember(Name = "precodeTypeDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string PrecodeTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = false)]
        public MnEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Email address or login of administrative contact
        /// </summary>
        /// <value>Email address or login of administrative contact</value>
        [DataMember(Name = "contactElectronicMailAddress", EmitDefaultValue = false)]
        public string ContactElectronicMailAddress { get; set; }

        /// <summary>
        /// First name of administrative contact
        /// </summary>
        /// <value>First name of administrative contact</value>
        [DataMember(Name = "contactFirstName", EmitDefaultValue = false)]
        public string ContactFirstName { get; set; }

        /// <summary>
        /// Last name of administrative contact
        /// </summary>
        /// <value>Last name of administrative contact</value>
        [DataMember(Name = "contactLastSurname", EmitDefaultValue = false)]
        public string ContactLastSurname { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentPrecodeSiteContactTelephones. The telephone number(s) for the administrative contact, and extension if applicable.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentPrecodeSiteContactTelephones. The telephone number(s) for the administrative contact, and extension if applicable.</value>
        [DataMember(Name = "contactTelephones", EmitDefaultValue = false)]
        public List<MnStudentAssessmentPrecodeSiteContactTelephoneReadable> ContactTelephones { get; set; }

        /// <summary>
        /// Title of administrative contact
        /// </summary>
        /// <value>Title of administrative contact</value>
        [DataMember(Name = "contactTitle", EmitDefaultValue = false)]
        public string ContactTitle { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentPrecodeSiteShippingInstructions. Shipping instructions such as Labels, Shipping Date, Shipping Preference
        /// </summary>
        /// <value>An unordered collection of studentAssessmentPrecodeSiteShippingInstructions. Shipping instructions such as Labels, Shipping Date, Shipping Preference</value>
        [DataMember(Name = "shippingInstructions", EmitDefaultValue = false)]
        public List<MnStudentAssessmentPrecodeSiteShippingInstructionReadable> ShippingInstructions { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MnStudentAssessmentPrecodeSiteReadable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PrecodeTypeDescriptor: ").Append(PrecodeTypeDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ContactElectronicMailAddress: ").Append(ContactElectronicMailAddress).Append("\n");
            sb.Append("  ContactFirstName: ").Append(ContactFirstName).Append("\n");
            sb.Append("  ContactLastSurname: ").Append(ContactLastSurname).Append("\n");
            sb.Append("  ContactTelephones: ").Append(ContactTelephones).Append("\n");
            sb.Append("  ContactTitle: ").Append(ContactTitle).Append("\n");
            sb.Append("  ShippingInstructions: ").Append(ShippingInstructions).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnStudentAssessmentPrecodeSiteReadable);
        }

        /// <summary>
        /// Returns true if MnStudentAssessmentPrecodeSiteReadable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnStudentAssessmentPrecodeSiteReadable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnStudentAssessmentPrecodeSiteReadable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PrecodeTypeDescriptor == input.PrecodeTypeDescriptor ||
                    (this.PrecodeTypeDescriptor != null &&
                    this.PrecodeTypeDescriptor.Equals(input.PrecodeTypeDescriptor))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.ContactElectronicMailAddress == input.ContactElectronicMailAddress ||
                    (this.ContactElectronicMailAddress != null &&
                    this.ContactElectronicMailAddress.Equals(input.ContactElectronicMailAddress))
                ) && 
                (
                    this.ContactFirstName == input.ContactFirstName ||
                    (this.ContactFirstName != null &&
                    this.ContactFirstName.Equals(input.ContactFirstName))
                ) && 
                (
                    this.ContactLastSurname == input.ContactLastSurname ||
                    (this.ContactLastSurname != null &&
                    this.ContactLastSurname.Equals(input.ContactLastSurname))
                ) && 
                (
                    this.ContactTelephones == input.ContactTelephones ||
                    this.ContactTelephones != null &&
                    input.ContactTelephones != null &&
                    this.ContactTelephones.SequenceEqual(input.ContactTelephones)
                ) && 
                (
                    this.ContactTitle == input.ContactTitle ||
                    (this.ContactTitle != null &&
                    this.ContactTitle.Equals(input.ContactTitle))
                ) && 
                (
                    this.ShippingInstructions == input.ShippingInstructions ||
                    this.ShippingInstructions != null &&
                    input.ShippingInstructions != null &&
                    this.ShippingInstructions.SequenceEqual(input.ShippingInstructions)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PrecodeTypeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.PrecodeTypeDescriptor.GetHashCode();
                }
                if (this.EducationOrganizationReference != null)
                {
                    hashCode = (hashCode * 59) + this.EducationOrganizationReference.GetHashCode();
                }
                if (this.ContactElectronicMailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContactElectronicMailAddress.GetHashCode();
                }
                if (this.ContactFirstName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactFirstName.GetHashCode();
                }
                if (this.ContactLastSurname != null)
                {
                    hashCode = (hashCode * 59) + this.ContactLastSurname.GetHashCode();
                }
                if (this.ContactTelephones != null)
                {
                    hashCode = (hashCode * 59) + this.ContactTelephones.GetHashCode();
                }
                if (this.ContactTitle != null)
                {
                    hashCode = (hashCode * 59) + this.ContactTitle.GetHashCode();
                }
                if (this.ShippingInstructions != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingInstructions.GetHashCode();
                }
                if (this.Etag != null)
                {
                    hashCode = (hashCode * 59) + this.Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PrecodeTypeDescriptor (string) maxLength
            if (this.PrecodeTypeDescriptor != null && this.PrecodeTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrecodeTypeDescriptor, length must be less than 306.", new [] { "PrecodeTypeDescriptor" });
            }

            // ContactElectronicMailAddress (string) maxLength
            if (this.ContactElectronicMailAddress != null && this.ContactElectronicMailAddress.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactElectronicMailAddress, length must be less than 128.", new [] { "ContactElectronicMailAddress" });
            }

            // ContactFirstName (string) maxLength
            if (this.ContactFirstName != null && this.ContactFirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactFirstName, length must be less than 75.", new [] { "ContactFirstName" });
            }

            // ContactLastSurname (string) maxLength
            if (this.ContactLastSurname != null && this.ContactLastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactLastSurname, length must be less than 75.", new [] { "ContactLastSurname" });
            }

            // ContactTitle (string) maxLength
            if (this.ContactTitle != null && this.ContactTitle.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactTitle, length must be less than 75.", new [] { "ContactTitle" });
            }

            yield break;
        }
    }

}
