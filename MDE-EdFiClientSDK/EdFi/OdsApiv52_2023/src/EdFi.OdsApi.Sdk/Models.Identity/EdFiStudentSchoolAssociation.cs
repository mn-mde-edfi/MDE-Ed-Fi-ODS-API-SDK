/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Identity
{
    /// <summary>
    /// EdFiStudentSchoolAssociation
    /// </summary>
    [DataContract]
    public partial class EdFiStudentSchoolAssociation :  IEquatable<EdFiStudentSchoolAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSchoolAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentSchoolAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSchoolAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (required).</param>
        /// <param name="calendarReference">calendarReference.</param>
        /// <param name="classOfSchoolYearTypeReference">classOfSchoolYearTypeReference.</param>
        /// <param name="graduationPlanReference">graduationPlanReference.</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference.</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="alternativeGraduationPlans">An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school..</param>
        /// <param name="educationPlans">An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate..</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education..</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (required).</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term..</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session..</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student..</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution..</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5..</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student..</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back..</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit..</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116..</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="ext">ext.</param>
        public EdFiStudentSchoolAssociation(string id = default(string), DateTime? entryDate = default(DateTime?), EdFiCalendarReference calendarReference = default(EdFiCalendarReference), EdFiSchoolYearTypeReference classOfSchoolYearTypeReference = default(EdFiSchoolYearTypeReference), EdFiGraduationPlanReference graduationPlanReference = default(EdFiGraduationPlanReference), EdFiSchoolReference schoolReference = default(EdFiSchoolReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), EdFiStudentReference studentReference = default(EdFiStudentReference), List<EdFiStudentSchoolAssociationAlternativeGraduationPlan> alternativeGraduationPlans = default(List<EdFiStudentSchoolAssociationAlternativeGraduationPlan>), List<EdFiStudentSchoolAssociationEducationPlan> educationPlans = default(List<EdFiStudentSchoolAssociationEducationPlan>), bool? employedWhileEnrolled = default(bool?), string entryGradeLevelDescriptor = default(string), string entryGradeLevelReasonDescriptor = default(string), string entryTypeDescriptor = default(string), DateTime? exitWithdrawDate = default(DateTime?), string exitWithdrawTypeDescriptor = default(string), double? fullTimeEquivalency = default(double?), bool? primarySchool = default(bool?), bool? repeatGradeIndicator = default(bool?), string residencyStatusDescriptor = default(string), bool? schoolChoiceTransfer = default(bool?), bool? termCompletionIndicator = default(bool?), string etag = default(string), StudentSchoolAssociationExtensions ext = default(StudentSchoolAssociationExtensions))
        {
            // to ensure "entryDate" is required (not null)
            if (entryDate == null)
            {
                throw new InvalidDataException("entryDate is a required property for EdFiStudentSchoolAssociation and cannot be null");
            }
            else
            {
                this.EntryDate = entryDate;
            }
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new InvalidDataException("schoolReference is a required property for EdFiStudentSchoolAssociation and cannot be null");
            }
            else
            {
                this.SchoolReference = schoolReference;
            }
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new InvalidDataException("studentReference is a required property for EdFiStudentSchoolAssociation and cannot be null");
            }
            else
            {
                this.StudentReference = studentReference;
            }
            // to ensure "entryGradeLevelDescriptor" is required (not null)
            if (entryGradeLevelDescriptor == null)
            {
                throw new InvalidDataException("entryGradeLevelDescriptor is a required property for EdFiStudentSchoolAssociation and cannot be null");
            }
            else
            {
                this.EntryGradeLevelDescriptor = entryGradeLevelDescriptor;
            }
            this.Id = id;
            this.CalendarReference = calendarReference;
            this.ClassOfSchoolYearTypeReference = classOfSchoolYearTypeReference;
            this.GraduationPlanReference = graduationPlanReference;
            this.SchoolYearTypeReference = schoolYearTypeReference;
            this.AlternativeGraduationPlans = alternativeGraduationPlans;
            this.EducationPlans = educationPlans;
            this.EmployedWhileEnrolled = employedWhileEnrolled;
            this.EntryGradeLevelReasonDescriptor = entryGradeLevelReasonDescriptor;
            this.EntryTypeDescriptor = entryTypeDescriptor;
            this.ExitWithdrawDate = exitWithdrawDate;
            this.ExitWithdrawTypeDescriptor = exitWithdrawTypeDescriptor;
            this.FullTimeEquivalency = fullTimeEquivalency;
            this.PrimarySchool = primarySchool;
            this.RepeatGradeIndicator = repeatGradeIndicator;
            this.ResidencyStatusDescriptor = residencyStatusDescriptor;
            this.SchoolChoiceTransfer = schoolChoiceTransfer;
            this.TermCompletionIndicator = termCompletionIndicator;
            this.Etag = etag;
            this.Ext = ext;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        /// </summary>
        /// <value>The month, day, and year on which an individual enters and begins to receive instructional services in a school.</value>
        [DataMember(Name="entryDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EntryDate { get; set; }

        /// <summary>
        /// Gets or Sets CalendarReference
        /// </summary>
        [DataMember(Name="calendarReference", EmitDefaultValue=false)]
        public EdFiCalendarReference CalendarReference { get; set; }

        /// <summary>
        /// Gets or Sets ClassOfSchoolYearTypeReference
        /// </summary>
        [DataMember(Name="classOfSchoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference ClassOfSchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets GraduationPlanReference
        /// </summary>
        [DataMember(Name="graduationPlanReference", EmitDefaultValue=false)]
        public EdFiGraduationPlanReference GraduationPlanReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name="schoolReference", EmitDefaultValue=false)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name="studentReference", EmitDefaultValue=false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school.
        /// </summary>
        /// <value>An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school.</value>
        [DataMember(Name="alternativeGraduationPlans", EmitDefaultValue=false)]
        public List<EdFiStudentSchoolAssociationAlternativeGraduationPlan> AlternativeGraduationPlans { get; set; }

        /// <summary>
        /// An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.
        /// </summary>
        /// <value>An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.</value>
        [DataMember(Name="educationPlans", EmitDefaultValue=false)]
        public List<EdFiStudentSchoolAssociationEducationPlan> EducationPlans { get; set; }

        /// <summary>
        /// An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
        /// </summary>
        /// <value>An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.</value>
        [DataMember(Name="employedWhileEnrolled", EmitDefaultValue=false)]
        public bool? EmployedWhileEnrolled { get; set; }

        /// <summary>
        /// The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
        /// </summary>
        /// <value>The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.</value>
        [DataMember(Name="entryGradeLevelDescriptor", EmitDefaultValue=false)]
        public string EntryGradeLevelDescriptor { get; set; }

        /// <summary>
        /// The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
        /// </summary>
        /// <value>The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.</value>
        [DataMember(Name="entryGradeLevelReasonDescriptor", EmitDefaultValue=false)]
        public string EntryGradeLevelReasonDescriptor { get; set; }

        /// <summary>
        /// The process by which a student enters a school during a given academic session.
        /// </summary>
        /// <value>The process by which a student enters a school during a given academic session.</value>
        [DataMember(Name="entryTypeDescriptor", EmitDefaultValue=false)]
        public string EntryTypeDescriptor { get; set; }

        /// <summary>
        /// The recorded exit or withdraw date for the student.
        /// </summary>
        /// <value>The recorded exit or withdraw date for the student.</value>
        [DataMember(Name="exitWithdrawDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExitWithdrawDate { get; set; }

        /// <summary>
        /// The circumstances under which the student exited from membership in an educational institution.
        /// </summary>
        /// <value>The circumstances under which the student exited from membership in an educational institution.</value>
        [DataMember(Name="exitWithdrawTypeDescriptor", EmitDefaultValue=false)]
        public string ExitWithdrawTypeDescriptor { get; set; }

        /// <summary>
        /// The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.
        /// </summary>
        /// <value>The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.</value>
        [DataMember(Name="fullTimeEquivalency", EmitDefaultValue=false)]
        public double? FullTimeEquivalency { get; set; }

        /// <summary>
        /// Indicates if a given enrollment record should be considered the primary record for a student.
        /// </summary>
        /// <value>Indicates if a given enrollment record should be considered the primary record for a student.</value>
        [DataMember(Name="primarySchool", EmitDefaultValue=false)]
        public bool? PrimarySchool { get; set; }

        /// <summary>
        /// An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
        /// </summary>
        /// <value>An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.</value>
        [DataMember(Name="repeatGradeIndicator", EmitDefaultValue=false)]
        public bool? RepeatGradeIndicator { get; set; }

        /// <summary>
        /// An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
        /// </summary>
        /// <value>An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.</value>
        [DataMember(Name="residencyStatusDescriptor", EmitDefaultValue=false)]
        public string ResidencyStatusDescriptor { get; set; }

        /// <summary>
        /// An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
        /// </summary>
        /// <value>An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.</value>
        [DataMember(Name="schoolChoiceTransfer", EmitDefaultValue=false)]
        public bool? SchoolChoiceTransfer { get; set; }

        /// <summary>
        /// Idicates whether or not a student completed the most recent school term.
        /// </summary>
        /// <value>Idicates whether or not a student completed the most recent school term.</value>
        [DataMember(Name="termCompletionIndicator", EmitDefaultValue=false)]
        public bool? TermCompletionIndicator { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [DataMember(Name="_ext", EmitDefaultValue=false)]
        public StudentSchoolAssociationExtensions Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentSchoolAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EntryDate: ").Append(EntryDate).Append("\n");
            sb.Append("  CalendarReference: ").Append(CalendarReference).Append("\n");
            sb.Append("  ClassOfSchoolYearTypeReference: ").Append(ClassOfSchoolYearTypeReference).Append("\n");
            sb.Append("  GraduationPlanReference: ").Append(GraduationPlanReference).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  AlternativeGraduationPlans: ").Append(AlternativeGraduationPlans).Append("\n");
            sb.Append("  EducationPlans: ").Append(EducationPlans).Append("\n");
            sb.Append("  EmployedWhileEnrolled: ").Append(EmployedWhileEnrolled).Append("\n");
            sb.Append("  EntryGradeLevelDescriptor: ").Append(EntryGradeLevelDescriptor).Append("\n");
            sb.Append("  EntryGradeLevelReasonDescriptor: ").Append(EntryGradeLevelReasonDescriptor).Append("\n");
            sb.Append("  EntryTypeDescriptor: ").Append(EntryTypeDescriptor).Append("\n");
            sb.Append("  ExitWithdrawDate: ").Append(ExitWithdrawDate).Append("\n");
            sb.Append("  ExitWithdrawTypeDescriptor: ").Append(ExitWithdrawTypeDescriptor).Append("\n");
            sb.Append("  FullTimeEquivalency: ").Append(FullTimeEquivalency).Append("\n");
            sb.Append("  PrimarySchool: ").Append(PrimarySchool).Append("\n");
            sb.Append("  RepeatGradeIndicator: ").Append(RepeatGradeIndicator).Append("\n");
            sb.Append("  ResidencyStatusDescriptor: ").Append(ResidencyStatusDescriptor).Append("\n");
            sb.Append("  SchoolChoiceTransfer: ").Append(SchoolChoiceTransfer).Append("\n");
            sb.Append("  TermCompletionIndicator: ").Append(TermCompletionIndicator).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentSchoolAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStudentSchoolAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentSchoolAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentSchoolAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EntryDate == input.EntryDate ||
                    (this.EntryDate != null &&
                    this.EntryDate.Equals(input.EntryDate))
                ) && 
                (
                    this.CalendarReference == input.CalendarReference ||
                    (this.CalendarReference != null &&
                    this.CalendarReference.Equals(input.CalendarReference))
                ) && 
                (
                    this.ClassOfSchoolYearTypeReference == input.ClassOfSchoolYearTypeReference ||
                    (this.ClassOfSchoolYearTypeReference != null &&
                    this.ClassOfSchoolYearTypeReference.Equals(input.ClassOfSchoolYearTypeReference))
                ) && 
                (
                    this.GraduationPlanReference == input.GraduationPlanReference ||
                    (this.GraduationPlanReference != null &&
                    this.GraduationPlanReference.Equals(input.GraduationPlanReference))
                ) && 
                (
                    this.SchoolReference == input.SchoolReference ||
                    (this.SchoolReference != null &&
                    this.SchoolReference.Equals(input.SchoolReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.AlternativeGraduationPlans == input.AlternativeGraduationPlans ||
                    this.AlternativeGraduationPlans != null &&
                    this.AlternativeGraduationPlans.SequenceEqual(input.AlternativeGraduationPlans)
                ) && 
                (
                    this.EducationPlans == input.EducationPlans ||
                    this.EducationPlans != null &&
                    this.EducationPlans.SequenceEqual(input.EducationPlans)
                ) && 
                (
                    this.EmployedWhileEnrolled == input.EmployedWhileEnrolled ||
                    (this.EmployedWhileEnrolled != null &&
                    this.EmployedWhileEnrolled.Equals(input.EmployedWhileEnrolled))
                ) && 
                (
                    this.EntryGradeLevelDescriptor == input.EntryGradeLevelDescriptor ||
                    (this.EntryGradeLevelDescriptor != null &&
                    this.EntryGradeLevelDescriptor.Equals(input.EntryGradeLevelDescriptor))
                ) && 
                (
                    this.EntryGradeLevelReasonDescriptor == input.EntryGradeLevelReasonDescriptor ||
                    (this.EntryGradeLevelReasonDescriptor != null &&
                    this.EntryGradeLevelReasonDescriptor.Equals(input.EntryGradeLevelReasonDescriptor))
                ) && 
                (
                    this.EntryTypeDescriptor == input.EntryTypeDescriptor ||
                    (this.EntryTypeDescriptor != null &&
                    this.EntryTypeDescriptor.Equals(input.EntryTypeDescriptor))
                ) && 
                (
                    this.ExitWithdrawDate == input.ExitWithdrawDate ||
                    (this.ExitWithdrawDate != null &&
                    this.ExitWithdrawDate.Equals(input.ExitWithdrawDate))
                ) && 
                (
                    this.ExitWithdrawTypeDescriptor == input.ExitWithdrawTypeDescriptor ||
                    (this.ExitWithdrawTypeDescriptor != null &&
                    this.ExitWithdrawTypeDescriptor.Equals(input.ExitWithdrawTypeDescriptor))
                ) && 
                (
                    this.FullTimeEquivalency == input.FullTimeEquivalency ||
                    (this.FullTimeEquivalency != null &&
                    this.FullTimeEquivalency.Equals(input.FullTimeEquivalency))
                ) && 
                (
                    this.PrimarySchool == input.PrimarySchool ||
                    (this.PrimarySchool != null &&
                    this.PrimarySchool.Equals(input.PrimarySchool))
                ) && 
                (
                    this.RepeatGradeIndicator == input.RepeatGradeIndicator ||
                    (this.RepeatGradeIndicator != null &&
                    this.RepeatGradeIndicator.Equals(input.RepeatGradeIndicator))
                ) && 
                (
                    this.ResidencyStatusDescriptor == input.ResidencyStatusDescriptor ||
                    (this.ResidencyStatusDescriptor != null &&
                    this.ResidencyStatusDescriptor.Equals(input.ResidencyStatusDescriptor))
                ) && 
                (
                    this.SchoolChoiceTransfer == input.SchoolChoiceTransfer ||
                    (this.SchoolChoiceTransfer != null &&
                    this.SchoolChoiceTransfer.Equals(input.SchoolChoiceTransfer))
                ) && 
                (
                    this.TermCompletionIndicator == input.TermCompletionIndicator ||
                    (this.TermCompletionIndicator != null &&
                    this.TermCompletionIndicator.Equals(input.TermCompletionIndicator))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EntryDate != null)
                    hashCode = hashCode * 59 + this.EntryDate.GetHashCode();
                if (this.CalendarReference != null)
                    hashCode = hashCode * 59 + this.CalendarReference.GetHashCode();
                if (this.ClassOfSchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.ClassOfSchoolYearTypeReference.GetHashCode();
                if (this.GraduationPlanReference != null)
                    hashCode = hashCode * 59 + this.GraduationPlanReference.GetHashCode();
                if (this.SchoolReference != null)
                    hashCode = hashCode * 59 + this.SchoolReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.StudentReference != null)
                    hashCode = hashCode * 59 + this.StudentReference.GetHashCode();
                if (this.AlternativeGraduationPlans != null)
                    hashCode = hashCode * 59 + this.AlternativeGraduationPlans.GetHashCode();
                if (this.EducationPlans != null)
                    hashCode = hashCode * 59 + this.EducationPlans.GetHashCode();
                if (this.EmployedWhileEnrolled != null)
                    hashCode = hashCode * 59 + this.EmployedWhileEnrolled.GetHashCode();
                if (this.EntryGradeLevelDescriptor != null)
                    hashCode = hashCode * 59 + this.EntryGradeLevelDescriptor.GetHashCode();
                if (this.EntryGradeLevelReasonDescriptor != null)
                    hashCode = hashCode * 59 + this.EntryGradeLevelReasonDescriptor.GetHashCode();
                if (this.EntryTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.EntryTypeDescriptor.GetHashCode();
                if (this.ExitWithdrawDate != null)
                    hashCode = hashCode * 59 + this.ExitWithdrawDate.GetHashCode();
                if (this.ExitWithdrawTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.ExitWithdrawTypeDescriptor.GetHashCode();
                if (this.FullTimeEquivalency != null)
                    hashCode = hashCode * 59 + this.FullTimeEquivalency.GetHashCode();
                if (this.PrimarySchool != null)
                    hashCode = hashCode * 59 + this.PrimarySchool.GetHashCode();
                if (this.RepeatGradeIndicator != null)
                    hashCode = hashCode * 59 + this.RepeatGradeIndicator.GetHashCode();
                if (this.ResidencyStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.ResidencyStatusDescriptor.GetHashCode();
                if (this.SchoolChoiceTransfer != null)
                    hashCode = hashCode * 59 + this.SchoolChoiceTransfer.GetHashCode();
                if (this.TermCompletionIndicator != null)
                    hashCode = hashCode * 59 + this.TermCompletionIndicator.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.Ext != null)
                    hashCode = hashCode * 59 + this.Ext.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntryGradeLevelDescriptor (string) maxLength
            if(this.EntryGradeLevelDescriptor != null && this.EntryGradeLevelDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntryGradeLevelDescriptor, length must be less than 306.", new [] { "EntryGradeLevelDescriptor" });
            }

            // EntryGradeLevelReasonDescriptor (string) maxLength
            if(this.EntryGradeLevelReasonDescriptor != null && this.EntryGradeLevelReasonDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntryGradeLevelReasonDescriptor, length must be less than 306.", new [] { "EntryGradeLevelReasonDescriptor" });
            }

            // EntryTypeDescriptor (string) maxLength
            if(this.EntryTypeDescriptor != null && this.EntryTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntryTypeDescriptor, length must be less than 306.", new [] { "EntryTypeDescriptor" });
            }

            // ExitWithdrawTypeDescriptor (string) maxLength
            if(this.ExitWithdrawTypeDescriptor != null && this.ExitWithdrawTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExitWithdrawTypeDescriptor, length must be less than 306.", new [] { "ExitWithdrawTypeDescriptor" });
            }

            // ResidencyStatusDescriptor (string) maxLength
            if(this.ResidencyStatusDescriptor != null && this.ResidencyStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResidencyStatusDescriptor, length must be less than 306.", new [] { "ResidencyStatusDescriptor" });
            }

            yield break;
        }
    }

}
