/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Identity
{
    /// <summary>
    /// EdFiGrade
    /// </summary>
    [DataContract]
    public partial class EdFiGrade :  IEquatable<EdFiGrade>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGrade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGrade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGrade" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="gradeTypeDescriptor">The type of grade reported (e.g., Exam, Final, Grading Period). (required).</param>
        /// <param name="gradingPeriodReference">gradingPeriodReference (required).</param>
        /// <param name="studentSectionAssociationReference">studentSectionAssociationReference (required).</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score..</param>
        /// <param name="learningStandardGrades">An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade..</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="performanceBaseConversionDescriptor">A conversion of the level to a standard set of performance levels..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="ext">ext.</param>
        public EdFiGrade(string id = default(string), string gradeTypeDescriptor = default(string), EdFiGradingPeriodReference gradingPeriodReference = default(EdFiGradingPeriodReference), EdFiStudentSectionAssociationReference studentSectionAssociationReference = default(EdFiStudentSectionAssociationReference), string diagnosticStatement = default(string), List<EdFiGradeLearningStandardGrade> learningStandardGrades = default(List<EdFiGradeLearningStandardGrade>), string letterGradeEarned = default(string), double? numericGradeEarned = default(double?), string performanceBaseConversionDescriptor = default(string), string etag = default(string), GradeExtensions ext = default(GradeExtensions))
        {
            // to ensure "gradeTypeDescriptor" is required (not null)
            if (gradeTypeDescriptor == null)
            {
                throw new InvalidDataException("gradeTypeDescriptor is a required property for EdFiGrade and cannot be null");
            }
            else
            {
                this.GradeTypeDescriptor = gradeTypeDescriptor;
            }
            // to ensure "gradingPeriodReference" is required (not null)
            if (gradingPeriodReference == null)
            {
                throw new InvalidDataException("gradingPeriodReference is a required property for EdFiGrade and cannot be null");
            }
            else
            {
                this.GradingPeriodReference = gradingPeriodReference;
            }
            // to ensure "studentSectionAssociationReference" is required (not null)
            if (studentSectionAssociationReference == null)
            {
                throw new InvalidDataException("studentSectionAssociationReference is a required property for EdFiGrade and cannot be null");
            }
            else
            {
                this.StudentSectionAssociationReference = studentSectionAssociationReference;
            }
            this.Id = id;
            this.DiagnosticStatement = diagnosticStatement;
            this.LearningStandardGrades = learningStandardGrades;
            this.LetterGradeEarned = letterGradeEarned;
            this.NumericGradeEarned = numericGradeEarned;
            this.PerformanceBaseConversionDescriptor = performanceBaseConversionDescriptor;
            this.Etag = etag;
            this.Ext = ext;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of grade reported (e.g., Exam, Final, Grading Period).
        /// </summary>
        /// <value>The type of grade reported (e.g., Exam, Final, Grading Period).</value>
        [DataMember(Name="gradeTypeDescriptor", EmitDefaultValue=false)]
        public string GradeTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [DataMember(Name="gradingPeriodReference", EmitDefaultValue=false)]
        public EdFiGradingPeriodReference GradingPeriodReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentSectionAssociationReference
        /// </summary>
        [DataMember(Name="studentSectionAssociationReference", EmitDefaultValue=false)]
        public EdFiStudentSectionAssociationReference StudentSectionAssociationReference { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [DataMember(Name="diagnosticStatement", EmitDefaultValue=false)]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade.
        /// </summary>
        /// <value>An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade.</value>
        [DataMember(Name="learningStandardGrades", EmitDefaultValue=false)]
        public List<EdFiGradeLearningStandardGrade> LearningStandardGrades { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name="letterGradeEarned", EmitDefaultValue=false)]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name="numericGradeEarned", EmitDefaultValue=false)]
        public double? NumericGradeEarned { get; set; }

        /// <summary>
        /// A conversion of the level to a standard set of performance levels.
        /// </summary>
        /// <value>A conversion of the level to a standard set of performance levels.</value>
        [DataMember(Name="performanceBaseConversionDescriptor", EmitDefaultValue=false)]
        public string PerformanceBaseConversionDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [DataMember(Name="_ext", EmitDefaultValue=false)]
        public GradeExtensions Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiGrade {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GradeTypeDescriptor: ").Append(GradeTypeDescriptor).Append("\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  StudentSectionAssociationReference: ").Append(StudentSectionAssociationReference).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  LearningStandardGrades: ").Append(LearningStandardGrades).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  PerformanceBaseConversionDescriptor: ").Append(PerformanceBaseConversionDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiGrade);
        }

        /// <summary>
        /// Returns true if EdFiGrade instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiGrade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiGrade input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GradeTypeDescriptor == input.GradeTypeDescriptor ||
                    (this.GradeTypeDescriptor != null &&
                    this.GradeTypeDescriptor.Equals(input.GradeTypeDescriptor))
                ) && 
                (
                    this.GradingPeriodReference == input.GradingPeriodReference ||
                    (this.GradingPeriodReference != null &&
                    this.GradingPeriodReference.Equals(input.GradingPeriodReference))
                ) && 
                (
                    this.StudentSectionAssociationReference == input.StudentSectionAssociationReference ||
                    (this.StudentSectionAssociationReference != null &&
                    this.StudentSectionAssociationReference.Equals(input.StudentSectionAssociationReference))
                ) && 
                (
                    this.DiagnosticStatement == input.DiagnosticStatement ||
                    (this.DiagnosticStatement != null &&
                    this.DiagnosticStatement.Equals(input.DiagnosticStatement))
                ) && 
                (
                    this.LearningStandardGrades == input.LearningStandardGrades ||
                    this.LearningStandardGrades != null &&
                    this.LearningStandardGrades.SequenceEqual(input.LearningStandardGrades)
                ) && 
                (
                    this.LetterGradeEarned == input.LetterGradeEarned ||
                    (this.LetterGradeEarned != null &&
                    this.LetterGradeEarned.Equals(input.LetterGradeEarned))
                ) && 
                (
                    this.NumericGradeEarned == input.NumericGradeEarned ||
                    (this.NumericGradeEarned != null &&
                    this.NumericGradeEarned.Equals(input.NumericGradeEarned))
                ) && 
                (
                    this.PerformanceBaseConversionDescriptor == input.PerformanceBaseConversionDescriptor ||
                    (this.PerformanceBaseConversionDescriptor != null &&
                    this.PerformanceBaseConversionDescriptor.Equals(input.PerformanceBaseConversionDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GradeTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.GradeTypeDescriptor.GetHashCode();
                if (this.GradingPeriodReference != null)
                    hashCode = hashCode * 59 + this.GradingPeriodReference.GetHashCode();
                if (this.StudentSectionAssociationReference != null)
                    hashCode = hashCode * 59 + this.StudentSectionAssociationReference.GetHashCode();
                if (this.DiagnosticStatement != null)
                    hashCode = hashCode * 59 + this.DiagnosticStatement.GetHashCode();
                if (this.LearningStandardGrades != null)
                    hashCode = hashCode * 59 + this.LearningStandardGrades.GetHashCode();
                if (this.LetterGradeEarned != null)
                    hashCode = hashCode * 59 + this.LetterGradeEarned.GetHashCode();
                if (this.NumericGradeEarned != null)
                    hashCode = hashCode * 59 + this.NumericGradeEarned.GetHashCode();
                if (this.PerformanceBaseConversionDescriptor != null)
                    hashCode = hashCode * 59 + this.PerformanceBaseConversionDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.Ext != null)
                    hashCode = hashCode * 59 + this.Ext.GetHashCode();
                return hashCode;
            }
        }
    }

}
