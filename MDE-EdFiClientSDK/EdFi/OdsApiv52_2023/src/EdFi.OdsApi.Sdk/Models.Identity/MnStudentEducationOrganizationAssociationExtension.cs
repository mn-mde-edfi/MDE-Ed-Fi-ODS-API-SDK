/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Identity
{
    /// <summary>
    /// MnStudentEducationOrganizationAssociationExtension
    /// </summary>
    [DataContract]
    public partial class MnStudentEducationOrganizationAssociationExtension :  IEquatable<MnStudentEducationOrganizationAssociationExtension>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentEducationOrganizationAssociationExtension" /> class.
        /// </summary>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes..</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth..</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born..</param>
        /// <param name="birthCity">The city the student was born in..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born..</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born..</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change..</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="lastSurname">The name borne in common by members of a family..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.).</param>
        /// <param name="genderIdentities">An unordered collection of studentEducationOrganizationAssociationGenderIdentities. Gender identity..</param>
        /// <param name="languageAcademicHonors">An unordered collection of studentEducationOrganizationAssociationLanguageAcademicHonors. Academic honors..</param>
        /// <param name="optOutIndicators">An unordered collection of studentEducationOrganizationAssociationOptOutIndicators. Opt Out Indicators..</param>
        /// <param name="otherNames">An unordered collection of studentEducationOrganizationAssociationOtherNames. Other name..</param>
        /// <param name="preferredPronouns">An unordered collection of studentEducationOrganizationAssociationPreferredPronouns. Preferred pronoun..</param>
        /// <param name="studentCrisisEvents">An unordered collection of studentEducationOrganizationAssociationStudentCrisisEvents. Information on the crisis that has affected a student..</param>
        public MnStudentEducationOrganizationAssociationExtension(string birthCountryDescriptor = default(string), string birthSexDescriptor = default(string), string birthStateAbbreviationDescriptor = default(string), string birthCity = default(string), DateTime? birthDate = default(DateTime?), string birthInternationalProvince = default(string), DateTime? dateEnteredUS = default(DateTime?), string firstName = default(string), string generationCodeSuffix = default(string), string lastSurname = default(string), string middleName = default(string), bool? multipleBirthStatus = default(bool?), List<MnStudentEducationOrganizationAssociationGenderIdentity> genderIdentities = default(List<MnStudentEducationOrganizationAssociationGenderIdentity>), List<MnStudentEducationOrganizationAssociationLanguageAcademicHonor> languageAcademicHonors = default(List<MnStudentEducationOrganizationAssociationLanguageAcademicHonor>), List<MnStudentEducationOrganizationAssociationOptOutIndicators> optOutIndicators = default(List<MnStudentEducationOrganizationAssociationOptOutIndicators>), List<MnStudentEducationOrganizationAssociationOtherName> otherNames = default(List<MnStudentEducationOrganizationAssociationOtherName>), List<MnStudentEducationOrganizationAssociationPreferredPronoun> preferredPronouns = default(List<MnStudentEducationOrganizationAssociationPreferredPronoun>), List<MnStudentEducationOrganizationAssociationStudentCrisisEvent> studentCrisisEvents = default(List<MnStudentEducationOrganizationAssociationStudentCrisisEvent>))
        {
            this.BirthCountryDescriptor = birthCountryDescriptor;
            this.BirthSexDescriptor = birthSexDescriptor;
            this.BirthStateAbbreviationDescriptor = birthStateAbbreviationDescriptor;
            this.BirthCity = birthCity;
            this.BirthDate = birthDate;
            this.BirthInternationalProvince = birthInternationalProvince;
            this.DateEnteredUS = dateEnteredUS;
            this.FirstName = firstName;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.LastSurname = lastSurname;
            this.MiddleName = middleName;
            this.MultipleBirthStatus = multipleBirthStatus;
            this.GenderIdentities = genderIdentities;
            this.LanguageAcademicHonors = languageAcademicHonors;
            this.OptOutIndicators = optOutIndicators;
            this.OtherNames = otherNames;
            this.PreferredPronouns = preferredPronouns;
            this.StudentCrisisEvents = studentCrisisEvents;
        }
        
        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</value>
        [DataMember(Name="birthCountryDescriptor", EmitDefaultValue=false)]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// A person&#39;s gender at birth.
        /// </summary>
        /// <value>A person&#39;s gender at birth.</value>
        [DataMember(Name="birthSexDescriptor", EmitDefaultValue=false)]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.</value>
        [DataMember(Name="birthStateAbbreviationDescriptor", EmitDefaultValue=false)]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        /// <value>The city the student was born in.</value>
        [DataMember(Name="birthCity", EmitDefaultValue=false)]
        public string BirthCity { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        /// <value>For students born outside of the U.S., the Province or jurisdiction in which an individual is born.</value>
        [DataMember(Name="birthInternationalProvince", EmitDefaultValue=false)]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        /// <value>For students born outside of the U.S., the date the student entered the U.S.</value>
        [DataMember(Name="dateEnteredUS", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name="generationCodeSuffix", EmitDefaultValue=false)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name="lastSurname", EmitDefaultValue=false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        /// <value>Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)</value>
        [DataMember(Name="multipleBirthStatus", EmitDefaultValue=false)]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationGenderIdentities. Gender identity.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationGenderIdentities. Gender identity.</value>
        [DataMember(Name="genderIdentities", EmitDefaultValue=false)]
        public List<MnStudentEducationOrganizationAssociationGenderIdentity> GenderIdentities { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationLanguageAcademicHonors. Academic honors.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationLanguageAcademicHonors. Academic honors.</value>
        [DataMember(Name="languageAcademicHonors", EmitDefaultValue=false)]
        public List<MnStudentEducationOrganizationAssociationLanguageAcademicHonor> LanguageAcademicHonors { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationOptOutIndicators. Opt Out Indicators.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationOptOutIndicators. Opt Out Indicators.</value>
        [DataMember(Name="optOutIndicators", EmitDefaultValue=false)]
        public List<MnStudentEducationOrganizationAssociationOptOutIndicators> OptOutIndicators { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationOtherNames. Other name.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationOtherNames. Other name.</value>
        [DataMember(Name="otherNames", EmitDefaultValue=false)]
        public List<MnStudentEducationOrganizationAssociationOtherName> OtherNames { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationPreferredPronouns. Preferred pronoun.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationPreferredPronouns. Preferred pronoun.</value>
        [DataMember(Name="preferredPronouns", EmitDefaultValue=false)]
        public List<MnStudentEducationOrganizationAssociationPreferredPronoun> PreferredPronouns { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationStudentCrisisEvents. Information on the crisis that has affected a student.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationStudentCrisisEvents. Information on the crisis that has affected a student.</value>
        [DataMember(Name="studentCrisisEvents", EmitDefaultValue=false)]
        public List<MnStudentEducationOrganizationAssociationStudentCrisisEvent> StudentCrisisEvents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MnStudentEducationOrganizationAssociationExtension {\n");
            sb.Append("  BirthCountryDescriptor: ").Append(BirthCountryDescriptor).Append("\n");
            sb.Append("  BirthSexDescriptor: ").Append(BirthSexDescriptor).Append("\n");
            sb.Append("  BirthStateAbbreviationDescriptor: ").Append(BirthStateAbbreviationDescriptor).Append("\n");
            sb.Append("  BirthCity: ").Append(BirthCity).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BirthInternationalProvince: ").Append(BirthInternationalProvince).Append("\n");
            sb.Append("  DateEnteredUS: ").Append(DateEnteredUS).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  MultipleBirthStatus: ").Append(MultipleBirthStatus).Append("\n");
            sb.Append("  GenderIdentities: ").Append(GenderIdentities).Append("\n");
            sb.Append("  LanguageAcademicHonors: ").Append(LanguageAcademicHonors).Append("\n");
            sb.Append("  OptOutIndicators: ").Append(OptOutIndicators).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PreferredPronouns: ").Append(PreferredPronouns).Append("\n");
            sb.Append("  StudentCrisisEvents: ").Append(StudentCrisisEvents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnStudentEducationOrganizationAssociationExtension);
        }

        /// <summary>
        /// Returns true if MnStudentEducationOrganizationAssociationExtension instances are equal
        /// </summary>
        /// <param name="input">Instance of MnStudentEducationOrganizationAssociationExtension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnStudentEducationOrganizationAssociationExtension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BirthCountryDescriptor == input.BirthCountryDescriptor ||
                    (this.BirthCountryDescriptor != null &&
                    this.BirthCountryDescriptor.Equals(input.BirthCountryDescriptor))
                ) && 
                (
                    this.BirthSexDescriptor == input.BirthSexDescriptor ||
                    (this.BirthSexDescriptor != null &&
                    this.BirthSexDescriptor.Equals(input.BirthSexDescriptor))
                ) && 
                (
                    this.BirthStateAbbreviationDescriptor == input.BirthStateAbbreviationDescriptor ||
                    (this.BirthStateAbbreviationDescriptor != null &&
                    this.BirthStateAbbreviationDescriptor.Equals(input.BirthStateAbbreviationDescriptor))
                ) && 
                (
                    this.BirthCity == input.BirthCity ||
                    (this.BirthCity != null &&
                    this.BirthCity.Equals(input.BirthCity))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.BirthInternationalProvince == input.BirthInternationalProvince ||
                    (this.BirthInternationalProvince != null &&
                    this.BirthInternationalProvince.Equals(input.BirthInternationalProvince))
                ) && 
                (
                    this.DateEnteredUS == input.DateEnteredUS ||
                    (this.DateEnteredUS != null &&
                    this.DateEnteredUS.Equals(input.DateEnteredUS))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (this.GenerationCodeSuffix != null &&
                    this.GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.MultipleBirthStatus == input.MultipleBirthStatus ||
                    (this.MultipleBirthStatus != null &&
                    this.MultipleBirthStatus.Equals(input.MultipleBirthStatus))
                ) && 
                (
                    this.GenderIdentities == input.GenderIdentities ||
                    this.GenderIdentities != null &&
                    this.GenderIdentities.SequenceEqual(input.GenderIdentities)
                ) && 
                (
                    this.LanguageAcademicHonors == input.LanguageAcademicHonors ||
                    this.LanguageAcademicHonors != null &&
                    this.LanguageAcademicHonors.SequenceEqual(input.LanguageAcademicHonors)
                ) && 
                (
                    this.OptOutIndicators == input.OptOutIndicators ||
                    this.OptOutIndicators != null &&
                    this.OptOutIndicators.SequenceEqual(input.OptOutIndicators)
                ) && 
                (
                    this.OtherNames == input.OtherNames ||
                    this.OtherNames != null &&
                    this.OtherNames.SequenceEqual(input.OtherNames)
                ) && 
                (
                    this.PreferredPronouns == input.PreferredPronouns ||
                    this.PreferredPronouns != null &&
                    this.PreferredPronouns.SequenceEqual(input.PreferredPronouns)
                ) && 
                (
                    this.StudentCrisisEvents == input.StudentCrisisEvents ||
                    this.StudentCrisisEvents != null &&
                    this.StudentCrisisEvents.SequenceEqual(input.StudentCrisisEvents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BirthCountryDescriptor != null)
                    hashCode = hashCode * 59 + this.BirthCountryDescriptor.GetHashCode();
                if (this.BirthSexDescriptor != null)
                    hashCode = hashCode * 59 + this.BirthSexDescriptor.GetHashCode();
                if (this.BirthStateAbbreviationDescriptor != null)
                    hashCode = hashCode * 59 + this.BirthStateAbbreviationDescriptor.GetHashCode();
                if (this.BirthCity != null)
                    hashCode = hashCode * 59 + this.BirthCity.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.BirthInternationalProvince != null)
                    hashCode = hashCode * 59 + this.BirthInternationalProvince.GetHashCode();
                if (this.DateEnteredUS != null)
                    hashCode = hashCode * 59 + this.DateEnteredUS.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GenerationCodeSuffix != null)
                    hashCode = hashCode * 59 + this.GenerationCodeSuffix.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.MultipleBirthStatus != null)
                    hashCode = hashCode * 59 + this.MultipleBirthStatus.GetHashCode();
                if (this.GenderIdentities != null)
                    hashCode = hashCode * 59 + this.GenderIdentities.GetHashCode();
                if (this.LanguageAcademicHonors != null)
                    hashCode = hashCode * 59 + this.LanguageAcademicHonors.GetHashCode();
                if (this.OptOutIndicators != null)
                    hashCode = hashCode * 59 + this.OptOutIndicators.GetHashCode();
                if (this.OtherNames != null)
                    hashCode = hashCode * 59 + this.OtherNames.GetHashCode();
                if (this.PreferredPronouns != null)
                    hashCode = hashCode * 59 + this.PreferredPronouns.GetHashCode();
                if (this.StudentCrisisEvents != null)
                    hashCode = hashCode * 59 + this.StudentCrisisEvents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BirthCountryDescriptor (string) maxLength
            if(this.BirthCountryDescriptor != null && this.BirthCountryDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthCountryDescriptor, length must be less than 306.", new [] { "BirthCountryDescriptor" });
            }

            // BirthSexDescriptor (string) maxLength
            if(this.BirthSexDescriptor != null && this.BirthSexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthSexDescriptor, length must be less than 306.", new [] { "BirthSexDescriptor" });
            }

            // BirthStateAbbreviationDescriptor (string) maxLength
            if(this.BirthStateAbbreviationDescriptor != null && this.BirthStateAbbreviationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthStateAbbreviationDescriptor, length must be less than 306.", new [] { "BirthStateAbbreviationDescriptor" });
            }

            // BirthCity (string) maxLength
            if(this.BirthCity != null && this.BirthCity.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthCity, length must be less than 30.", new [] { "BirthCity" });
            }

            // BirthInternationalProvince (string) maxLength
            if(this.BirthInternationalProvince != null && this.BirthInternationalProvince.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthInternationalProvince, length must be less than 150.", new [] { "BirthInternationalProvince" });
            }

            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // GenerationCodeSuffix (string) maxLength
            if(this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // LastSurname (string) maxLength
            if(this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // MiddleName (string) maxLength
            if(this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            yield break;
        }
    }

}
