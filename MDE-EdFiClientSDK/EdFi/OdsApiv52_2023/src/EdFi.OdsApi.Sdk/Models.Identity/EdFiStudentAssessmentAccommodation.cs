/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Identity
{
    /// <summary>
    /// EdFiStudentAssessmentAccommodation
    /// </summary>
    [DataContract]
    public partial class EdFiStudentAssessmentAccommodation :  IEquatable<EdFiStudentAssessmentAccommodation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentAccommodation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAssessmentAccommodation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentAccommodation" /> class.
        /// </summary>
        /// <param name="accommodationDescriptor">The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:         Braille         Enlarged monitor view         Extra time         Large Print         Setting         Oral Administration         ... (required).</param>
        public EdFiStudentAssessmentAccommodation(string accommodationDescriptor = default(string))
        {
            // to ensure "accommodationDescriptor" is required (not null)
            if (accommodationDescriptor == null)
            {
                throw new InvalidDataException("accommodationDescriptor is a required property for EdFiStudentAssessmentAccommodation and cannot be null");
            }
            else
            {
                this.AccommodationDescriptor = accommodationDescriptor;
            }
        }
        
        /// <summary>
        /// The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:         Braille         Enlarged monitor view         Extra time         Large Print         Setting         Oral Administration         ...
        /// </summary>
        /// <value>The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:         Braille         Enlarged monitor view         Extra time         Large Print         Setting         Oral Administration         ...</value>
        [DataMember(Name="accommodationDescriptor", EmitDefaultValue=false)]
        public string AccommodationDescriptor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentAccommodation {\n");
            sb.Append("  AccommodationDescriptor: ").Append(AccommodationDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentAssessmentAccommodation);
        }

        /// <summary>
        /// Returns true if EdFiStudentAssessmentAccommodation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentAssessmentAccommodation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentAssessmentAccommodation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccommodationDescriptor == input.AccommodationDescriptor ||
                    (this.AccommodationDescriptor != null &&
                    this.AccommodationDescriptor.Equals(input.AccommodationDescriptor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccommodationDescriptor != null)
                    hashCode = hashCode * 59 + this.AccommodationDescriptor.GetHashCode();
                return hashCode;
            }
        }
    }

}
