/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Identity
{
    /// <summary>
    /// EdFiStaffSchoolAssociation
    /// </summary>
    [DataContract]
    public partial class EdFiStaffSchoolAssociation :  IEquatable<EdFiStaffSchoolAssociation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSchoolAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffSchoolAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSchoolAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="programAssignmentDescriptor">The name of the program for which the individual is assigned; for example:         Regular education         Title I-Academic         Title I-Non-Academic         Special Education         Bilingual/English as a Second Language. (required).</param>
        /// <param name="calendarReference">calendarReference.</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference.</param>
        /// <param name="staffReference">staffReference (required).</param>
        /// <param name="academicSubjects">An unordered collection of staffSchoolAssociationAcademicSubjects. The academic subjects the individual is eligible to teach..</param>
        /// <param name="gradeLevels">An unordered collection of staffSchoolAssociationGradeLevels. The grade levels the individual is eligible to teach..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStaffSchoolAssociation(string id = default(string), string programAssignmentDescriptor = default(string), EdFiCalendarReference calendarReference = default(EdFiCalendarReference), EdFiSchoolReference schoolReference = default(EdFiSchoolReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), EdFiStaffReference staffReference = default(EdFiStaffReference), List<EdFiStaffSchoolAssociationAcademicSubject> academicSubjects = default(List<EdFiStaffSchoolAssociationAcademicSubject>), List<EdFiStaffSchoolAssociationGradeLevel> gradeLevels = default(List<EdFiStaffSchoolAssociationGradeLevel>), string etag = default(string))
        {
            // to ensure "programAssignmentDescriptor" is required (not null)
            if (programAssignmentDescriptor == null)
            {
                throw new InvalidDataException("programAssignmentDescriptor is a required property for EdFiStaffSchoolAssociation and cannot be null");
            }
            else
            {
                this.ProgramAssignmentDescriptor = programAssignmentDescriptor;
            }
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new InvalidDataException("schoolReference is a required property for EdFiStaffSchoolAssociation and cannot be null");
            }
            else
            {
                this.SchoolReference = schoolReference;
            }
            // to ensure "staffReference" is required (not null)
            if (staffReference == null)
            {
                throw new InvalidDataException("staffReference is a required property for EdFiStaffSchoolAssociation and cannot be null");
            }
            else
            {
                this.StaffReference = staffReference;
            }
            this.Id = id;
            this.CalendarReference = calendarReference;
            this.SchoolYearTypeReference = schoolYearTypeReference;
            this.AcademicSubjects = academicSubjects;
            this.GradeLevels = gradeLevels;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the program for which the individual is assigned; for example:         Regular education         Title I-Academic         Title I-Non-Academic         Special Education         Bilingual/English as a Second Language.
        /// </summary>
        /// <value>The name of the program for which the individual is assigned; for example:         Regular education         Title I-Academic         Title I-Non-Academic         Special Education         Bilingual/English as a Second Language.</value>
        [DataMember(Name="programAssignmentDescriptor", EmitDefaultValue=false)]
        public string ProgramAssignmentDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets CalendarReference
        /// </summary>
        [DataMember(Name="calendarReference", EmitDefaultValue=false)]
        public EdFiCalendarReference CalendarReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name="schoolReference", EmitDefaultValue=false)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name="staffReference", EmitDefaultValue=false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// An unordered collection of staffSchoolAssociationAcademicSubjects. The academic subjects the individual is eligible to teach.
        /// </summary>
        /// <value>An unordered collection of staffSchoolAssociationAcademicSubjects. The academic subjects the individual is eligible to teach.</value>
        [DataMember(Name="academicSubjects", EmitDefaultValue=false)]
        public List<EdFiStaffSchoolAssociationAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// An unordered collection of staffSchoolAssociationGradeLevels. The grade levels the individual is eligible to teach.
        /// </summary>
        /// <value>An unordered collection of staffSchoolAssociationGradeLevels. The grade levels the individual is eligible to teach.</value>
        [DataMember(Name="gradeLevels", EmitDefaultValue=false)]
        public List<EdFiStaffSchoolAssociationGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStaffSchoolAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramAssignmentDescriptor: ").Append(ProgramAssignmentDescriptor).Append("\n");
            sb.Append("  CalendarReference: ").Append(CalendarReference).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStaffSchoolAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStaffSchoolAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStaffSchoolAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStaffSchoolAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProgramAssignmentDescriptor == input.ProgramAssignmentDescriptor ||
                    (this.ProgramAssignmentDescriptor != null &&
                    this.ProgramAssignmentDescriptor.Equals(input.ProgramAssignmentDescriptor))
                ) && 
                (
                    this.CalendarReference == input.CalendarReference ||
                    (this.CalendarReference != null &&
                    this.CalendarReference.Equals(input.CalendarReference))
                ) && 
                (
                    this.SchoolReference == input.SchoolReference ||
                    (this.SchoolReference != null &&
                    this.SchoolReference.Equals(input.SchoolReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.AcademicSubjects == input.AcademicSubjects ||
                    this.AcademicSubjects != null &&
                    this.AcademicSubjects.SequenceEqual(input.AcademicSubjects)
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProgramAssignmentDescriptor != null)
                    hashCode = hashCode * 59 + this.ProgramAssignmentDescriptor.GetHashCode();
                if (this.CalendarReference != null)
                    hashCode = hashCode * 59 + this.CalendarReference.GetHashCode();
                if (this.SchoolReference != null)
                    hashCode = hashCode * 59 + this.SchoolReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.AcademicSubjects != null)
                    hashCode = hashCode * 59 + this.AcademicSubjects.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
