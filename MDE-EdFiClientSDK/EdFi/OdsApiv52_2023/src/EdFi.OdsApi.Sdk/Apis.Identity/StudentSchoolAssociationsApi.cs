/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using EdFi.OdsApi.Sdk.Client;
using EdFi.OdsApi.Sdk.Models.Identity;

namespace EdFi.OdsApi.Sdk.Apis.Identity
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStudentSchoolAssociationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void DeleteStudentSchoolAssociationById (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStudentSchoolAssociationByIdWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;DeletedResource&gt;</returns>
        List<DeletedResource> DeletesStudentSchoolAssociations (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeletedResource&gt;</returns>
        ApiResponse<List<DeletedResource>> DeletesStudentSchoolAssociationsWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the Calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="classOfSchoolYear">Projected High School graduation year. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;EdFiStudentSchoolAssociation&gt;</returns>
        List<EdFiStudentSchoolAssociation> GetStudentSchoolAssociations (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, DateTime? entryDate = null, int? schoolId = null, string studentUniqueId = null, string calendarCode = null, int? schoolYear = null, int? educationOrganizationId = null, string graduationPlanTypeDescriptor = null, int? graduationSchoolYear = null, int? classOfSchoolYear = null, string entryGradeLevelReasonDescriptor = null, string entryTypeDescriptor = null, string exitWithdrawTypeDescriptor = null, string entryGradeLevelDescriptor = null, string residencyStatusDescriptor = null, bool? employedWhileEnrolled = null, DateTime? exitWithdrawDate = null, double? fullTimeEquivalency = null, string id = null, bool? primarySchool = null, bool? repeatGradeIndicator = null, bool? schoolChoiceTransfer = null, bool? termCompletionIndicator = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the Calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="classOfSchoolYear">Projected High School graduation year. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;EdFiStudentSchoolAssociation&gt;</returns>
        ApiResponse<List<EdFiStudentSchoolAssociation>> GetStudentSchoolAssociationsWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, DateTime? entryDate = null, int? schoolId = null, string studentUniqueId = null, string calendarCode = null, int? schoolYear = null, int? educationOrganizationId = null, string graduationPlanTypeDescriptor = null, int? graduationSchoolYear = null, int? classOfSchoolYear = null, string entryGradeLevelReasonDescriptor = null, string entryTypeDescriptor = null, string exitWithdrawTypeDescriptor = null, string entryGradeLevelDescriptor = null, string residencyStatusDescriptor = null, bool? employedWhileEnrolled = null, DateTime? exitWithdrawDate = null, double? fullTimeEquivalency = null, string id = null, bool? primarySchool = null, bool? repeatGradeIndicator = null, bool? schoolChoiceTransfer = null, bool? termCompletionIndicator = null, string snapshotIdentifier = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>EdFiStudentSchoolAssociation</returns>
        EdFiStudentSchoolAssociation GetStudentSchoolAssociationsById (string id, string ifNoneMatch = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of EdFiStudentSchoolAssociation</returns>
        ApiResponse<EdFiStudentSchoolAssociation> GetStudentSchoolAssociationsByIdWithHttpInfo (string id, string ifNoneMatch = null, string snapshotIdentifier = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        void PostStudentSchoolAssociation (EdFiStudentSchoolAssociation studentSchoolAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostStudentSchoolAssociationWithHttpInfo (EdFiStudentSchoolAssociation studentSchoolAssociation);
        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void PutStudentSchoolAssociation (string id, EdFiStudentSchoolAssociation studentSchoolAssociation, string ifMatch = null);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutStudentSchoolAssociationWithHttpInfo (string id, EdFiStudentSchoolAssociation studentSchoolAssociation, string ifMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStudentSchoolAssociationByIdAsync (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStudentSchoolAssociationByIdAsyncWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of List&lt;DeletedResource&gt;</returns>
        System.Threading.Tasks.Task<List<DeletedResource>> DeletesStudentSchoolAssociationsAsync (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeletedResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeletedResource>>> DeletesStudentSchoolAssociationsAsyncWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the Calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="classOfSchoolYear">Projected High School graduation year. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of List&lt;EdFiStudentSchoolAssociation&gt;</returns>
        System.Threading.Tasks.Task<List<EdFiStudentSchoolAssociation>> GetStudentSchoolAssociationsAsync (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, DateTime? entryDate = null, int? schoolId = null, string studentUniqueId = null, string calendarCode = null, int? schoolYear = null, int? educationOrganizationId = null, string graduationPlanTypeDescriptor = null, int? graduationSchoolYear = null, int? classOfSchoolYear = null, string entryGradeLevelReasonDescriptor = null, string entryTypeDescriptor = null, string exitWithdrawTypeDescriptor = null, string entryGradeLevelDescriptor = null, string residencyStatusDescriptor = null, bool? employedWhileEnrolled = null, DateTime? exitWithdrawDate = null, double? fullTimeEquivalency = null, string id = null, bool? primarySchool = null, bool? repeatGradeIndicator = null, bool? schoolChoiceTransfer = null, bool? termCompletionIndicator = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the Calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="classOfSchoolYear">Projected High School graduation year. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdFiStudentSchoolAssociation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdFiStudentSchoolAssociation>>> GetStudentSchoolAssociationsAsyncWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, DateTime? entryDate = null, int? schoolId = null, string studentUniqueId = null, string calendarCode = null, int? schoolYear = null, int? educationOrganizationId = null, string graduationPlanTypeDescriptor = null, int? graduationSchoolYear = null, int? classOfSchoolYear = null, string entryGradeLevelReasonDescriptor = null, string entryTypeDescriptor = null, string exitWithdrawTypeDescriptor = null, string entryGradeLevelDescriptor = null, string residencyStatusDescriptor = null, bool? employedWhileEnrolled = null, DateTime? exitWithdrawDate = null, double? fullTimeEquivalency = null, string id = null, bool? primarySchool = null, bool? repeatGradeIndicator = null, bool? schoolChoiceTransfer = null, bool? termCompletionIndicator = null, string snapshotIdentifier = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of EdFiStudentSchoolAssociation</returns>
        System.Threading.Tasks.Task<EdFiStudentSchoolAssociation> GetStudentSchoolAssociationsByIdAsync (string id, string ifNoneMatch = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (EdFiStudentSchoolAssociation)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdFiStudentSchoolAssociation>> GetStudentSchoolAssociationsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null, string snapshotIdentifier = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostStudentSchoolAssociationAsync (EdFiStudentSchoolAssociation studentSchoolAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostStudentSchoolAssociationAsyncWithHttpInfo (EdFiStudentSchoolAssociation studentSchoolAssociation);
        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutStudentSchoolAssociationAsync (string id, EdFiStudentSchoolAssociation studentSchoolAssociation, string ifMatch = null);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutStudentSchoolAssociationAsyncWithHttpInfo (string id, EdFiStudentSchoolAssociation studentSchoolAssociation, string ifMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StudentSchoolAssociationsApi : IStudentSchoolAssociationsApi
    {
        private EdFi.OdsApi.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentSchoolAssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentSchoolAssociationsApi(String basePath)
        {
            this.Configuration = new EdFi.OdsApi.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentSchoolAssociationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StudentSchoolAssociationsApi(EdFi.OdsApi.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdFi.OdsApi.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.OdsApi.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void DeleteStudentSchoolAssociationById (string id, string ifMatch = null)
        {
             DeleteStudentSchoolAssociationByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStudentSchoolAssociationByIdWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StudentSchoolAssociationsApi->DeleteStudentSchoolAssociationById");

            var localVarPath = "./ed-fi/studentSchoolAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStudentSchoolAssociationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStudentSchoolAssociationByIdAsync (string id, string ifMatch = null)
        {
             await DeleteStudentSchoolAssociationByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStudentSchoolAssociationByIdAsyncWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StudentSchoolAssociationsApi->DeleteStudentSchoolAssociationById");

            var localVarPath = "./ed-fi/studentSchoolAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStudentSchoolAssociationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;DeletedResource&gt;</returns>
        public List<DeletedResource> DeletesStudentSchoolAssociations (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null)
        {
             ApiResponse<List<DeletedResource>> localVarResponse = DeletesStudentSchoolAssociationsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeletedResource&gt;</returns>
        public ApiResponse< List<DeletedResource> > DeletesStudentSchoolAssociationsWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null)
        {

            var localVarPath = "./ed-fi/studentSchoolAssociations/deletes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minChangeVersion", minChangeVersion)); // query parameter
            if (maxChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxChangeVersion", maxChangeVersion)); // query parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletesStudentSchoolAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeletedResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DeletedResource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeletedResource>)));
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of List&lt;DeletedResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeletedResource>> DeletesStudentSchoolAssociationsAsync (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null)
        {
             ApiResponse<List<DeletedResource>> localVarResponse = await DeletesStudentSchoolAssociationsAsyncWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeletedResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeletedResource>>> DeletesStudentSchoolAssociationsAsyncWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null)
        {

            var localVarPath = "./ed-fi/studentSchoolAssociations/deletes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minChangeVersion", minChangeVersion)); // query parameter
            if (maxChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxChangeVersion", maxChangeVersion)); // query parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletesStudentSchoolAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeletedResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DeletedResource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeletedResource>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the Calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="classOfSchoolYear">Projected High School graduation year. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;EdFiStudentSchoolAssociation&gt;</returns>
        public List<EdFiStudentSchoolAssociation> GetStudentSchoolAssociations (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, DateTime? entryDate = null, int? schoolId = null, string studentUniqueId = null, string calendarCode = null, int? schoolYear = null, int? educationOrganizationId = null, string graduationPlanTypeDescriptor = null, int? graduationSchoolYear = null, int? classOfSchoolYear = null, string entryGradeLevelReasonDescriptor = null, string entryTypeDescriptor = null, string exitWithdrawTypeDescriptor = null, string entryGradeLevelDescriptor = null, string residencyStatusDescriptor = null, bool? employedWhileEnrolled = null, DateTime? exitWithdrawDate = null, double? fullTimeEquivalency = null, string id = null, bool? primarySchool = null, bool? repeatGradeIndicator = null, bool? schoolChoiceTransfer = null, bool? termCompletionIndicator = null, string snapshotIdentifier = null)
        {
             ApiResponse<List<EdFiStudentSchoolAssociation>> localVarResponse = GetStudentSchoolAssociationsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, classOfSchoolYear, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, residencyStatusDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoiceTransfer, termCompletionIndicator, snapshotIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the Calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="classOfSchoolYear">Projected High School graduation year. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;EdFiStudentSchoolAssociation&gt;</returns>
        public ApiResponse< List<EdFiStudentSchoolAssociation> > GetStudentSchoolAssociationsWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, DateTime? entryDate = null, int? schoolId = null, string studentUniqueId = null, string calendarCode = null, int? schoolYear = null, int? educationOrganizationId = null, string graduationPlanTypeDescriptor = null, int? graduationSchoolYear = null, int? classOfSchoolYear = null, string entryGradeLevelReasonDescriptor = null, string entryTypeDescriptor = null, string exitWithdrawTypeDescriptor = null, string entryGradeLevelDescriptor = null, string residencyStatusDescriptor = null, bool? employedWhileEnrolled = null, DateTime? exitWithdrawDate = null, double? fullTimeEquivalency = null, string id = null, bool? primarySchool = null, bool? repeatGradeIndicator = null, bool? schoolChoiceTransfer = null, bool? termCompletionIndicator = null, string snapshotIdentifier = null)
        {

            var localVarPath = "./ed-fi/studentSchoolAssociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minChangeVersion", minChangeVersion)); // query parameter
            if (maxChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxChangeVersion", maxChangeVersion)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (entryDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryDate", entryDate)); // query parameter
            if (schoolId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schoolId", schoolId)); // query parameter
            if (studentUniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "studentUniqueId", studentUniqueId)); // query parameter
            if (calendarCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "calendarCode", calendarCode)); // query parameter
            if (schoolYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schoolYear", schoolYear)); // query parameter
            if (educationOrganizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "educationOrganizationId", educationOrganizationId)); // query parameter
            if (graduationPlanTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "graduationPlanTypeDescriptor", graduationPlanTypeDescriptor)); // query parameter
            if (graduationSchoolYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "graduationSchoolYear", graduationSchoolYear)); // query parameter
            if (classOfSchoolYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classOfSchoolYear", classOfSchoolYear)); // query parameter
            if (entryGradeLevelReasonDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryGradeLevelReasonDescriptor", entryGradeLevelReasonDescriptor)); // query parameter
            if (entryTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryTypeDescriptor", entryTypeDescriptor)); // query parameter
            if (exitWithdrawTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exitWithdrawTypeDescriptor", exitWithdrawTypeDescriptor)); // query parameter
            if (entryGradeLevelDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryGradeLevelDescriptor", entryGradeLevelDescriptor)); // query parameter
            if (residencyStatusDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "residencyStatusDescriptor", residencyStatusDescriptor)); // query parameter
            if (employedWhileEnrolled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "employedWhileEnrolled", employedWhileEnrolled)); // query parameter
            if (exitWithdrawDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exitWithdrawDate", exitWithdrawDate)); // query parameter
            if (fullTimeEquivalency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fullTimeEquivalency", fullTimeEquivalency)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (primarySchool != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "primarySchool", primarySchool)); // query parameter
            if (repeatGradeIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repeatGradeIndicator", repeatGradeIndicator)); // query parameter
            if (schoolChoiceTransfer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schoolChoiceTransfer", schoolChoiceTransfer)); // query parameter
            if (termCompletionIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "termCompletionIndicator", termCompletionIndicator)); // query parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentSchoolAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdFiStudentSchoolAssociation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EdFiStudentSchoolAssociation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdFiStudentSchoolAssociation>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the Calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="classOfSchoolYear">Projected High School graduation year. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of List&lt;EdFiStudentSchoolAssociation&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdFiStudentSchoolAssociation>> GetStudentSchoolAssociationsAsync (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, DateTime? entryDate = null, int? schoolId = null, string studentUniqueId = null, string calendarCode = null, int? schoolYear = null, int? educationOrganizationId = null, string graduationPlanTypeDescriptor = null, int? graduationSchoolYear = null, int? classOfSchoolYear = null, string entryGradeLevelReasonDescriptor = null, string entryTypeDescriptor = null, string exitWithdrawTypeDescriptor = null, string entryGradeLevelDescriptor = null, string residencyStatusDescriptor = null, bool? employedWhileEnrolled = null, DateTime? exitWithdrawDate = null, double? fullTimeEquivalency = null, string id = null, bool? primarySchool = null, bool? repeatGradeIndicator = null, bool? schoolChoiceTransfer = null, bool? termCompletionIndicator = null, string snapshotIdentifier = null)
        {
             ApiResponse<List<EdFiStudentSchoolAssociation>> localVarResponse = await GetStudentSchoolAssociationsAsyncWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, classOfSchoolYear, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, residencyStatusDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoiceTransfer, termCompletionIndicator, snapshotIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the Calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="classOfSchoolYear">Projected High School graduation year. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EdFiStudentSchoolAssociation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EdFiStudentSchoolAssociation>>> GetStudentSchoolAssociationsAsyncWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, DateTime? entryDate = null, int? schoolId = null, string studentUniqueId = null, string calendarCode = null, int? schoolYear = null, int? educationOrganizationId = null, string graduationPlanTypeDescriptor = null, int? graduationSchoolYear = null, int? classOfSchoolYear = null, string entryGradeLevelReasonDescriptor = null, string entryTypeDescriptor = null, string exitWithdrawTypeDescriptor = null, string entryGradeLevelDescriptor = null, string residencyStatusDescriptor = null, bool? employedWhileEnrolled = null, DateTime? exitWithdrawDate = null, double? fullTimeEquivalency = null, string id = null, bool? primarySchool = null, bool? repeatGradeIndicator = null, bool? schoolChoiceTransfer = null, bool? termCompletionIndicator = null, string snapshotIdentifier = null)
        {

            var localVarPath = "./ed-fi/studentSchoolAssociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minChangeVersion", minChangeVersion)); // query parameter
            if (maxChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxChangeVersion", maxChangeVersion)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (entryDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryDate", entryDate)); // query parameter
            if (schoolId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schoolId", schoolId)); // query parameter
            if (studentUniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "studentUniqueId", studentUniqueId)); // query parameter
            if (calendarCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "calendarCode", calendarCode)); // query parameter
            if (schoolYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schoolYear", schoolYear)); // query parameter
            if (educationOrganizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "educationOrganizationId", educationOrganizationId)); // query parameter
            if (graduationPlanTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "graduationPlanTypeDescriptor", graduationPlanTypeDescriptor)); // query parameter
            if (graduationSchoolYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "graduationSchoolYear", graduationSchoolYear)); // query parameter
            if (classOfSchoolYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classOfSchoolYear", classOfSchoolYear)); // query parameter
            if (entryGradeLevelReasonDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryGradeLevelReasonDescriptor", entryGradeLevelReasonDescriptor)); // query parameter
            if (entryTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryTypeDescriptor", entryTypeDescriptor)); // query parameter
            if (exitWithdrawTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exitWithdrawTypeDescriptor", exitWithdrawTypeDescriptor)); // query parameter
            if (entryGradeLevelDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryGradeLevelDescriptor", entryGradeLevelDescriptor)); // query parameter
            if (residencyStatusDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "residencyStatusDescriptor", residencyStatusDescriptor)); // query parameter
            if (employedWhileEnrolled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "employedWhileEnrolled", employedWhileEnrolled)); // query parameter
            if (exitWithdrawDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exitWithdrawDate", exitWithdrawDate)); // query parameter
            if (fullTimeEquivalency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fullTimeEquivalency", fullTimeEquivalency)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (primarySchool != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "primarySchool", primarySchool)); // query parameter
            if (repeatGradeIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repeatGradeIndicator", repeatGradeIndicator)); // query parameter
            if (schoolChoiceTransfer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schoolChoiceTransfer", schoolChoiceTransfer)); // query parameter
            if (termCompletionIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "termCompletionIndicator", termCompletionIndicator)); // query parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentSchoolAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EdFiStudentSchoolAssociation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EdFiStudentSchoolAssociation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EdFiStudentSchoolAssociation>)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>EdFiStudentSchoolAssociation</returns>
        public EdFiStudentSchoolAssociation GetStudentSchoolAssociationsById (string id, string ifNoneMatch = null, string snapshotIdentifier = null)
        {
             ApiResponse<EdFiStudentSchoolAssociation> localVarResponse = GetStudentSchoolAssociationsByIdWithHttpInfo(id, ifNoneMatch, snapshotIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of EdFiStudentSchoolAssociation</returns>
        public ApiResponse< EdFiStudentSchoolAssociation > GetStudentSchoolAssociationsByIdWithHttpInfo (string id, string ifNoneMatch = null, string snapshotIdentifier = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StudentSchoolAssociationsApi->GetStudentSchoolAssociationsById");

            var localVarPath = "./ed-fi/studentSchoolAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentSchoolAssociationsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdFiStudentSchoolAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EdFiStudentSchoolAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdFiStudentSchoolAssociation)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of EdFiStudentSchoolAssociation</returns>
        public async System.Threading.Tasks.Task<EdFiStudentSchoolAssociation> GetStudentSchoolAssociationsByIdAsync (string id, string ifNoneMatch = null, string snapshotIdentifier = null)
        {
             ApiResponse<EdFiStudentSchoolAssociation> localVarResponse = await GetStudentSchoolAssociationsByIdAsyncWithHttpInfo(id, ifNoneMatch, snapshotIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (EdFiStudentSchoolAssociation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdFiStudentSchoolAssociation>> GetStudentSchoolAssociationsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null, string snapshotIdentifier = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StudentSchoolAssociationsApi->GetStudentSchoolAssociationsById");

            var localVarPath = "./ed-fi/studentSchoolAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentSchoolAssociationsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdFiStudentSchoolAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EdFiStudentSchoolAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdFiStudentSchoolAssociation)));
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        public void PostStudentSchoolAssociation (EdFiStudentSchoolAssociation studentSchoolAssociation)
        {
             PostStudentSchoolAssociationWithHttpInfo(studentSchoolAssociation);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostStudentSchoolAssociationWithHttpInfo (EdFiStudentSchoolAssociation studentSchoolAssociation)
        {
            // verify the required parameter 'studentSchoolAssociation' is set
            if (studentSchoolAssociation == null)
                throw new ApiException(400, "Missing required parameter 'studentSchoolAssociation' when calling StudentSchoolAssociationsApi->PostStudentSchoolAssociation");

            var localVarPath = "./ed-fi/studentSchoolAssociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (studentSchoolAssociation != null && studentSchoolAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(studentSchoolAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = studentSchoolAssociation; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStudentSchoolAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostStudentSchoolAssociationAsync (EdFiStudentSchoolAssociation studentSchoolAssociation)
        {
             await PostStudentSchoolAssociationAsyncWithHttpInfo(studentSchoolAssociation);

        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostStudentSchoolAssociationAsyncWithHttpInfo (EdFiStudentSchoolAssociation studentSchoolAssociation)
        {
            // verify the required parameter 'studentSchoolAssociation' is set
            if (studentSchoolAssociation == null)
                throw new ApiException(400, "Missing required parameter 'studentSchoolAssociation' when calling StudentSchoolAssociationsApi->PostStudentSchoolAssociation");

            var localVarPath = "./ed-fi/studentSchoolAssociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (studentSchoolAssociation != null && studentSchoolAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(studentSchoolAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = studentSchoolAssociation; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStudentSchoolAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void PutStudentSchoolAssociation (string id, EdFiStudentSchoolAssociation studentSchoolAssociation, string ifMatch = null)
        {
             PutStudentSchoolAssociationWithHttpInfo(id, studentSchoolAssociation, ifMatch);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutStudentSchoolAssociationWithHttpInfo (string id, EdFiStudentSchoolAssociation studentSchoolAssociation, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StudentSchoolAssociationsApi->PutStudentSchoolAssociation");
            // verify the required parameter 'studentSchoolAssociation' is set
            if (studentSchoolAssociation == null)
                throw new ApiException(400, "Missing required parameter 'studentSchoolAssociation' when calling StudentSchoolAssociationsApi->PutStudentSchoolAssociation");

            var localVarPath = "./ed-fi/studentSchoolAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (studentSchoolAssociation != null && studentSchoolAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(studentSchoolAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = studentSchoolAssociation; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutStudentSchoolAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutStudentSchoolAssociationAsync (string id, EdFiStudentSchoolAssociation studentSchoolAssociation, string ifMatch = null)
        {
             await PutStudentSchoolAssociationAsyncWithHttpInfo(id, studentSchoolAssociation, ifMatch);

        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutStudentSchoolAssociationAsyncWithHttpInfo (string id, EdFiStudentSchoolAssociation studentSchoolAssociation, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StudentSchoolAssociationsApi->PutStudentSchoolAssociation");
            // verify the required parameter 'studentSchoolAssociation' is set
            if (studentSchoolAssociation == null)
                throw new ApiException(400, "Missing required parameter 'studentSchoolAssociation' when calling StudentSchoolAssociationsApi->PutStudentSchoolAssociation");

            var localVarPath = "./ed-fi/studentSchoolAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (studentSchoolAssociation != null && studentSchoolAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(studentSchoolAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = studentSchoolAssociation; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutStudentSchoolAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
