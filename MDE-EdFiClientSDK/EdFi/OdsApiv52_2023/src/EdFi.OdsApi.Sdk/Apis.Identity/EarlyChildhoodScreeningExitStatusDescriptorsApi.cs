/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using EdFi.OdsApi.Sdk.Client;
using EdFi.OdsApi.Sdk.Models.Identity;

namespace EdFi.OdsApi.Sdk.Apis.Identity
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEarlyChildhoodScreeningExitStatusDescriptorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void DeleteEarlyChildhoodScreeningExitStatusDescriptorById (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEarlyChildhoodScreeningExitStatusDescriptorByIdWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;DeletedResource&gt;</returns>
        List<DeletedResource> DeletesEarlyChildhoodScreeningExitStatusDescriptors (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeletedResource&gt;</returns>
        ApiResponse<List<DeletedResource>> DeletesEarlyChildhoodScreeningExitStatusDescriptorsWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;MnEarlyChildhoodScreeningExitStatusDescriptor&gt;</returns>
        List<MnEarlyChildhoodScreeningExitStatusDescriptor> GetEarlyChildhoodScreeningExitStatusDescriptors (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, int? earlyChildhoodScreeningExitStatusDescriptorId = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;MnEarlyChildhoodScreeningExitStatusDescriptor&gt;</returns>
        ApiResponse<List<MnEarlyChildhoodScreeningExitStatusDescriptor>> GetEarlyChildhoodScreeningExitStatusDescriptorsWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, int? earlyChildhoodScreeningExitStatusDescriptorId = null, string snapshotIdentifier = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>MnEarlyChildhoodScreeningExitStatusDescriptor</returns>
        MnEarlyChildhoodScreeningExitStatusDescriptor GetEarlyChildhoodScreeningExitStatusDescriptorsById (string id, string ifNoneMatch = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of MnEarlyChildhoodScreeningExitStatusDescriptor</returns>
        ApiResponse<MnEarlyChildhoodScreeningExitStatusDescriptor> GetEarlyChildhoodScreeningExitStatusDescriptorsByIdWithHttpInfo (string id, string ifNoneMatch = null, string snapshotIdentifier = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        void PostEarlyChildhoodScreeningExitStatusDescriptor (MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostEarlyChildhoodScreeningExitStatusDescriptorWithHttpInfo (MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor);
        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void PutEarlyChildhoodScreeningExitStatusDescriptor (string id, MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor, string ifMatch = null);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutEarlyChildhoodScreeningExitStatusDescriptorWithHttpInfo (string id, MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor, string ifMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEarlyChildhoodScreeningExitStatusDescriptorByIdAsync (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEarlyChildhoodScreeningExitStatusDescriptorByIdAsyncWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of List&lt;DeletedResource&gt;</returns>
        System.Threading.Tasks.Task<List<DeletedResource>> DeletesEarlyChildhoodScreeningExitStatusDescriptorsAsync (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeletedResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeletedResource>>> DeletesEarlyChildhoodScreeningExitStatusDescriptorsAsyncWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of List&lt;MnEarlyChildhoodScreeningExitStatusDescriptor&gt;</returns>
        System.Threading.Tasks.Task<List<MnEarlyChildhoodScreeningExitStatusDescriptor>> GetEarlyChildhoodScreeningExitStatusDescriptorsAsync (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, int? earlyChildhoodScreeningExitStatusDescriptorId = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MnEarlyChildhoodScreeningExitStatusDescriptor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MnEarlyChildhoodScreeningExitStatusDescriptor>>> GetEarlyChildhoodScreeningExitStatusDescriptorsAsyncWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, int? earlyChildhoodScreeningExitStatusDescriptorId = null, string snapshotIdentifier = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of MnEarlyChildhoodScreeningExitStatusDescriptor</returns>
        System.Threading.Tasks.Task<MnEarlyChildhoodScreeningExitStatusDescriptor> GetEarlyChildhoodScreeningExitStatusDescriptorsByIdAsync (string id, string ifNoneMatch = null, string snapshotIdentifier = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (MnEarlyChildhoodScreeningExitStatusDescriptor)</returns>
        System.Threading.Tasks.Task<ApiResponse<MnEarlyChildhoodScreeningExitStatusDescriptor>> GetEarlyChildhoodScreeningExitStatusDescriptorsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null, string snapshotIdentifier = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostEarlyChildhoodScreeningExitStatusDescriptorAsync (MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostEarlyChildhoodScreeningExitStatusDescriptorAsyncWithHttpInfo (MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor);
        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutEarlyChildhoodScreeningExitStatusDescriptorAsync (string id, MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor, string ifMatch = null);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutEarlyChildhoodScreeningExitStatusDescriptorAsyncWithHttpInfo (string id, MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor, string ifMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EarlyChildhoodScreeningExitStatusDescriptorsApi : IEarlyChildhoodScreeningExitStatusDescriptorsApi
    {
        private EdFi.OdsApi.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EarlyChildhoodScreeningExitStatusDescriptorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EarlyChildhoodScreeningExitStatusDescriptorsApi(String basePath)
        {
            this.Configuration = new EdFi.OdsApi.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EarlyChildhoodScreeningExitStatusDescriptorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EarlyChildhoodScreeningExitStatusDescriptorsApi(EdFi.OdsApi.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdFi.OdsApi.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.OdsApi.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void DeleteEarlyChildhoodScreeningExitStatusDescriptorById (string id, string ifMatch = null)
        {
             DeleteEarlyChildhoodScreeningExitStatusDescriptorByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEarlyChildhoodScreeningExitStatusDescriptorByIdWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->DeleteEarlyChildhoodScreeningExitStatusDescriptorById");

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEarlyChildhoodScreeningExitStatusDescriptorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEarlyChildhoodScreeningExitStatusDescriptorByIdAsync (string id, string ifMatch = null)
        {
             await DeleteEarlyChildhoodScreeningExitStatusDescriptorByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEarlyChildhoodScreeningExitStatusDescriptorByIdAsyncWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->DeleteEarlyChildhoodScreeningExitStatusDescriptorById");

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEarlyChildhoodScreeningExitStatusDescriptorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;DeletedResource&gt;</returns>
        public List<DeletedResource> DeletesEarlyChildhoodScreeningExitStatusDescriptors (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null)
        {
             ApiResponse<List<DeletedResource>> localVarResponse = DeletesEarlyChildhoodScreeningExitStatusDescriptorsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeletedResource&gt;</returns>
        public ApiResponse< List<DeletedResource> > DeletesEarlyChildhoodScreeningExitStatusDescriptorsWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null)
        {

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors/deletes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minChangeVersion", minChangeVersion)); // query parameter
            if (maxChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxChangeVersion", maxChangeVersion)); // query parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletesEarlyChildhoodScreeningExitStatusDescriptors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeletedResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DeletedResource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeletedResource>)));
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of List&lt;DeletedResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeletedResource>> DeletesEarlyChildhoodScreeningExitStatusDescriptorsAsync (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null)
        {
             ApiResponse<List<DeletedResource>> localVarResponse = await DeletesEarlyChildhoodScreeningExitStatusDescriptorsAsyncWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeletedResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeletedResource>>> DeletesEarlyChildhoodScreeningExitStatusDescriptorsAsyncWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, string snapshotIdentifier = null)
        {

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors/deletes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minChangeVersion", minChangeVersion)); // query parameter
            if (maxChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxChangeVersion", maxChangeVersion)); // query parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletesEarlyChildhoodScreeningExitStatusDescriptors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeletedResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DeletedResource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeletedResource>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;MnEarlyChildhoodScreeningExitStatusDescriptor&gt;</returns>
        public List<MnEarlyChildhoodScreeningExitStatusDescriptor> GetEarlyChildhoodScreeningExitStatusDescriptors (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, int? earlyChildhoodScreeningExitStatusDescriptorId = null, string snapshotIdentifier = null)
        {
             ApiResponse<List<MnEarlyChildhoodScreeningExitStatusDescriptor>> localVarResponse = GetEarlyChildhoodScreeningExitStatusDescriptorsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, earlyChildhoodScreeningExitStatusDescriptorId, snapshotIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;MnEarlyChildhoodScreeningExitStatusDescriptor&gt;</returns>
        public ApiResponse< List<MnEarlyChildhoodScreeningExitStatusDescriptor> > GetEarlyChildhoodScreeningExitStatusDescriptorsWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, int? earlyChildhoodScreeningExitStatusDescriptorId = null, string snapshotIdentifier = null)
        {

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minChangeVersion", minChangeVersion)); // query parameter
            if (maxChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxChangeVersion", maxChangeVersion)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (earlyChildhoodScreeningExitStatusDescriptorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "earlyChildhoodScreeningExitStatusDescriptorId", earlyChildhoodScreeningExitStatusDescriptorId)); // query parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarlyChildhoodScreeningExitStatusDescriptors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MnEarlyChildhoodScreeningExitStatusDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<MnEarlyChildhoodScreeningExitStatusDescriptor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MnEarlyChildhoodScreeningExitStatusDescriptor>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of List&lt;MnEarlyChildhoodScreeningExitStatusDescriptor&gt;</returns>
        public async System.Threading.Tasks.Task<List<MnEarlyChildhoodScreeningExitStatusDescriptor>> GetEarlyChildhoodScreeningExitStatusDescriptorsAsync (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, int? earlyChildhoodScreeningExitStatusDescriptorId = null, string snapshotIdentifier = null)
        {
             ApiResponse<List<MnEarlyChildhoodScreeningExitStatusDescriptor>> localVarResponse = await GetEarlyChildhoodScreeningExitStatusDescriptorsAsyncWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, earlyChildhoodScreeningExitStatusDescriptorId, snapshotIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MnEarlyChildhoodScreeningExitStatusDescriptor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MnEarlyChildhoodScreeningExitStatusDescriptor>>> GetEarlyChildhoodScreeningExitStatusDescriptorsAsyncWithHttpInfo (int? offset = null, int? limit = null, int? minChangeVersion = null, int? maxChangeVersion = null, bool? totalCount = null, int? earlyChildhoodScreeningExitStatusDescriptorId = null, string snapshotIdentifier = null)
        {

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minChangeVersion", minChangeVersion)); // query parameter
            if (maxChangeVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxChangeVersion", maxChangeVersion)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (earlyChildhoodScreeningExitStatusDescriptorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "earlyChildhoodScreeningExitStatusDescriptorId", earlyChildhoodScreeningExitStatusDescriptorId)); // query parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarlyChildhoodScreeningExitStatusDescriptors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MnEarlyChildhoodScreeningExitStatusDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<MnEarlyChildhoodScreeningExitStatusDescriptor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MnEarlyChildhoodScreeningExitStatusDescriptor>)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>MnEarlyChildhoodScreeningExitStatusDescriptor</returns>
        public MnEarlyChildhoodScreeningExitStatusDescriptor GetEarlyChildhoodScreeningExitStatusDescriptorsById (string id, string ifNoneMatch = null, string snapshotIdentifier = null)
        {
             ApiResponse<MnEarlyChildhoodScreeningExitStatusDescriptor> localVarResponse = GetEarlyChildhoodScreeningExitStatusDescriptorsByIdWithHttpInfo(id, ifNoneMatch, snapshotIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of MnEarlyChildhoodScreeningExitStatusDescriptor</returns>
        public ApiResponse< MnEarlyChildhoodScreeningExitStatusDescriptor > GetEarlyChildhoodScreeningExitStatusDescriptorsByIdWithHttpInfo (string id, string ifNoneMatch = null, string snapshotIdentifier = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->GetEarlyChildhoodScreeningExitStatusDescriptorsById");

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarlyChildhoodScreeningExitStatusDescriptorsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MnEarlyChildhoodScreeningExitStatusDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MnEarlyChildhoodScreeningExitStatusDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MnEarlyChildhoodScreeningExitStatusDescriptor)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of MnEarlyChildhoodScreeningExitStatusDescriptor</returns>
        public async System.Threading.Tasks.Task<MnEarlyChildhoodScreeningExitStatusDescriptor> GetEarlyChildhoodScreeningExitStatusDescriptorsByIdAsync (string id, string ifNoneMatch = null, string snapshotIdentifier = null)
        {
             ApiResponse<MnEarlyChildhoodScreeningExitStatusDescriptor> localVarResponse = await GetEarlyChildhoodScreeningExitStatusDescriptorsByIdAsyncWithHttpInfo(id, ifNoneMatch, snapshotIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Task of ApiResponse (MnEarlyChildhoodScreeningExitStatusDescriptor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MnEarlyChildhoodScreeningExitStatusDescriptor>> GetEarlyChildhoodScreeningExitStatusDescriptorsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null, string snapshotIdentifier = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->GetEarlyChildhoodScreeningExitStatusDescriptorsById");

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter
            if (snapshotIdentifier != null) localVarHeaderParams.Add("Snapshot-Identifier", this.Configuration.ApiClient.ParameterToString(snapshotIdentifier)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarlyChildhoodScreeningExitStatusDescriptorsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MnEarlyChildhoodScreeningExitStatusDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MnEarlyChildhoodScreeningExitStatusDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MnEarlyChildhoodScreeningExitStatusDescriptor)));
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        public void PostEarlyChildhoodScreeningExitStatusDescriptor (MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor)
        {
             PostEarlyChildhoodScreeningExitStatusDescriptorWithHttpInfo(earlyChildhoodScreeningExitStatusDescriptor);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostEarlyChildhoodScreeningExitStatusDescriptorWithHttpInfo (MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor)
        {
            // verify the required parameter 'earlyChildhoodScreeningExitStatusDescriptor' is set
            if (earlyChildhoodScreeningExitStatusDescriptor == null)
                throw new ApiException(400, "Missing required parameter 'earlyChildhoodScreeningExitStatusDescriptor' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->PostEarlyChildhoodScreeningExitStatusDescriptor");

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (earlyChildhoodScreeningExitStatusDescriptor != null && earlyChildhoodScreeningExitStatusDescriptor.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(earlyChildhoodScreeningExitStatusDescriptor); // http body (model) parameter
            }
            else
            {
                localVarPostBody = earlyChildhoodScreeningExitStatusDescriptor; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEarlyChildhoodScreeningExitStatusDescriptor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostEarlyChildhoodScreeningExitStatusDescriptorAsync (MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor)
        {
             await PostEarlyChildhoodScreeningExitStatusDescriptorAsyncWithHttpInfo(earlyChildhoodScreeningExitStatusDescriptor);

        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostEarlyChildhoodScreeningExitStatusDescriptorAsyncWithHttpInfo (MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor)
        {
            // verify the required parameter 'earlyChildhoodScreeningExitStatusDescriptor' is set
            if (earlyChildhoodScreeningExitStatusDescriptor == null)
                throw new ApiException(400, "Missing required parameter 'earlyChildhoodScreeningExitStatusDescriptor' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->PostEarlyChildhoodScreeningExitStatusDescriptor");

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (earlyChildhoodScreeningExitStatusDescriptor != null && earlyChildhoodScreeningExitStatusDescriptor.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(earlyChildhoodScreeningExitStatusDescriptor); // http body (model) parameter
            }
            else
            {
                localVarPostBody = earlyChildhoodScreeningExitStatusDescriptor; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEarlyChildhoodScreeningExitStatusDescriptor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void PutEarlyChildhoodScreeningExitStatusDescriptor (string id, MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor, string ifMatch = null)
        {
             PutEarlyChildhoodScreeningExitStatusDescriptorWithHttpInfo(id, earlyChildhoodScreeningExitStatusDescriptor, ifMatch);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutEarlyChildhoodScreeningExitStatusDescriptorWithHttpInfo (string id, MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->PutEarlyChildhoodScreeningExitStatusDescriptor");
            // verify the required parameter 'earlyChildhoodScreeningExitStatusDescriptor' is set
            if (earlyChildhoodScreeningExitStatusDescriptor == null)
                throw new ApiException(400, "Missing required parameter 'earlyChildhoodScreeningExitStatusDescriptor' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->PutEarlyChildhoodScreeningExitStatusDescriptor");

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (earlyChildhoodScreeningExitStatusDescriptor != null && earlyChildhoodScreeningExitStatusDescriptor.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(earlyChildhoodScreeningExitStatusDescriptor); // http body (model) parameter
            }
            else
            {
                localVarPostBody = earlyChildhoodScreeningExitStatusDescriptor; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutEarlyChildhoodScreeningExitStatusDescriptor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutEarlyChildhoodScreeningExitStatusDescriptorAsync (string id, MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor, string ifMatch = null)
        {
             await PutEarlyChildhoodScreeningExitStatusDescriptorAsyncWithHttpInfo(id, earlyChildhoodScreeningExitStatusDescriptor, ifMatch);

        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="earlyChildhoodScreeningExitStatusDescriptor">The JSON representation of the \&quot;earlyChildhoodScreeningExitStatusDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutEarlyChildhoodScreeningExitStatusDescriptorAsyncWithHttpInfo (string id, MnEarlyChildhoodScreeningExitStatusDescriptor earlyChildhoodScreeningExitStatusDescriptor, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->PutEarlyChildhoodScreeningExitStatusDescriptor");
            // verify the required parameter 'earlyChildhoodScreeningExitStatusDescriptor' is set
            if (earlyChildhoodScreeningExitStatusDescriptor == null)
                throw new ApiException(400, "Missing required parameter 'earlyChildhoodScreeningExitStatusDescriptor' when calling EarlyChildhoodScreeningExitStatusDescriptorsApi->PutEarlyChildhoodScreeningExitStatusDescriptor");

            var localVarPath = "./MN/earlyChildhoodScreeningExitStatusDescriptors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (earlyChildhoodScreeningExitStatusDescriptor != null && earlyChildhoodScreeningExitStatusDescriptor.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(earlyChildhoodScreeningExitStatusDescriptor); // http body (model) parameter
            }
            else
            {
                localVarPostBody = earlyChildhoodScreeningExitStatusDescriptor; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutEarlyChildhoodScreeningExitStatusDescriptor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
