/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStaff
    /// </summary>
    [DataContract]
    public partial class EdFiStaff :  IEquatable<EdFiStaff>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaff" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaff() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaff" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (required).</param>
        /// <param name="personReference">personReference.</param>
        /// <param name="addresses">An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code..</param>
        /// <param name="ancestryEthnicOrigins">An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born..</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen..</param>
        /// <param name="credentials">An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services..</param>
        /// <param name="electronicMails">An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received)..</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;.</param>
        /// <param name="identificationCodes">An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity..</param>
        /// <param name="identificationDocuments">An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship..</param>
        /// <param name="internationalAddresses">An unordered collection of staffInternationalAddresses. The set of elements that describes an international address..</param>
        /// <param name="languages">An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface..</param>
        /// <param name="maidenName">The person&#39;s maiden name..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:         1 - American Indian or Alaskan Native         2 - Asian or Pacific Islander         3 - Black, not of Hispanic origin         4 - Hispanic         5 - White, not of Hispanic origin..</param>
        /// <param name="otherNames">An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person..</param>
        /// <param name="races">An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="recognitions">An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity..</param>
        /// <param name="sexDescriptor">A person&#39;s gender..</param>
        /// <param name="telephones">An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="tribalAffiliations">An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated..</param>
        /// <param name="visas">An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type..</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions..</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStaff(string id = default(string), string staffUniqueId = default(string), EdFiPersonReference personReference = default(EdFiPersonReference), List<EdFiStaffAddress> addresses = default(List<EdFiStaffAddress>), List<EdFiStaffAncestryEthnicOrigin> ancestryEthnicOrigins = default(List<EdFiStaffAncestryEthnicOrigin>), DateTime? birthDate = default(DateTime?), string citizenshipStatusDescriptor = default(string), List<EdFiStaffCredential> credentials = default(List<EdFiStaffCredential>), List<EdFiStaffElectronicMail> electronicMails = default(List<EdFiStaffElectronicMail>), string firstName = default(string), string generationCodeSuffix = default(string), string highestCompletedLevelOfEducationDescriptor = default(string), bool? highlyQualifiedTeacher = default(bool?), bool? hispanicLatinoEthnicity = default(bool?), List<EdFiStaffIdentificationCode> identificationCodes = default(List<EdFiStaffIdentificationCode>), List<EdFiStaffIdentificationDocument> identificationDocuments = default(List<EdFiStaffIdentificationDocument>), List<EdFiStaffInternationalAddress> internationalAddresses = default(List<EdFiStaffInternationalAddress>), List<EdFiStaffLanguage> languages = default(List<EdFiStaffLanguage>), string lastSurname = default(string), string loginId = default(string), string maidenName = default(string), string middleName = default(string), string oldEthnicityDescriptor = default(string), List<EdFiStaffOtherName> otherNames = default(List<EdFiStaffOtherName>), List<EdFiStaffPersonalIdentificationDocument> personalIdentificationDocuments = default(List<EdFiStaffPersonalIdentificationDocument>), string personalTitlePrefix = default(string), List<EdFiStaffRace> races = default(List<EdFiStaffRace>), List<EdFiStaffRecognition> recognitions = default(List<EdFiStaffRecognition>), string sexDescriptor = default(string), List<EdFiStaffTelephone> telephones = default(List<EdFiStaffTelephone>), List<EdFiStaffTribalAffiliation> tribalAffiliations = default(List<EdFiStaffTribalAffiliation>), List<EdFiStaffVisa> visas = default(List<EdFiStaffVisa>), double? yearsOfPriorProfessionalExperience = default(double?), double? yearsOfPriorTeachingExperience = default(double?), string etag = default(string))
        {
            // to ensure "staffUniqueId" is required (not null)
            if (staffUniqueId == null)
            {
                throw new InvalidDataException("staffUniqueId is a required property for EdFiStaff and cannot be null");
            }
            else
            {
                this.StaffUniqueId = staffUniqueId;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for EdFiStaff and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastSurname" is required (not null)
            if (lastSurname == null)
            {
                throw new InvalidDataException("lastSurname is a required property for EdFiStaff and cannot be null");
            }
            else
            {
                this.LastSurname = lastSurname;
            }
            this.Id = id;
            this.PersonReference = personReference;
            this.Addresses = addresses;
            this.AncestryEthnicOrigins = ancestryEthnicOrigins;
            this.BirthDate = birthDate;
            this.CitizenshipStatusDescriptor = citizenshipStatusDescriptor;
            this.Credentials = credentials;
            this.ElectronicMails = electronicMails;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.HighestCompletedLevelOfEducationDescriptor = highestCompletedLevelOfEducationDescriptor;
            this.HighlyQualifiedTeacher = highlyQualifiedTeacher;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.IdentificationCodes = identificationCodes;
            this.IdentificationDocuments = identificationDocuments;
            this.InternationalAddresses = internationalAddresses;
            this.Languages = languages;
            this.LoginId = loginId;
            this.MaidenName = maidenName;
            this.MiddleName = middleName;
            this.OldEthnicityDescriptor = oldEthnicityDescriptor;
            this.OtherNames = otherNames;
            this.PersonalIdentificationDocuments = personalIdentificationDocuments;
            this.PersonalTitlePrefix = personalTitlePrefix;
            this.Races = races;
            this.Recognitions = recognitions;
            this.SexDescriptor = sexDescriptor;
            this.Telephones = telephones;
            this.TribalAffiliations = tribalAffiliations;
            this.Visas = visas;
            this.YearsOfPriorProfessionalExperience = yearsOfPriorProfessionalExperience;
            this.YearsOfPriorTeachingExperience = yearsOfPriorTeachingExperience;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a staff.</value>
        [DataMember(Name="staffUniqueId", EmitDefaultValue=false)]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name="personReference", EmitDefaultValue=false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
        /// </summary>
        /// <value>An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<EdFiStaffAddress> Addresses { get; set; }

        /// <summary>
        /// An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.
        /// </summary>
        /// <value>An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.</value>
        [DataMember(Name="ancestryEthnicOrigins", EmitDefaultValue=false)]
        public List<EdFiStaffAncestryEthnicOrigin> AncestryEthnicOrigins { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [DataMember(Name="citizenshipStatusDescriptor", EmitDefaultValue=false)]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.
        /// </summary>
        /// <value>An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.</value>
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public List<EdFiStaffCredential> Credentials { get; set; }

        /// <summary>
        /// An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name="electronicMails", EmitDefaultValue=false)]
        public List<EdFiStaffElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name="generationCodeSuffix", EmitDefaultValue=false)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        /// <value>The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</value>
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor", EmitDefaultValue=false)]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        /// <value>An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.</value>
        [DataMember(Name="highlyQualifiedTeacher", EmitDefaultValue=false)]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [DataMember(Name="hispanicLatinoEthnicity", EmitDefaultValue=false)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.</value>
        [DataMember(Name="identificationCodes", EmitDefaultValue=false)]
        public List<EdFiStaffIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.</value>
        [DataMember(Name="identificationDocuments", EmitDefaultValue=false)]
        public List<EdFiStaffIdentificationDocument> IdentificationDocuments { get; set; }

        /// <summary>
        /// An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.</value>
        [DataMember(Name="internationalAddresses", EmitDefaultValue=false)]
        public List<EdFiStaffInternationalAddress> InternationalAddresses { get; set; }

        /// <summary>
        /// An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.
        /// </summary>
        /// <value>An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.</value>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<EdFiStaffLanguage> Languages { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name="lastSurname", EmitDefaultValue=false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [DataMember(Name="loginId", EmitDefaultValue=false)]
        public string LoginId { get; set; }

        /// <summary>
        /// The person&#39;s maiden name.
        /// </summary>
        /// <value>The person&#39;s maiden name.</value>
        [DataMember(Name="maidenName", EmitDefaultValue=false)]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:         1 - American Indian or Alaskan Native         2 - Asian or Pacific Islander         3 - Black, not of Hispanic origin         4 - Hispanic         5 - White, not of Hispanic origin.
        /// </summary>
        /// <value>Previous definition of Ethnicity combining Hispanic/Latino and race:         1 - American Indian or Alaskan Native         2 - Asian or Pacific Islander         3 - Black, not of Hispanic origin         4 - Hispanic         5 - White, not of Hispanic origin.</value>
        [DataMember(Name="oldEthnicityDescriptor", EmitDefaultValue=false)]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [DataMember(Name="otherNames", EmitDefaultValue=false)]
        public List<EdFiStaffOtherName> OtherNames { get; set; }

        /// <summary>
        /// An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name="personalIdentificationDocuments", EmitDefaultValue=false)]
        public List<EdFiStaffPersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the person.</value>
        [DataMember(Name="personalTitlePrefix", EmitDefaultValue=false)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name="races", EmitDefaultValue=false)]
        public List<EdFiStaffRace> Races { get; set; }

        /// <summary>
        /// An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.
        /// </summary>
        /// <value>An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.</value>
        [DataMember(Name="recognitions", EmitDefaultValue=false)]
        public List<EdFiStaffRecognition> Recognitions { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name="sexDescriptor", EmitDefaultValue=false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name="telephones", EmitDefaultValue=false)]
        public List<EdFiStaffTelephone> Telephones { get; set; }

        /// <summary>
        /// An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        /// <value>An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.</value>
        [DataMember(Name="tribalAffiliations", EmitDefaultValue=false)]
        public List<EdFiStaffTribalAffiliation> TribalAffiliations { get; set; }

        /// <summary>
        /// An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [DataMember(Name="visas", EmitDefaultValue=false)]
        public List<EdFiStaffVisa> Visas { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a similar professional position in one or more education institutions.</value>
        [DataMember(Name="yearsOfPriorProfessionalExperience", EmitDefaultValue=false)]
        public double? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a teaching position in one or more education institutions.</value>
        [DataMember(Name="yearsOfPriorTeachingExperience", EmitDefaultValue=false)]
        public double? YearsOfPriorTeachingExperience { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStaff {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StaffUniqueId: ").Append(StaffUniqueId).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  AncestryEthnicOrigins: ").Append(AncestryEthnicOrigins).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HighestCompletedLevelOfEducationDescriptor: ").Append(HighestCompletedLevelOfEducationDescriptor).Append("\n");
            sb.Append("  HighlyQualifiedTeacher: ").Append(HighlyQualifiedTeacher).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  OldEthnicityDescriptor: ").Append(OldEthnicityDescriptor).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  Recognitions: ").Append(Recognitions).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  TribalAffiliations: ").Append(TribalAffiliations).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  YearsOfPriorProfessionalExperience: ").Append(YearsOfPriorProfessionalExperience).Append("\n");
            sb.Append("  YearsOfPriorTeachingExperience: ").Append(YearsOfPriorTeachingExperience).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStaff);
        }

        /// <summary>
        /// Returns true if EdFiStaff instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStaff to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStaff input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StaffUniqueId == input.StaffUniqueId ||
                    (this.StaffUniqueId != null &&
                    this.StaffUniqueId.Equals(input.StaffUniqueId))
                ) && 
                (
                    this.PersonReference == input.PersonReference ||
                    (this.PersonReference != null &&
                    this.PersonReference.Equals(input.PersonReference))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.AncestryEthnicOrigins == input.AncestryEthnicOrigins ||
                    this.AncestryEthnicOrigins != null &&
                    this.AncestryEthnicOrigins.SequenceEqual(input.AncestryEthnicOrigins)
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.CitizenshipStatusDescriptor == input.CitizenshipStatusDescriptor ||
                    (this.CitizenshipStatusDescriptor != null &&
                    this.CitizenshipStatusDescriptor.Equals(input.CitizenshipStatusDescriptor))
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    this.Credentials != null &&
                    this.Credentials.SequenceEqual(input.Credentials)
                ) && 
                (
                    this.ElectronicMails == input.ElectronicMails ||
                    this.ElectronicMails != null &&
                    this.ElectronicMails.SequenceEqual(input.ElectronicMails)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (this.GenerationCodeSuffix != null &&
                    this.GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) && 
                (
                    this.HighestCompletedLevelOfEducationDescriptor == input.HighestCompletedLevelOfEducationDescriptor ||
                    (this.HighestCompletedLevelOfEducationDescriptor != null &&
                    this.HighestCompletedLevelOfEducationDescriptor.Equals(input.HighestCompletedLevelOfEducationDescriptor))
                ) && 
                (
                    this.HighlyQualifiedTeacher == input.HighlyQualifiedTeacher ||
                    (this.HighlyQualifiedTeacher != null &&
                    this.HighlyQualifiedTeacher.Equals(input.HighlyQualifiedTeacher))
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (this.HispanicLatinoEthnicity != null &&
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) && 
                (
                    this.IdentificationCodes == input.IdentificationCodes ||
                    this.IdentificationCodes != null &&
                    this.IdentificationCodes.SequenceEqual(input.IdentificationCodes)
                ) && 
                (
                    this.IdentificationDocuments == input.IdentificationDocuments ||
                    this.IdentificationDocuments != null &&
                    this.IdentificationDocuments.SequenceEqual(input.IdentificationDocuments)
                ) && 
                (
                    this.InternationalAddresses == input.InternationalAddresses ||
                    this.InternationalAddresses != null &&
                    this.InternationalAddresses.SequenceEqual(input.InternationalAddresses)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.MaidenName == input.MaidenName ||
                    (this.MaidenName != null &&
                    this.MaidenName.Equals(input.MaidenName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.OldEthnicityDescriptor == input.OldEthnicityDescriptor ||
                    (this.OldEthnicityDescriptor != null &&
                    this.OldEthnicityDescriptor.Equals(input.OldEthnicityDescriptor))
                ) && 
                (
                    this.OtherNames == input.OtherNames ||
                    this.OtherNames != null &&
                    this.OtherNames.SequenceEqual(input.OtherNames)
                ) && 
                (
                    this.PersonalIdentificationDocuments == input.PersonalIdentificationDocuments ||
                    this.PersonalIdentificationDocuments != null &&
                    this.PersonalIdentificationDocuments.SequenceEqual(input.PersonalIdentificationDocuments)
                ) && 
                (
                    this.PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (this.PersonalTitlePrefix != null &&
                    this.PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.Recognitions == input.Recognitions ||
                    this.Recognitions != null &&
                    this.Recognitions.SequenceEqual(input.Recognitions)
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.TribalAffiliations == input.TribalAffiliations ||
                    this.TribalAffiliations != null &&
                    this.TribalAffiliations.SequenceEqual(input.TribalAffiliations)
                ) && 
                (
                    this.Visas == input.Visas ||
                    this.Visas != null &&
                    this.Visas.SequenceEqual(input.Visas)
                ) && 
                (
                    this.YearsOfPriorProfessionalExperience == input.YearsOfPriorProfessionalExperience ||
                    (this.YearsOfPriorProfessionalExperience != null &&
                    this.YearsOfPriorProfessionalExperience.Equals(input.YearsOfPriorProfessionalExperience))
                ) && 
                (
                    this.YearsOfPriorTeachingExperience == input.YearsOfPriorTeachingExperience ||
                    (this.YearsOfPriorTeachingExperience != null &&
                    this.YearsOfPriorTeachingExperience.Equals(input.YearsOfPriorTeachingExperience))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StaffUniqueId != null)
                    hashCode = hashCode * 59 + this.StaffUniqueId.GetHashCode();
                if (this.PersonReference != null)
                    hashCode = hashCode * 59 + this.PersonReference.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.AncestryEthnicOrigins != null)
                    hashCode = hashCode * 59 + this.AncestryEthnicOrigins.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.CitizenshipStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.CitizenshipStatusDescriptor.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                if (this.ElectronicMails != null)
                    hashCode = hashCode * 59 + this.ElectronicMails.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GenerationCodeSuffix != null)
                    hashCode = hashCode * 59 + this.GenerationCodeSuffix.GetHashCode();
                if (this.HighestCompletedLevelOfEducationDescriptor != null)
                    hashCode = hashCode * 59 + this.HighestCompletedLevelOfEducationDescriptor.GetHashCode();
                if (this.HighlyQualifiedTeacher != null)
                    hashCode = hashCode * 59 + this.HighlyQualifiedTeacher.GetHashCode();
                if (this.HispanicLatinoEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.IdentificationCodes != null)
                    hashCode = hashCode * 59 + this.IdentificationCodes.GetHashCode();
                if (this.IdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.IdentificationDocuments.GetHashCode();
                if (this.InternationalAddresses != null)
                    hashCode = hashCode * 59 + this.InternationalAddresses.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.LoginId != null)
                    hashCode = hashCode * 59 + this.LoginId.GetHashCode();
                if (this.MaidenName != null)
                    hashCode = hashCode * 59 + this.MaidenName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.OldEthnicityDescriptor != null)
                    hashCode = hashCode * 59 + this.OldEthnicityDescriptor.GetHashCode();
                if (this.OtherNames != null)
                    hashCode = hashCode * 59 + this.OtherNames.GetHashCode();
                if (this.PersonalIdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.PersonalIdentificationDocuments.GetHashCode();
                if (this.PersonalTitlePrefix != null)
                    hashCode = hashCode * 59 + this.PersonalTitlePrefix.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.Recognitions != null)
                    hashCode = hashCode * 59 + this.Recognitions.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                if (this.TribalAffiliations != null)
                    hashCode = hashCode * 59 + this.TribalAffiliations.GetHashCode();
                if (this.Visas != null)
                    hashCode = hashCode * 59 + this.Visas.GetHashCode();
                if (this.YearsOfPriorProfessionalExperience != null)
                    hashCode = hashCode * 59 + this.YearsOfPriorProfessionalExperience.GetHashCode();
                if (this.YearsOfPriorTeachingExperience != null)
                    hashCode = hashCode * 59 + this.YearsOfPriorTeachingExperience.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
