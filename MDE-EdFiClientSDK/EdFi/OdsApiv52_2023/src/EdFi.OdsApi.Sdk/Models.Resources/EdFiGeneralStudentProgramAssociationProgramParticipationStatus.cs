/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiGeneralStudentProgramAssociationProgramParticipationStatus
    /// </summary>
    [DataContract]
    public partial class EdFiGeneralStudentProgramAssociationProgramParticipationStatus :  IEquatable<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGeneralStudentProgramAssociationProgramParticipationStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGeneralStudentProgramAssociationProgramParticipationStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGeneralStudentProgramAssociationProgramParticipationStatus" /> class.
        /// </summary>
        /// <param name="participationStatusDescriptor">The student&#39;s program participation status. (required).</param>
        /// <param name="statusBeginDate">The date the student&#39;s program participation status began. (required).</param>
        /// <param name="designatedBy">The person, organization, or department that designated the participation status..</param>
        /// <param name="statusEndDate">The date the student&#39;s program participation status ended..</param>
        public EdFiGeneralStudentProgramAssociationProgramParticipationStatus(string participationStatusDescriptor = default(string), DateTime? statusBeginDate = default(DateTime?), string designatedBy = default(string), DateTime? statusEndDate = default(DateTime?))
        {
            // to ensure "participationStatusDescriptor" is required (not null)
            if (participationStatusDescriptor == null)
            {
                throw new InvalidDataException("participationStatusDescriptor is a required property for EdFiGeneralStudentProgramAssociationProgramParticipationStatus and cannot be null");
            }
            else
            {
                this.ParticipationStatusDescriptor = participationStatusDescriptor;
            }
            // to ensure "statusBeginDate" is required (not null)
            if (statusBeginDate == null)
            {
                throw new InvalidDataException("statusBeginDate is a required property for EdFiGeneralStudentProgramAssociationProgramParticipationStatus and cannot be null");
            }
            else
            {
                this.StatusBeginDate = statusBeginDate;
            }
            this.DesignatedBy = designatedBy;
            this.StatusEndDate = statusEndDate;
        }
        
        /// <summary>
        /// The student&#39;s program participation status.
        /// </summary>
        /// <value>The student&#39;s program participation status.</value>
        [DataMember(Name="participationStatusDescriptor", EmitDefaultValue=false)]
        public string ParticipationStatusDescriptor { get; set; }

        /// <summary>
        /// The date the student&#39;s program participation status began.
        /// </summary>
        /// <value>The date the student&#39;s program participation status began.</value>
        [DataMember(Name="statusBeginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StatusBeginDate { get; set; }

        /// <summary>
        /// The person, organization, or department that designated the participation status.
        /// </summary>
        /// <value>The person, organization, or department that designated the participation status.</value>
        [DataMember(Name="designatedBy", EmitDefaultValue=false)]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The date the student&#39;s program participation status ended.
        /// </summary>
        /// <value>The date the student&#39;s program participation status ended.</value>
        [DataMember(Name="statusEndDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StatusEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiGeneralStudentProgramAssociationProgramParticipationStatus {\n");
            sb.Append("  ParticipationStatusDescriptor: ").Append(ParticipationStatusDescriptor).Append("\n");
            sb.Append("  StatusBeginDate: ").Append(StatusBeginDate).Append("\n");
            sb.Append("  DesignatedBy: ").Append(DesignatedBy).Append("\n");
            sb.Append("  StatusEndDate: ").Append(StatusEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiGeneralStudentProgramAssociationProgramParticipationStatus);
        }

        /// <summary>
        /// Returns true if EdFiGeneralStudentProgramAssociationProgramParticipationStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiGeneralStudentProgramAssociationProgramParticipationStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiGeneralStudentProgramAssociationProgramParticipationStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParticipationStatusDescriptor == input.ParticipationStatusDescriptor ||
                    (this.ParticipationStatusDescriptor != null &&
                    this.ParticipationStatusDescriptor.Equals(input.ParticipationStatusDescriptor))
                ) && 
                (
                    this.StatusBeginDate == input.StatusBeginDate ||
                    (this.StatusBeginDate != null &&
                    this.StatusBeginDate.Equals(input.StatusBeginDate))
                ) && 
                (
                    this.DesignatedBy == input.DesignatedBy ||
                    (this.DesignatedBy != null &&
                    this.DesignatedBy.Equals(input.DesignatedBy))
                ) && 
                (
                    this.StatusEndDate == input.StatusEndDate ||
                    (this.StatusEndDate != null &&
                    this.StatusEndDate.Equals(input.StatusEndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParticipationStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.ParticipationStatusDescriptor.GetHashCode();
                if (this.StatusBeginDate != null)
                    hashCode = hashCode * 59 + this.StatusBeginDate.GetHashCode();
                if (this.DesignatedBy != null)
                    hashCode = hashCode * 59 + this.DesignatedBy.GetHashCode();
                if (this.StatusEndDate != null)
                    hashCode = hashCode * 59 + this.StatusEndDate.GetHashCode();
                return hashCode;
            }
        }
    }

}
