/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiGraduationPlanCreditsByCourse
    /// </summary>
    [DataContract]
    public partial class EdFiGraduationPlanCreditsByCourse :  IEquatable<EdFiGraduationPlanCreditsByCourse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlanCreditsByCourse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGraduationPlanCreditsByCourse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlanCreditsByCourse" /> class.
        /// </summary>
        /// <param name="courseSetName">Identifying name given to a collection of courses. (required).</param>
        /// <param name="creditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="whenTakenGradeLevelDescriptor">The grade level when the student is planned to take the course..</param>
        /// <param name="creditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="credits">The value of credits or units of value awarded for the completion of a course. (required).</param>
        /// <param name="courses">An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students. (required).</param>
        public EdFiGraduationPlanCreditsByCourse(string courseSetName = default(string), string creditTypeDescriptor = default(string), string whenTakenGradeLevelDescriptor = default(string), double? creditConversion = default(double?), double? credits = default(double?), List<EdFiGraduationPlanCreditsByCourseCourse> courses = default(List<EdFiGraduationPlanCreditsByCourseCourse>))
        {
            // to ensure "courseSetName" is required (not null)
            if (courseSetName == null)
            {
                throw new InvalidDataException("courseSetName is a required property for EdFiGraduationPlanCreditsByCourse and cannot be null");
            }
            else
            {
                this.CourseSetName = courseSetName;
            }
            // to ensure "credits" is required (not null)
            if (credits == null)
            {
                throw new InvalidDataException("credits is a required property for EdFiGraduationPlanCreditsByCourse and cannot be null");
            }
            else
            {
                this.Credits = credits;
            }
            // to ensure "courses" is required (not null)
            if (courses == null)
            {
                throw new InvalidDataException("courses is a required property for EdFiGraduationPlanCreditsByCourse and cannot be null");
            }
            else
            {
                this.Courses = courses;
            }
            this.CreditTypeDescriptor = creditTypeDescriptor;
            this.WhenTakenGradeLevelDescriptor = whenTakenGradeLevelDescriptor;
            this.CreditConversion = creditConversion;
        }
        
        /// <summary>
        /// Identifying name given to a collection of courses.
        /// </summary>
        /// <value>Identifying name given to a collection of courses.</value>
        [DataMember(Name="courseSetName", EmitDefaultValue=false)]
        public string CourseSetName { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="creditTypeDescriptor", EmitDefaultValue=false)]
        public string CreditTypeDescriptor { get; set; }

        /// <summary>
        /// The grade level when the student is planned to take the course.
        /// </summary>
        /// <value>The grade level when the student is planned to take the course.</value>
        [DataMember(Name="whenTakenGradeLevelDescriptor", EmitDefaultValue=false)]
        public string WhenTakenGradeLevelDescriptor { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name="creditConversion", EmitDefaultValue=false)]
        public double? CreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="credits", EmitDefaultValue=false)]
        public double? Credits { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.</value>
        [DataMember(Name="courses", EmitDefaultValue=false)]
        public List<EdFiGraduationPlanCreditsByCourseCourse> Courses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiGraduationPlanCreditsByCourse {\n");
            sb.Append("  CourseSetName: ").Append(CourseSetName).Append("\n");
            sb.Append("  CreditTypeDescriptor: ").Append(CreditTypeDescriptor).Append("\n");
            sb.Append("  WhenTakenGradeLevelDescriptor: ").Append(WhenTakenGradeLevelDescriptor).Append("\n");
            sb.Append("  CreditConversion: ").Append(CreditConversion).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("  Courses: ").Append(Courses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiGraduationPlanCreditsByCourse);
        }

        /// <summary>
        /// Returns true if EdFiGraduationPlanCreditsByCourse instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiGraduationPlanCreditsByCourse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiGraduationPlanCreditsByCourse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CourseSetName == input.CourseSetName ||
                    (this.CourseSetName != null &&
                    this.CourseSetName.Equals(input.CourseSetName))
                ) && 
                (
                    this.CreditTypeDescriptor == input.CreditTypeDescriptor ||
                    (this.CreditTypeDescriptor != null &&
                    this.CreditTypeDescriptor.Equals(input.CreditTypeDescriptor))
                ) && 
                (
                    this.WhenTakenGradeLevelDescriptor == input.WhenTakenGradeLevelDescriptor ||
                    (this.WhenTakenGradeLevelDescriptor != null &&
                    this.WhenTakenGradeLevelDescriptor.Equals(input.WhenTakenGradeLevelDescriptor))
                ) && 
                (
                    this.CreditConversion == input.CreditConversion ||
                    (this.CreditConversion != null &&
                    this.CreditConversion.Equals(input.CreditConversion))
                ) && 
                (
                    this.Credits == input.Credits ||
                    (this.Credits != null &&
                    this.Credits.Equals(input.Credits))
                ) && 
                (
                    this.Courses == input.Courses ||
                    this.Courses != null &&
                    this.Courses.SequenceEqual(input.Courses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CourseSetName != null)
                    hashCode = hashCode * 59 + this.CourseSetName.GetHashCode();
                if (this.CreditTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.CreditTypeDescriptor.GetHashCode();
                if (this.WhenTakenGradeLevelDescriptor != null)
                    hashCode = hashCode * 59 + this.WhenTakenGradeLevelDescriptor.GetHashCode();
                if (this.CreditConversion != null)
                    hashCode = hashCode * 59 + this.CreditConversion.GetHashCode();
                if (this.Credits != null)
                    hashCode = hashCode * 59 + this.Credits.GetHashCode();
                if (this.Courses != null)
                    hashCode = hashCode * 59 + this.Courses.GetHashCode();
                return hashCode;
            }
        }
    }

}
