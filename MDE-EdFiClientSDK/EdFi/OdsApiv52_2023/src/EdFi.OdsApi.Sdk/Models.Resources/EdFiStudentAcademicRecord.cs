/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStudentAcademicRecord
    /// </summary>
    [DataContract]
    public partial class EdFiStudentAcademicRecord :  IEquatable<EdFiStudentAcademicRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAcademicRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAcademicRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAcademicRecord" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="termDescriptor">The term for the session during the school year. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="academicHonors">An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student..</param>
        /// <param name="classRanking">classRanking.</param>
        /// <param name="cumulativeAttemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="cumulativeAttemptedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="cumulativeAttemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="cumulativeEarnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="cumulativeEarnedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="cumulativeEarnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="cumulativeGradePointAverage">A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled..</param>
        /// <param name="cumulativeGradePointsEarned">The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled..</param>
        /// <param name="diplomas">An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student..</param>
        /// <param name="gradePointAverages">An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted..</param>
        /// <param name="gradeValueQualifier">The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s Grade Point Average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.).</param>
        /// <param name="projectedGraduationDate">The month and year the student is projected to graduate..</param>
        /// <param name="recognitions">An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity..</param>
        /// <param name="reportCards">An unordered collection of studentAcademicRecordReportCards. Report cards for the student..</param>
        /// <param name="sessionAttemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="sessionAttemptedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="sessionAttemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="sessionEarnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="sessionEarnedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="sessionEarnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="sessionGradePointAverage">The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted..</param>
        /// <param name="sessionGradePointsEarned">The number of grade points an individual earned for this session..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStudentAcademicRecord(string id = default(string), string termDescriptor = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), EdFiStudentReference studentReference = default(EdFiStudentReference), List<EdFiStudentAcademicRecordAcademicHonor> academicHonors = default(List<EdFiStudentAcademicRecordAcademicHonor>), EdFiStudentAcademicRecordClassRanking classRanking = default(EdFiStudentAcademicRecordClassRanking), double? cumulativeAttemptedCreditConversion = default(double?), double? cumulativeAttemptedCredits = default(double?), string cumulativeAttemptedCreditTypeDescriptor = default(string), double? cumulativeEarnedCreditConversion = default(double?), double? cumulativeEarnedCredits = default(double?), string cumulativeEarnedCreditTypeDescriptor = default(string), double? cumulativeGradePointAverage = default(double?), double? cumulativeGradePointsEarned = default(double?), List<EdFiStudentAcademicRecordDiploma> diplomas = default(List<EdFiStudentAcademicRecordDiploma>), List<EdFiStudentAcademicRecordGradePointAverage> gradePointAverages = default(List<EdFiStudentAcademicRecordGradePointAverage>), string gradeValueQualifier = default(string), DateTime? projectedGraduationDate = default(DateTime?), List<EdFiStudentAcademicRecordRecognition> recognitions = default(List<EdFiStudentAcademicRecordRecognition>), List<EdFiStudentAcademicRecordReportCard> reportCards = default(List<EdFiStudentAcademicRecordReportCard>), double? sessionAttemptedCreditConversion = default(double?), double? sessionAttemptedCredits = default(double?), string sessionAttemptedCreditTypeDescriptor = default(string), double? sessionEarnedCreditConversion = default(double?), double? sessionEarnedCredits = default(double?), string sessionEarnedCreditTypeDescriptor = default(string), double? sessionGradePointAverage = default(double?), double? sessionGradePointsEarned = default(double?), string etag = default(string))
        {
            // to ensure "termDescriptor" is required (not null)
            if (termDescriptor == null)
            {
                throw new InvalidDataException("termDescriptor is a required property for EdFiStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.TermDescriptor = termDescriptor;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for EdFiStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new InvalidDataException("schoolYearTypeReference is a required property for EdFiStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.SchoolYearTypeReference = schoolYearTypeReference;
            }
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new InvalidDataException("studentReference is a required property for EdFiStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.StudentReference = studentReference;
            }
            this.Id = id;
            this.AcademicHonors = academicHonors;
            this.ClassRanking = classRanking;
            this.CumulativeAttemptedCreditConversion = cumulativeAttemptedCreditConversion;
            this.CumulativeAttemptedCredits = cumulativeAttemptedCredits;
            this.CumulativeAttemptedCreditTypeDescriptor = cumulativeAttemptedCreditTypeDescriptor;
            this.CumulativeEarnedCreditConversion = cumulativeEarnedCreditConversion;
            this.CumulativeEarnedCredits = cumulativeEarnedCredits;
            this.CumulativeEarnedCreditTypeDescriptor = cumulativeEarnedCreditTypeDescriptor;
            this.CumulativeGradePointAverage = cumulativeGradePointAverage;
            this.CumulativeGradePointsEarned = cumulativeGradePointsEarned;
            this.Diplomas = diplomas;
            this.GradePointAverages = gradePointAverages;
            this.GradeValueQualifier = gradeValueQualifier;
            this.ProjectedGraduationDate = projectedGraduationDate;
            this.Recognitions = recognitions;
            this.ReportCards = reportCards;
            this.SessionAttemptedCreditConversion = sessionAttemptedCreditConversion;
            this.SessionAttemptedCredits = sessionAttemptedCredits;
            this.SessionAttemptedCreditTypeDescriptor = sessionAttemptedCreditTypeDescriptor;
            this.SessionEarnedCreditConversion = sessionEarnedCreditConversion;
            this.SessionEarnedCredits = sessionEarnedCredits;
            this.SessionEarnedCreditTypeDescriptor = sessionEarnedCreditTypeDescriptor;
            this.SessionGradePointAverage = sessionGradePointAverage;
            this.SessionGradePointsEarned = sessionGradePointsEarned;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        /// <value>The term for the session during the school year.</value>
        [DataMember(Name="termDescriptor", EmitDefaultValue=false)]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name="studentReference", EmitDefaultValue=false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.</value>
        [DataMember(Name="academicHonors", EmitDefaultValue=false)]
        public List<EdFiStudentAcademicRecordAcademicHonor> AcademicHonors { get; set; }

        /// <summary>
        /// Gets or Sets ClassRanking
        /// </summary>
        [DataMember(Name="classRanking", EmitDefaultValue=false)]
        public EdFiStudentAcademicRecordClassRanking ClassRanking { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name="cumulativeAttemptedCreditConversion", EmitDefaultValue=false)]
        public double? CumulativeAttemptedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="cumulativeAttemptedCredits", EmitDefaultValue=false)]
        public double? CumulativeAttemptedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="cumulativeAttemptedCreditTypeDescriptor", EmitDefaultValue=false)]
        public string CumulativeAttemptedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name="cumulativeEarnedCreditConversion", EmitDefaultValue=false)]
        public double? CumulativeEarnedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="cumulativeEarnedCredits", EmitDefaultValue=false)]
        public double? CumulativeEarnedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="cumulativeEarnedCreditTypeDescriptor", EmitDefaultValue=false)]
        public string CumulativeEarnedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.
        /// </summary>
        /// <value>A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.</value>
        [DataMember(Name="cumulativeGradePointAverage", EmitDefaultValue=false)]
        public double? CumulativeGradePointAverage { get; set; }

        /// <summary>
        /// The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.
        /// </summary>
        /// <value>The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.</value>
        [DataMember(Name="cumulativeGradePointsEarned", EmitDefaultValue=false)]
        public double? CumulativeGradePointsEarned { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.</value>
        [DataMember(Name="diplomas", EmitDefaultValue=false)]
        public List<EdFiStudentAcademicRecordDiploma> Diplomas { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.</value>
        [DataMember(Name="gradePointAverages", EmitDefaultValue=false)]
        public List<EdFiStudentAcademicRecordGradePointAverage> GradePointAverages { get; set; }

        /// <summary>
        /// The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s Grade Point Average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.)
        /// </summary>
        /// <value>The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s Grade Point Average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.)</value>
        [DataMember(Name="gradeValueQualifier", EmitDefaultValue=false)]
        public string GradeValueQualifier { get; set; }

        /// <summary>
        /// The month and year the student is projected to graduate.
        /// </summary>
        /// <value>The month and year the student is projected to graduate.</value>
        [DataMember(Name="projectedGraduationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ProjectedGraduationDate { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.</value>
        [DataMember(Name="recognitions", EmitDefaultValue=false)]
        public List<EdFiStudentAcademicRecordRecognition> Recognitions { get; set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordReportCards. Report cards for the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordReportCards. Report cards for the student.</value>
        [DataMember(Name="reportCards", EmitDefaultValue=false)]
        public List<EdFiStudentAcademicRecordReportCard> ReportCards { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name="sessionAttemptedCreditConversion", EmitDefaultValue=false)]
        public double? SessionAttemptedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="sessionAttemptedCredits", EmitDefaultValue=false)]
        public double? SessionAttemptedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="sessionAttemptedCreditTypeDescriptor", EmitDefaultValue=false)]
        public string SessionAttemptedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name="sessionEarnedCreditConversion", EmitDefaultValue=false)]
        public double? SessionEarnedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="sessionEarnedCredits", EmitDefaultValue=false)]
        public double? SessionEarnedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="sessionEarnedCreditTypeDescriptor", EmitDefaultValue=false)]
        public string SessionEarnedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.
        /// </summary>
        /// <value>The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.</value>
        [DataMember(Name="sessionGradePointAverage", EmitDefaultValue=false)]
        public double? SessionGradePointAverage { get; set; }

        /// <summary>
        /// The number of grade points an individual earned for this session.
        /// </summary>
        /// <value>The number of grade points an individual earned for this session.</value>
        [DataMember(Name="sessionGradePointsEarned", EmitDefaultValue=false)]
        public double? SessionGradePointsEarned { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentAcademicRecord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TermDescriptor: ").Append(TermDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  AcademicHonors: ").Append(AcademicHonors).Append("\n");
            sb.Append("  ClassRanking: ").Append(ClassRanking).Append("\n");
            sb.Append("  CumulativeAttemptedCreditConversion: ").Append(CumulativeAttemptedCreditConversion).Append("\n");
            sb.Append("  CumulativeAttemptedCredits: ").Append(CumulativeAttemptedCredits).Append("\n");
            sb.Append("  CumulativeAttemptedCreditTypeDescriptor: ").Append(CumulativeAttemptedCreditTypeDescriptor).Append("\n");
            sb.Append("  CumulativeEarnedCreditConversion: ").Append(CumulativeEarnedCreditConversion).Append("\n");
            sb.Append("  CumulativeEarnedCredits: ").Append(CumulativeEarnedCredits).Append("\n");
            sb.Append("  CumulativeEarnedCreditTypeDescriptor: ").Append(CumulativeEarnedCreditTypeDescriptor).Append("\n");
            sb.Append("  CumulativeGradePointAverage: ").Append(CumulativeGradePointAverage).Append("\n");
            sb.Append("  CumulativeGradePointsEarned: ").Append(CumulativeGradePointsEarned).Append("\n");
            sb.Append("  Diplomas: ").Append(Diplomas).Append("\n");
            sb.Append("  GradePointAverages: ").Append(GradePointAverages).Append("\n");
            sb.Append("  GradeValueQualifier: ").Append(GradeValueQualifier).Append("\n");
            sb.Append("  ProjectedGraduationDate: ").Append(ProjectedGraduationDate).Append("\n");
            sb.Append("  Recognitions: ").Append(Recognitions).Append("\n");
            sb.Append("  ReportCards: ").Append(ReportCards).Append("\n");
            sb.Append("  SessionAttemptedCreditConversion: ").Append(SessionAttemptedCreditConversion).Append("\n");
            sb.Append("  SessionAttemptedCredits: ").Append(SessionAttemptedCredits).Append("\n");
            sb.Append("  SessionAttemptedCreditTypeDescriptor: ").Append(SessionAttemptedCreditTypeDescriptor).Append("\n");
            sb.Append("  SessionEarnedCreditConversion: ").Append(SessionEarnedCreditConversion).Append("\n");
            sb.Append("  SessionEarnedCredits: ").Append(SessionEarnedCredits).Append("\n");
            sb.Append("  SessionEarnedCreditTypeDescriptor: ").Append(SessionEarnedCreditTypeDescriptor).Append("\n");
            sb.Append("  SessionGradePointAverage: ").Append(SessionGradePointAverage).Append("\n");
            sb.Append("  SessionGradePointsEarned: ").Append(SessionGradePointsEarned).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentAcademicRecord);
        }

        /// <summary>
        /// Returns true if EdFiStudentAcademicRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentAcademicRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentAcademicRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TermDescriptor == input.TermDescriptor ||
                    (this.TermDescriptor != null &&
                    this.TermDescriptor.Equals(input.TermDescriptor))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.AcademicHonors == input.AcademicHonors ||
                    this.AcademicHonors != null &&
                    this.AcademicHonors.SequenceEqual(input.AcademicHonors)
                ) && 
                (
                    this.ClassRanking == input.ClassRanking ||
                    (this.ClassRanking != null &&
                    this.ClassRanking.Equals(input.ClassRanking))
                ) && 
                (
                    this.CumulativeAttemptedCreditConversion == input.CumulativeAttemptedCreditConversion ||
                    (this.CumulativeAttemptedCreditConversion != null &&
                    this.CumulativeAttemptedCreditConversion.Equals(input.CumulativeAttemptedCreditConversion))
                ) && 
                (
                    this.CumulativeAttemptedCredits == input.CumulativeAttemptedCredits ||
                    (this.CumulativeAttemptedCredits != null &&
                    this.CumulativeAttemptedCredits.Equals(input.CumulativeAttemptedCredits))
                ) && 
                (
                    this.CumulativeAttemptedCreditTypeDescriptor == input.CumulativeAttemptedCreditTypeDescriptor ||
                    (this.CumulativeAttemptedCreditTypeDescriptor != null &&
                    this.CumulativeAttemptedCreditTypeDescriptor.Equals(input.CumulativeAttemptedCreditTypeDescriptor))
                ) && 
                (
                    this.CumulativeEarnedCreditConversion == input.CumulativeEarnedCreditConversion ||
                    (this.CumulativeEarnedCreditConversion != null &&
                    this.CumulativeEarnedCreditConversion.Equals(input.CumulativeEarnedCreditConversion))
                ) && 
                (
                    this.CumulativeEarnedCredits == input.CumulativeEarnedCredits ||
                    (this.CumulativeEarnedCredits != null &&
                    this.CumulativeEarnedCredits.Equals(input.CumulativeEarnedCredits))
                ) && 
                (
                    this.CumulativeEarnedCreditTypeDescriptor == input.CumulativeEarnedCreditTypeDescriptor ||
                    (this.CumulativeEarnedCreditTypeDescriptor != null &&
                    this.CumulativeEarnedCreditTypeDescriptor.Equals(input.CumulativeEarnedCreditTypeDescriptor))
                ) && 
                (
                    this.CumulativeGradePointAverage == input.CumulativeGradePointAverage ||
                    (this.CumulativeGradePointAverage != null &&
                    this.CumulativeGradePointAverage.Equals(input.CumulativeGradePointAverage))
                ) && 
                (
                    this.CumulativeGradePointsEarned == input.CumulativeGradePointsEarned ||
                    (this.CumulativeGradePointsEarned != null &&
                    this.CumulativeGradePointsEarned.Equals(input.CumulativeGradePointsEarned))
                ) && 
                (
                    this.Diplomas == input.Diplomas ||
                    this.Diplomas != null &&
                    this.Diplomas.SequenceEqual(input.Diplomas)
                ) && 
                (
                    this.GradePointAverages == input.GradePointAverages ||
                    this.GradePointAverages != null &&
                    this.GradePointAverages.SequenceEqual(input.GradePointAverages)
                ) && 
                (
                    this.GradeValueQualifier == input.GradeValueQualifier ||
                    (this.GradeValueQualifier != null &&
                    this.GradeValueQualifier.Equals(input.GradeValueQualifier))
                ) && 
                (
                    this.ProjectedGraduationDate == input.ProjectedGraduationDate ||
                    (this.ProjectedGraduationDate != null &&
                    this.ProjectedGraduationDate.Equals(input.ProjectedGraduationDate))
                ) && 
                (
                    this.Recognitions == input.Recognitions ||
                    this.Recognitions != null &&
                    this.Recognitions.SequenceEqual(input.Recognitions)
                ) && 
                (
                    this.ReportCards == input.ReportCards ||
                    this.ReportCards != null &&
                    this.ReportCards.SequenceEqual(input.ReportCards)
                ) && 
                (
                    this.SessionAttemptedCreditConversion == input.SessionAttemptedCreditConversion ||
                    (this.SessionAttemptedCreditConversion != null &&
                    this.SessionAttemptedCreditConversion.Equals(input.SessionAttemptedCreditConversion))
                ) && 
                (
                    this.SessionAttemptedCredits == input.SessionAttemptedCredits ||
                    (this.SessionAttemptedCredits != null &&
                    this.SessionAttemptedCredits.Equals(input.SessionAttemptedCredits))
                ) && 
                (
                    this.SessionAttemptedCreditTypeDescriptor == input.SessionAttemptedCreditTypeDescriptor ||
                    (this.SessionAttemptedCreditTypeDescriptor != null &&
                    this.SessionAttemptedCreditTypeDescriptor.Equals(input.SessionAttemptedCreditTypeDescriptor))
                ) && 
                (
                    this.SessionEarnedCreditConversion == input.SessionEarnedCreditConversion ||
                    (this.SessionEarnedCreditConversion != null &&
                    this.SessionEarnedCreditConversion.Equals(input.SessionEarnedCreditConversion))
                ) && 
                (
                    this.SessionEarnedCredits == input.SessionEarnedCredits ||
                    (this.SessionEarnedCredits != null &&
                    this.SessionEarnedCredits.Equals(input.SessionEarnedCredits))
                ) && 
                (
                    this.SessionEarnedCreditTypeDescriptor == input.SessionEarnedCreditTypeDescriptor ||
                    (this.SessionEarnedCreditTypeDescriptor != null &&
                    this.SessionEarnedCreditTypeDescriptor.Equals(input.SessionEarnedCreditTypeDescriptor))
                ) && 
                (
                    this.SessionGradePointAverage == input.SessionGradePointAverage ||
                    (this.SessionGradePointAverage != null &&
                    this.SessionGradePointAverage.Equals(input.SessionGradePointAverage))
                ) && 
                (
                    this.SessionGradePointsEarned == input.SessionGradePointsEarned ||
                    (this.SessionGradePointsEarned != null &&
                    this.SessionGradePointsEarned.Equals(input.SessionGradePointsEarned))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TermDescriptor != null)
                    hashCode = hashCode * 59 + this.TermDescriptor.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.StudentReference != null)
                    hashCode = hashCode * 59 + this.StudentReference.GetHashCode();
                if (this.AcademicHonors != null)
                    hashCode = hashCode * 59 + this.AcademicHonors.GetHashCode();
                if (this.ClassRanking != null)
                    hashCode = hashCode * 59 + this.ClassRanking.GetHashCode();
                if (this.CumulativeAttemptedCreditConversion != null)
                    hashCode = hashCode * 59 + this.CumulativeAttemptedCreditConversion.GetHashCode();
                if (this.CumulativeAttemptedCredits != null)
                    hashCode = hashCode * 59 + this.CumulativeAttemptedCredits.GetHashCode();
                if (this.CumulativeAttemptedCreditTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.CumulativeAttemptedCreditTypeDescriptor.GetHashCode();
                if (this.CumulativeEarnedCreditConversion != null)
                    hashCode = hashCode * 59 + this.CumulativeEarnedCreditConversion.GetHashCode();
                if (this.CumulativeEarnedCredits != null)
                    hashCode = hashCode * 59 + this.CumulativeEarnedCredits.GetHashCode();
                if (this.CumulativeEarnedCreditTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.CumulativeEarnedCreditTypeDescriptor.GetHashCode();
                if (this.CumulativeGradePointAverage != null)
                    hashCode = hashCode * 59 + this.CumulativeGradePointAverage.GetHashCode();
                if (this.CumulativeGradePointsEarned != null)
                    hashCode = hashCode * 59 + this.CumulativeGradePointsEarned.GetHashCode();
                if (this.Diplomas != null)
                    hashCode = hashCode * 59 + this.Diplomas.GetHashCode();
                if (this.GradePointAverages != null)
                    hashCode = hashCode * 59 + this.GradePointAverages.GetHashCode();
                if (this.GradeValueQualifier != null)
                    hashCode = hashCode * 59 + this.GradeValueQualifier.GetHashCode();
                if (this.ProjectedGraduationDate != null)
                    hashCode = hashCode * 59 + this.ProjectedGraduationDate.GetHashCode();
                if (this.Recognitions != null)
                    hashCode = hashCode * 59 + this.Recognitions.GetHashCode();
                if (this.ReportCards != null)
                    hashCode = hashCode * 59 + this.ReportCards.GetHashCode();
                if (this.SessionAttemptedCreditConversion != null)
                    hashCode = hashCode * 59 + this.SessionAttemptedCreditConversion.GetHashCode();
                if (this.SessionAttemptedCredits != null)
                    hashCode = hashCode * 59 + this.SessionAttemptedCredits.GetHashCode();
                if (this.SessionAttemptedCreditTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.SessionAttemptedCreditTypeDescriptor.GetHashCode();
                if (this.SessionEarnedCreditConversion != null)
                    hashCode = hashCode * 59 + this.SessionEarnedCreditConversion.GetHashCode();
                if (this.SessionEarnedCredits != null)
                    hashCode = hashCode * 59 + this.SessionEarnedCredits.GetHashCode();
                if (this.SessionEarnedCreditTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.SessionEarnedCreditTypeDescriptor.GetHashCode();
                if (this.SessionGradePointAverage != null)
                    hashCode = hashCode * 59 + this.SessionGradePointAverage.GetHashCode();
                if (this.SessionGradePointsEarned != null)
                    hashCode = hashCode * 59 + this.SessionGradePointsEarned.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
