/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStudentSpecialEducationProgramAssociation
    /// </summary>
    [DataContract]
    public partial class EdFiStudentSpecialEducationProgramAssociation :  IEquatable<EdFiStudentSpecialEducationProgramAssociation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSpecialEducationProgramAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentSpecialEducationProgramAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSpecialEducationProgramAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="programReference">programReference (required).</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="disabilities">An unordered collection of studentSpecialEducationProgramAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as related to special education services received..</param>
        /// <param name="endDate">The month, day, and year on which the Student exited the Program or stopped receiving services..</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA)..</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP..</param>
        /// <param name="iepEndDate">The end date of the most recent IEP..</param>
        /// <param name="iepReviewDate">The date of the last IEP review..</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation..</param>
        /// <param name="medicallyFragile">Indicates whether the Student receiving special education and related services is:         1) in the age range of birth to 22 years, and         2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and         3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and         4) lives with ongoing threat to his or her continued well-being.         Aligns with federal requirements..</param>
        /// <param name="multiplyDisabled">Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements..</param>
        /// <param name="participationStatus">participationStatus.</param>
        /// <param name="programParticipationStatuses">An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation..</param>
        /// <param name="reasonExitedDescriptor">The reason the child left the Program within a school or district..</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends..</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the Student received services during the summer session or between sessions..</param>
        /// <param name="serviceProviders">An unordered collection of studentSpecialEducationProgramAssociationServiceProviders. The Staff providing special education services to the Student..</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy..</param>
        /// <param name="specialEducationProgramServices">An unordered collection of studentSpecialEducationProgramAssociationSpecialEducationProgramServices. Indicates the Service(s) being provided to the Student by the Special Education Program..</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program)..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="ext">ext.</param>
        public EdFiStudentSpecialEducationProgramAssociation(string id = default(string), DateTime? beginDate = default(DateTime?), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiProgramReference programReference = default(EdFiProgramReference), EdFiStudentReference studentReference = default(EdFiStudentReference), List<EdFiStudentSpecialEducationProgramAssociationDisability> disabilities = default(List<EdFiStudentSpecialEducationProgramAssociationDisability>), DateTime? endDate = default(DateTime?), bool? ideaEligibility = default(bool?), DateTime? iepBeginDate = default(DateTime?), DateTime? iepEndDate = default(DateTime?), DateTime? iepReviewDate = default(DateTime?), DateTime? lastEvaluationDate = default(DateTime?), bool? medicallyFragile = default(bool?), bool? multiplyDisabled = default(bool?), EdFiGeneralStudentProgramAssociationParticipationStatus participationStatus = default(EdFiGeneralStudentProgramAssociationParticipationStatus), List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus> programParticipationStatuses = default(List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>), string reasonExitedDescriptor = default(string), double? schoolHoursPerWeek = default(double?), bool? servedOutsideOfRegularSession = default(bool?), List<EdFiStudentSpecialEducationProgramAssociationServiceProvider> serviceProviders = default(List<EdFiStudentSpecialEducationProgramAssociationServiceProvider>), double? specialEducationHoursPerWeek = default(double?), List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService> specialEducationProgramServices = default(List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService>), string specialEducationSettingDescriptor = default(string), string etag = default(string), StudentSpecialEducationProgramAssociationExtensions ext = default(StudentSpecialEducationProgramAssociationExtensions))
        {
            // to ensure "beginDate" is required (not null)
            if (beginDate == null)
            {
                throw new InvalidDataException("beginDate is a required property for EdFiStudentSpecialEducationProgramAssociation and cannot be null");
            }
            else
            {
                this.BeginDate = beginDate;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for EdFiStudentSpecialEducationProgramAssociation and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "programReference" is required (not null)
            if (programReference == null)
            {
                throw new InvalidDataException("programReference is a required property for EdFiStudentSpecialEducationProgramAssociation and cannot be null");
            }
            else
            {
                this.ProgramReference = programReference;
            }
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new InvalidDataException("studentReference is a required property for EdFiStudentSpecialEducationProgramAssociation and cannot be null");
            }
            else
            {
                this.StudentReference = studentReference;
            }
            this.Id = id;
            this.Disabilities = disabilities;
            this.EndDate = endDate;
            this.IdeaEligibility = ideaEligibility;
            this.IepBeginDate = iepBeginDate;
            this.IepEndDate = iepEndDate;
            this.IepReviewDate = iepReviewDate;
            this.LastEvaluationDate = lastEvaluationDate;
            this.MedicallyFragile = medicallyFragile;
            this.MultiplyDisabled = multiplyDisabled;
            this.ParticipationStatus = participationStatus;
            this.ProgramParticipationStatuses = programParticipationStatuses;
            this.ReasonExitedDescriptor = reasonExitedDescriptor;
            this.SchoolHoursPerWeek = schoolHoursPerWeek;
            this.ServedOutsideOfRegularSession = servedOutsideOfRegularSession;
            this.ServiceProviders = serviceProviders;
            this.SpecialEducationHoursPerWeek = specialEducationHoursPerWeek;
            this.SpecialEducationProgramServices = specialEducationProgramServices;
            this.SpecialEducationSettingDescriptor = specialEducationSettingDescriptor;
            this.Etag = etag;
            this.Ext = ext;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.
        /// </summary>
        /// <value>The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.</value>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [DataMember(Name="programReference", EmitDefaultValue=false)]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name="studentReference", EmitDefaultValue=false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentSpecialEducationProgramAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as related to special education services received.
        /// </summary>
        /// <value>An unordered collection of studentSpecialEducationProgramAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as related to special education services received.</value>
        [DataMember(Name="disabilities", EmitDefaultValue=false)]
        public List<EdFiStudentSpecialEducationProgramAssociationDisability> Disabilities { get; set; }

        /// <summary>
        /// The month, day, and year on which the Student exited the Program or stopped receiving services.
        /// </summary>
        /// <value>The month, day, and year on which the Student exited the Program or stopped receiving services.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).
        /// </summary>
        /// <value>Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).</value>
        [DataMember(Name="ideaEligibility", EmitDefaultValue=false)]
        public bool? IdeaEligibility { get; set; }

        /// <summary>
        /// The effective date of the most recent IEP.
        /// </summary>
        /// <value>The effective date of the most recent IEP.</value>
        [DataMember(Name="iepBeginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IepBeginDate { get; set; }

        /// <summary>
        /// The end date of the most recent IEP.
        /// </summary>
        /// <value>The end date of the most recent IEP.</value>
        [DataMember(Name="iepEndDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IepEndDate { get; set; }

        /// <summary>
        /// The date of the last IEP review.
        /// </summary>
        /// <value>The date of the last IEP review.</value>
        [DataMember(Name="iepReviewDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IepReviewDate { get; set; }

        /// <summary>
        /// The date of the last special education evaluation.
        /// </summary>
        /// <value>The date of the last special education evaluation.</value>
        [DataMember(Name="lastEvaluationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastEvaluationDate { get; set; }

        /// <summary>
        /// Indicates whether the Student receiving special education and related services is:         1) in the age range of birth to 22 years, and         2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and         3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and         4) lives with ongoing threat to his or her continued well-being.         Aligns with federal requirements.
        /// </summary>
        /// <value>Indicates whether the Student receiving special education and related services is:         1) in the age range of birth to 22 years, and         2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and         3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and         4) lives with ongoing threat to his or her continued well-being.         Aligns with federal requirements.</value>
        [DataMember(Name="medicallyFragile", EmitDefaultValue=false)]
        public bool? MedicallyFragile { get; set; }

        /// <summary>
        /// Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.
        /// </summary>
        /// <value>Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.</value>
        [DataMember(Name="multiplyDisabled", EmitDefaultValue=false)]
        public bool? MultiplyDisabled { get; set; }

        /// <summary>
        /// Gets or Sets ParticipationStatus
        /// </summary>
        [DataMember(Name="participationStatus", EmitDefaultValue=false)]
        public EdFiGeneralStudentProgramAssociationParticipationStatus ParticipationStatus { get; set; }

        /// <summary>
        /// An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.
        /// </summary>
        /// <value>An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</value>
        [DataMember(Name="programParticipationStatuses", EmitDefaultValue=false)]
        public List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus> ProgramParticipationStatuses { get; set; }

        /// <summary>
        /// The reason the child left the Program within a school or district.
        /// </summary>
        /// <value>The reason the child left the Program within a school or district.</value>
        [DataMember(Name="reasonExitedDescriptor", EmitDefaultValue=false)]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// Indicate the total number of hours of instructional time per week for the school that the student attends.
        /// </summary>
        /// <value>Indicate the total number of hours of instructional time per week for the school that the student attends.</value>
        [DataMember(Name="schoolHoursPerWeek", EmitDefaultValue=false)]
        public double? SchoolHoursPerWeek { get; set; }

        /// <summary>
        /// Indicates whether the Student received services during the summer session or between sessions.
        /// </summary>
        /// <value>Indicates whether the Student received services during the summer session or between sessions.</value>
        [DataMember(Name="servedOutsideOfRegularSession", EmitDefaultValue=false)]
        public bool? ServedOutsideOfRegularSession { get; set; }

        /// <summary>
        /// An unordered collection of studentSpecialEducationProgramAssociationServiceProviders. The Staff providing special education services to the Student.
        /// </summary>
        /// <value>An unordered collection of studentSpecialEducationProgramAssociationServiceProviders. The Staff providing special education services to the Student.</value>
        [DataMember(Name="serviceProviders", EmitDefaultValue=false)]
        public List<EdFiStudentSpecialEducationProgramAssociationServiceProvider> ServiceProviders { get; set; }

        /// <summary>
        /// The number of hours per week for special education instruction and therapy.
        /// </summary>
        /// <value>The number of hours per week for special education instruction and therapy.</value>
        [DataMember(Name="specialEducationHoursPerWeek", EmitDefaultValue=false)]
        public double? SpecialEducationHoursPerWeek { get; set; }

        /// <summary>
        /// An unordered collection of studentSpecialEducationProgramAssociationSpecialEducationProgramServices. Indicates the Service(s) being provided to the Student by the Special Education Program.
        /// </summary>
        /// <value>An unordered collection of studentSpecialEducationProgramAssociationSpecialEducationProgramServices. Indicates the Service(s) being provided to the Student by the Special Education Program.</value>
        [DataMember(Name="specialEducationProgramServices", EmitDefaultValue=false)]
        public List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService> SpecialEducationProgramServices { get; set; }

        /// <summary>
        /// The major instructional setting (more than 50 percent of a student&#39;s special education program).
        /// </summary>
        /// <value>The major instructional setting (more than 50 percent of a student&#39;s special education program).</value>
        [DataMember(Name="specialEducationSettingDescriptor", EmitDefaultValue=false)]
        public string SpecialEducationSettingDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [DataMember(Name="_ext", EmitDefaultValue=false)]
        public StudentSpecialEducationProgramAssociationExtensions Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentSpecialEducationProgramAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IdeaEligibility: ").Append(IdeaEligibility).Append("\n");
            sb.Append("  IepBeginDate: ").Append(IepBeginDate).Append("\n");
            sb.Append("  IepEndDate: ").Append(IepEndDate).Append("\n");
            sb.Append("  IepReviewDate: ").Append(IepReviewDate).Append("\n");
            sb.Append("  LastEvaluationDate: ").Append(LastEvaluationDate).Append("\n");
            sb.Append("  MedicallyFragile: ").Append(MedicallyFragile).Append("\n");
            sb.Append("  MultiplyDisabled: ").Append(MultiplyDisabled).Append("\n");
            sb.Append("  ParticipationStatus: ").Append(ParticipationStatus).Append("\n");
            sb.Append("  ProgramParticipationStatuses: ").Append(ProgramParticipationStatuses).Append("\n");
            sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            sb.Append("  SchoolHoursPerWeek: ").Append(SchoolHoursPerWeek).Append("\n");
            sb.Append("  ServedOutsideOfRegularSession: ").Append(ServedOutsideOfRegularSession).Append("\n");
            sb.Append("  ServiceProviders: ").Append(ServiceProviders).Append("\n");
            sb.Append("  SpecialEducationHoursPerWeek: ").Append(SpecialEducationHoursPerWeek).Append("\n");
            sb.Append("  SpecialEducationProgramServices: ").Append(SpecialEducationProgramServices).Append("\n");
            sb.Append("  SpecialEducationSettingDescriptor: ").Append(SpecialEducationSettingDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentSpecialEducationProgramAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStudentSpecialEducationProgramAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentSpecialEducationProgramAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentSpecialEducationProgramAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.ProgramReference == input.ProgramReference ||
                    (this.ProgramReference != null &&
                    this.ProgramReference.Equals(input.ProgramReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.Disabilities == input.Disabilities ||
                    this.Disabilities != null &&
                    this.Disabilities.SequenceEqual(input.Disabilities)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.IdeaEligibility == input.IdeaEligibility ||
                    (this.IdeaEligibility != null &&
                    this.IdeaEligibility.Equals(input.IdeaEligibility))
                ) && 
                (
                    this.IepBeginDate == input.IepBeginDate ||
                    (this.IepBeginDate != null &&
                    this.IepBeginDate.Equals(input.IepBeginDate))
                ) && 
                (
                    this.IepEndDate == input.IepEndDate ||
                    (this.IepEndDate != null &&
                    this.IepEndDate.Equals(input.IepEndDate))
                ) && 
                (
                    this.IepReviewDate == input.IepReviewDate ||
                    (this.IepReviewDate != null &&
                    this.IepReviewDate.Equals(input.IepReviewDate))
                ) && 
                (
                    this.LastEvaluationDate == input.LastEvaluationDate ||
                    (this.LastEvaluationDate != null &&
                    this.LastEvaluationDate.Equals(input.LastEvaluationDate))
                ) && 
                (
                    this.MedicallyFragile == input.MedicallyFragile ||
                    (this.MedicallyFragile != null &&
                    this.MedicallyFragile.Equals(input.MedicallyFragile))
                ) && 
                (
                    this.MultiplyDisabled == input.MultiplyDisabled ||
                    (this.MultiplyDisabled != null &&
                    this.MultiplyDisabled.Equals(input.MultiplyDisabled))
                ) && 
                (
                    this.ParticipationStatus == input.ParticipationStatus ||
                    (this.ParticipationStatus != null &&
                    this.ParticipationStatus.Equals(input.ParticipationStatus))
                ) && 
                (
                    this.ProgramParticipationStatuses == input.ProgramParticipationStatuses ||
                    this.ProgramParticipationStatuses != null &&
                    this.ProgramParticipationStatuses.SequenceEqual(input.ProgramParticipationStatuses)
                ) && 
                (
                    this.ReasonExitedDescriptor == input.ReasonExitedDescriptor ||
                    (this.ReasonExitedDescriptor != null &&
                    this.ReasonExitedDescriptor.Equals(input.ReasonExitedDescriptor))
                ) && 
                (
                    this.SchoolHoursPerWeek == input.SchoolHoursPerWeek ||
                    (this.SchoolHoursPerWeek != null &&
                    this.SchoolHoursPerWeek.Equals(input.SchoolHoursPerWeek))
                ) && 
                (
                    this.ServedOutsideOfRegularSession == input.ServedOutsideOfRegularSession ||
                    (this.ServedOutsideOfRegularSession != null &&
                    this.ServedOutsideOfRegularSession.Equals(input.ServedOutsideOfRegularSession))
                ) && 
                (
                    this.ServiceProviders == input.ServiceProviders ||
                    this.ServiceProviders != null &&
                    this.ServiceProviders.SequenceEqual(input.ServiceProviders)
                ) && 
                (
                    this.SpecialEducationHoursPerWeek == input.SpecialEducationHoursPerWeek ||
                    (this.SpecialEducationHoursPerWeek != null &&
                    this.SpecialEducationHoursPerWeek.Equals(input.SpecialEducationHoursPerWeek))
                ) && 
                (
                    this.SpecialEducationProgramServices == input.SpecialEducationProgramServices ||
                    this.SpecialEducationProgramServices != null &&
                    this.SpecialEducationProgramServices.SequenceEqual(input.SpecialEducationProgramServices)
                ) && 
                (
                    this.SpecialEducationSettingDescriptor == input.SpecialEducationSettingDescriptor ||
                    (this.SpecialEducationSettingDescriptor != null &&
                    this.SpecialEducationSettingDescriptor.Equals(input.SpecialEducationSettingDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.ProgramReference != null)
                    hashCode = hashCode * 59 + this.ProgramReference.GetHashCode();
                if (this.StudentReference != null)
                    hashCode = hashCode * 59 + this.StudentReference.GetHashCode();
                if (this.Disabilities != null)
                    hashCode = hashCode * 59 + this.Disabilities.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.IdeaEligibility != null)
                    hashCode = hashCode * 59 + this.IdeaEligibility.GetHashCode();
                if (this.IepBeginDate != null)
                    hashCode = hashCode * 59 + this.IepBeginDate.GetHashCode();
                if (this.IepEndDate != null)
                    hashCode = hashCode * 59 + this.IepEndDate.GetHashCode();
                if (this.IepReviewDate != null)
                    hashCode = hashCode * 59 + this.IepReviewDate.GetHashCode();
                if (this.LastEvaluationDate != null)
                    hashCode = hashCode * 59 + this.LastEvaluationDate.GetHashCode();
                if (this.MedicallyFragile != null)
                    hashCode = hashCode * 59 + this.MedicallyFragile.GetHashCode();
                if (this.MultiplyDisabled != null)
                    hashCode = hashCode * 59 + this.MultiplyDisabled.GetHashCode();
                if (this.ParticipationStatus != null)
                    hashCode = hashCode * 59 + this.ParticipationStatus.GetHashCode();
                if (this.ProgramParticipationStatuses != null)
                    hashCode = hashCode * 59 + this.ProgramParticipationStatuses.GetHashCode();
                if (this.ReasonExitedDescriptor != null)
                    hashCode = hashCode * 59 + this.ReasonExitedDescriptor.GetHashCode();
                if (this.SchoolHoursPerWeek != null)
                    hashCode = hashCode * 59 + this.SchoolHoursPerWeek.GetHashCode();
                if (this.ServedOutsideOfRegularSession != null)
                    hashCode = hashCode * 59 + this.ServedOutsideOfRegularSession.GetHashCode();
                if (this.ServiceProviders != null)
                    hashCode = hashCode * 59 + this.ServiceProviders.GetHashCode();
                if (this.SpecialEducationHoursPerWeek != null)
                    hashCode = hashCode * 59 + this.SpecialEducationHoursPerWeek.GetHashCode();
                if (this.SpecialEducationProgramServices != null)
                    hashCode = hashCode * 59 + this.SpecialEducationProgramServices.GetHashCode();
                if (this.SpecialEducationSettingDescriptor != null)
                    hashCode = hashCode * 59 + this.SpecialEducationSettingDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.Ext != null)
                    hashCode = hashCode * 59 + this.Ext.GetHashCode();
                return hashCode;
            }
        }
    }

}
