/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiSurvey
    /// </summary>
    [DataContract]
    public partial class EdFiSurvey :  IEquatable<EdFiSurvey>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurvey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurvey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurvey" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="_namespace">Namespace for the Survey. (required).</param>
        /// <param name="surveyIdentifier">The unique survey identifier from the survey tool. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference.</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="sessionReference">sessionReference.</param>
        /// <param name="numberAdministered">Number of persons to whom this survey was administered..</param>
        /// <param name="surveyCategoryDescriptor">The category or type of survey..</param>
        /// <param name="surveyTitle">The title of the survey. (required).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiSurvey(string id = default(string), string _namespace = default(string), string surveyIdentifier = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), EdFiSessionReference sessionReference = default(EdFiSessionReference), int? numberAdministered = default(int?), string surveyCategoryDescriptor = default(string), string surveyTitle = default(string), string etag = default(string))
        {
            // to ensure "_namespace" is required (not null)
            if (_namespace == null)
            {
                throw new InvalidDataException("_namespace is a required property for EdFiSurvey and cannot be null");
            }
            else
            {
                this.Namespace = _namespace;
            }
            // to ensure "surveyIdentifier" is required (not null)
            if (surveyIdentifier == null)
            {
                throw new InvalidDataException("surveyIdentifier is a required property for EdFiSurvey and cannot be null");
            }
            else
            {
                this.SurveyIdentifier = surveyIdentifier;
            }
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new InvalidDataException("schoolYearTypeReference is a required property for EdFiSurvey and cannot be null");
            }
            else
            {
                this.SchoolYearTypeReference = schoolYearTypeReference;
            }
            // to ensure "surveyTitle" is required (not null)
            if (surveyTitle == null)
            {
                throw new InvalidDataException("surveyTitle is a required property for EdFiSurvey and cannot be null");
            }
            else
            {
                this.SurveyTitle = surveyTitle;
            }
            this.Id = id;
            this.EducationOrganizationReference = educationOrganizationReference;
            this.SessionReference = sessionReference;
            this.NumberAdministered = numberAdministered;
            this.SurveyCategoryDescriptor = surveyCategoryDescriptor;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Namespace for the Survey.
        /// </summary>
        /// <value>Namespace for the Survey.</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        /// <value>The unique survey identifier from the survey tool.</value>
        [DataMember(Name="surveyIdentifier", EmitDefaultValue=false)]
        public string SurveyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets SessionReference
        /// </summary>
        [DataMember(Name="sessionReference", EmitDefaultValue=false)]
        public EdFiSessionReference SessionReference { get; set; }

        /// <summary>
        /// Number of persons to whom this survey was administered.
        /// </summary>
        /// <value>Number of persons to whom this survey was administered.</value>
        [DataMember(Name="numberAdministered", EmitDefaultValue=false)]
        public int? NumberAdministered { get; set; }

        /// <summary>
        /// The category or type of survey.
        /// </summary>
        /// <value>The category or type of survey.</value>
        [DataMember(Name="surveyCategoryDescriptor", EmitDefaultValue=false)]
        public string SurveyCategoryDescriptor { get; set; }

        /// <summary>
        /// The title of the survey.
        /// </summary>
        /// <value>The title of the survey.</value>
        [DataMember(Name="surveyTitle", EmitDefaultValue=false)]
        public string SurveyTitle { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiSurvey {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SurveyIdentifier: ").Append(SurveyIdentifier).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  SessionReference: ").Append(SessionReference).Append("\n");
            sb.Append("  NumberAdministered: ").Append(NumberAdministered).Append("\n");
            sb.Append("  SurveyCategoryDescriptor: ").Append(SurveyCategoryDescriptor).Append("\n");
            sb.Append("  SurveyTitle: ").Append(SurveyTitle).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiSurvey);
        }

        /// <summary>
        /// Returns true if EdFiSurvey instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiSurvey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiSurvey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.SurveyIdentifier == input.SurveyIdentifier ||
                    (this.SurveyIdentifier != null &&
                    this.SurveyIdentifier.Equals(input.SurveyIdentifier))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.SessionReference == input.SessionReference ||
                    (this.SessionReference != null &&
                    this.SessionReference.Equals(input.SessionReference))
                ) && 
                (
                    this.NumberAdministered == input.NumberAdministered ||
                    (this.NumberAdministered != null &&
                    this.NumberAdministered.Equals(input.NumberAdministered))
                ) && 
                (
                    this.SurveyCategoryDescriptor == input.SurveyCategoryDescriptor ||
                    (this.SurveyCategoryDescriptor != null &&
                    this.SurveyCategoryDescriptor.Equals(input.SurveyCategoryDescriptor))
                ) && 
                (
                    this.SurveyTitle == input.SurveyTitle ||
                    (this.SurveyTitle != null &&
                    this.SurveyTitle.Equals(input.SurveyTitle))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.SurveyIdentifier != null)
                    hashCode = hashCode * 59 + this.SurveyIdentifier.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.SessionReference != null)
                    hashCode = hashCode * 59 + this.SessionReference.GetHashCode();
                if (this.NumberAdministered != null)
                    hashCode = hashCode * 59 + this.NumberAdministered.GetHashCode();
                if (this.SurveyCategoryDescriptor != null)
                    hashCode = hashCode * 59 + this.SurveyCategoryDescriptor.GetHashCode();
                if (this.SurveyTitle != null)
                    hashCode = hashCode * 59 + this.SurveyTitle.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
