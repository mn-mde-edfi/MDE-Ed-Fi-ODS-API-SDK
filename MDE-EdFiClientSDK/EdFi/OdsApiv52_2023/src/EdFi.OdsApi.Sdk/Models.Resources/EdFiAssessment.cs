/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiAssessment
    /// </summary>
    [DataContract]
    public partial class EdFiAssessment :  IEquatable<EdFiAssessment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiAssessment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessment" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="academicSubjects">An unordered collection of assessmentAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment. (required).</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (required).</param>
        /// <param name="_namespace">Namespace for the Assessment. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference.</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive..</param>
        /// <param name="assessedGradeLevels">An unordered collection of assessmentAssessedGradeLevels. The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level..</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. For example:         Achievement test         Advanced placement test         Alternate assessment/grade-level standards         Attitudinal test         Cognitive and perceptual skills test         ....</param>
        /// <param name="assessmentFamily">The AssessmentFamily this Assessment is a member of..</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc..</param>
        /// <param name="assessmentTitle">The title or name of the Assessment. (required).</param>
        /// <param name="assessmentVersion">The version identifier for the assessment..</param>
        /// <param name="contentStandard">contentStandard.</param>
        /// <param name="identificationCodes">An unordered collection of assessmentIdentificationCodes. A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity..</param>
        /// <param name="languages">An unordered collection of assessmentLanguages. An indication of the languages in which the assessment is designed..</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum..</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for Assessment..</param>
        /// <param name="performanceLevels">An unordered collection of assessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported:         1. Specification of performance level by minimum and maximum score         2. Specification of performance level by cut score, using only minimum score         3. Specification of performance level without any mapping to scores..</param>
        /// <param name="period">period.</param>
        /// <param name="platformTypes">An unordered collection of assessmentPlatformTypes. The platforms with which the assessment may be delivered..</param>
        /// <param name="programs">An unordered collection of assessmentPrograms. The programs associated with the Assessment..</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially..</param>
        /// <param name="scores">An unordered collection of assessmentScores. Definition of the scores to be expected from this assessment..</param>
        /// <param name="sections">An unordered collection of assessmentSections. The Section(s) to which the Assessment is associated..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiAssessment(string id = default(string), List<EdFiAssessmentAcademicSubject> academicSubjects = default(List<EdFiAssessmentAcademicSubject>), string assessmentIdentifier = default(string), string _namespace = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), bool? adaptiveAssessment = default(bool?), List<EdFiAssessmentAssessedGradeLevel> assessedGradeLevels = default(List<EdFiAssessmentAssessedGradeLevel>), string assessmentCategoryDescriptor = default(string), string assessmentFamily = default(string), string assessmentForm = default(string), string assessmentTitle = default(string), int? assessmentVersion = default(int?), EdFiAssessmentContentStandard contentStandard = default(EdFiAssessmentContentStandard), List<EdFiAssessmentIdentificationCode> identificationCodes = default(List<EdFiAssessmentIdentificationCode>), List<EdFiAssessmentLanguage> languages = default(List<EdFiAssessmentLanguage>), double? maxRawScore = default(double?), string nomenclature = default(string), List<EdFiAssessmentPerformanceLevel> performanceLevels = default(List<EdFiAssessmentPerformanceLevel>), EdFiAssessmentPeriod period = default(EdFiAssessmentPeriod), List<EdFiAssessmentPlatformType> platformTypes = default(List<EdFiAssessmentPlatformType>), List<EdFiAssessmentProgram> programs = default(List<EdFiAssessmentProgram>), DateTime? revisionDate = default(DateTime?), List<EdFiAssessmentScore> scores = default(List<EdFiAssessmentScore>), List<EdFiAssessmentSection> sections = default(List<EdFiAssessmentSection>), string etag = default(string))
        {
            // to ensure "academicSubjects" is required (not null)
            if (academicSubjects == null)
            {
                throw new InvalidDataException("academicSubjects is a required property for EdFiAssessment and cannot be null");
            }
            else
            {
                this.AcademicSubjects = academicSubjects;
            }
            // to ensure "assessmentIdentifier" is required (not null)
            if (assessmentIdentifier == null)
            {
                throw new InvalidDataException("assessmentIdentifier is a required property for EdFiAssessment and cannot be null");
            }
            else
            {
                this.AssessmentIdentifier = assessmentIdentifier;
            }
            // to ensure "_namespace" is required (not null)
            if (_namespace == null)
            {
                throw new InvalidDataException("_namespace is a required property for EdFiAssessment and cannot be null");
            }
            else
            {
                this.Namespace = _namespace;
            }
            // to ensure "assessmentTitle" is required (not null)
            if (assessmentTitle == null)
            {
                throw new InvalidDataException("assessmentTitle is a required property for EdFiAssessment and cannot be null");
            }
            else
            {
                this.AssessmentTitle = assessmentTitle;
            }
            this.Id = id;
            this.EducationOrganizationReference = educationOrganizationReference;
            this.AdaptiveAssessment = adaptiveAssessment;
            this.AssessedGradeLevels = assessedGradeLevels;
            this.AssessmentCategoryDescriptor = assessmentCategoryDescriptor;
            this.AssessmentFamily = assessmentFamily;
            this.AssessmentForm = assessmentForm;
            this.AssessmentVersion = assessmentVersion;
            this.ContentStandard = contentStandard;
            this.IdentificationCodes = identificationCodes;
            this.Languages = languages;
            this.MaxRawScore = maxRawScore;
            this.Nomenclature = nomenclature;
            this.PerformanceLevels = performanceLevels;
            this.Period = period;
            this.PlatformTypes = platformTypes;
            this.Programs = programs;
            this.RevisionDate = revisionDate;
            this.Scores = scores;
            this.Sections = sections;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An unordered collection of assessmentAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        /// </summary>
        /// <value>An unordered collection of assessmentAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.</value>
        [DataMember(Name="academicSubjects", EmitDefaultValue=false)]
        public List<EdFiAssessmentAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an assessment.</value>
        [DataMember(Name="assessmentIdentifier", EmitDefaultValue=false)]
        public string AssessmentIdentifier { get; set; }

        /// <summary>
        /// Namespace for the Assessment.
        /// </summary>
        /// <value>Namespace for the Assessment.</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Indicates that the assessment is adaptive.
        /// </summary>
        /// <value>Indicates that the assessment is adaptive.</value>
        [DataMember(Name="adaptiveAssessment", EmitDefaultValue=false)]
        public bool? AdaptiveAssessment { get; set; }

        /// <summary>
        /// An unordered collection of assessmentAssessedGradeLevels. The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.
        /// </summary>
        /// <value>An unordered collection of assessmentAssessedGradeLevels. The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.</value>
        [DataMember(Name="assessedGradeLevels", EmitDefaultValue=false)]
        public List<EdFiAssessmentAssessedGradeLevel> AssessedGradeLevels { get; set; }

        /// <summary>
        /// The category of an assessment based on format and content. For example:         Achievement test         Advanced placement test         Alternate assessment/grade-level standards         Attitudinal test         Cognitive and perceptual skills test         ...
        /// </summary>
        /// <value>The category of an assessment based on format and content. For example:         Achievement test         Advanced placement test         Alternate assessment/grade-level standards         Attitudinal test         Cognitive and perceptual skills test         ...</value>
        [DataMember(Name="assessmentCategoryDescriptor", EmitDefaultValue=false)]
        public string AssessmentCategoryDescriptor { get; set; }

        /// <summary>
        /// The AssessmentFamily this Assessment is a member of.
        /// </summary>
        /// <value>The AssessmentFamily this Assessment is a member of.</value>
        [DataMember(Name="assessmentFamily", EmitDefaultValue=false)]
        public string AssessmentFamily { get; set; }

        /// <summary>
        /// Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.
        /// </summary>
        /// <value>Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.</value>
        [DataMember(Name="assessmentForm", EmitDefaultValue=false)]
        public string AssessmentForm { get; set; }

        /// <summary>
        /// The title or name of the Assessment.
        /// </summary>
        /// <value>The title or name of the Assessment.</value>
        [DataMember(Name="assessmentTitle", EmitDefaultValue=false)]
        public string AssessmentTitle { get; set; }

        /// <summary>
        /// The version identifier for the assessment.
        /// </summary>
        /// <value>The version identifier for the assessment.</value>
        [DataMember(Name="assessmentVersion", EmitDefaultValue=false)]
        public int? AssessmentVersion { get; set; }

        /// <summary>
        /// Gets or Sets ContentStandard
        /// </summary>
        [DataMember(Name="contentStandard", EmitDefaultValue=false)]
        public EdFiAssessmentContentStandard ContentStandard { get; set; }

        /// <summary>
        /// An unordered collection of assessmentIdentificationCodes. A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>An unordered collection of assessmentIdentificationCodes. A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.</value>
        [DataMember(Name="identificationCodes", EmitDefaultValue=false)]
        public List<EdFiAssessmentIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of assessmentLanguages. An indication of the languages in which the assessment is designed.
        /// </summary>
        /// <value>An unordered collection of assessmentLanguages. An indication of the languages in which the assessment is designed.</value>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<EdFiAssessmentLanguage> Languages { get; set; }

        /// <summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        /// </summary>
        /// <value>The maximum raw score achievable across all assessment items that are correct and scored at the maximum.</value>
        [DataMember(Name="maxRawScore", EmitDefaultValue=false)]
        public double? MaxRawScore { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for Assessment.
        /// </summary>
        /// <value>Reflects the specific nomenclature used for Assessment.</value>
        [DataMember(Name="nomenclature", EmitDefaultValue=false)]
        public string Nomenclature { get; set; }

        /// <summary>
        /// An unordered collection of assessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported:         1. Specification of performance level by minimum and maximum score         2. Specification of performance level by cut score, using only minimum score         3. Specification of performance level without any mapping to scores.
        /// </summary>
        /// <value>An unordered collection of assessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported:         1. Specification of performance level by minimum and maximum score         2. Specification of performance level by cut score, using only minimum score         3. Specification of performance level without any mapping to scores.</value>
        [DataMember(Name="performanceLevels", EmitDefaultValue=false)]
        public List<EdFiAssessmentPerformanceLevel> PerformanceLevels { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public EdFiAssessmentPeriod Period { get; set; }

        /// <summary>
        /// An unordered collection of assessmentPlatformTypes. The platforms with which the assessment may be delivered.
        /// </summary>
        /// <value>An unordered collection of assessmentPlatformTypes. The platforms with which the assessment may be delivered.</value>
        [DataMember(Name="platformTypes", EmitDefaultValue=false)]
        public List<EdFiAssessmentPlatformType> PlatformTypes { get; set; }

        /// <summary>
        /// An unordered collection of assessmentPrograms. The programs associated with the Assessment.
        /// </summary>
        /// <value>An unordered collection of assessmentPrograms. The programs associated with the Assessment.</value>
        [DataMember(Name="programs", EmitDefaultValue=false)]
        public List<EdFiAssessmentProgram> Programs { get; set; }

        /// <summary>
        /// The month, day, and year that the conceptual design for the assessment was most recently revised substantially.
        /// </summary>
        /// <value>The month, day, and year that the conceptual design for the assessment was most recently revised substantially.</value>
        [DataMember(Name="revisionDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? RevisionDate { get; set; }

        /// <summary>
        /// An unordered collection of assessmentScores. Definition of the scores to be expected from this assessment.
        /// </summary>
        /// <value>An unordered collection of assessmentScores. Definition of the scores to be expected from this assessment.</value>
        [DataMember(Name="scores", EmitDefaultValue=false)]
        public List<EdFiAssessmentScore> Scores { get; set; }

        /// <summary>
        /// An unordered collection of assessmentSections. The Section(s) to which the Assessment is associated.
        /// </summary>
        /// <value>An unordered collection of assessmentSections. The Section(s) to which the Assessment is associated.</value>
        [DataMember(Name="sections", EmitDefaultValue=false)]
        public List<EdFiAssessmentSection> Sections { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiAssessment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  AssessmentIdentifier: ").Append(AssessmentIdentifier).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AdaptiveAssessment: ").Append(AdaptiveAssessment).Append("\n");
            sb.Append("  AssessedGradeLevels: ").Append(AssessedGradeLevels).Append("\n");
            sb.Append("  AssessmentCategoryDescriptor: ").Append(AssessmentCategoryDescriptor).Append("\n");
            sb.Append("  AssessmentFamily: ").Append(AssessmentFamily).Append("\n");
            sb.Append("  AssessmentForm: ").Append(AssessmentForm).Append("\n");
            sb.Append("  AssessmentTitle: ").Append(AssessmentTitle).Append("\n");
            sb.Append("  AssessmentVersion: ").Append(AssessmentVersion).Append("\n");
            sb.Append("  ContentStandard: ").Append(ContentStandard).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  MaxRawScore: ").Append(MaxRawScore).Append("\n");
            sb.Append("  Nomenclature: ").Append(Nomenclature).Append("\n");
            sb.Append("  PerformanceLevels: ").Append(PerformanceLevels).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PlatformTypes: ").Append(PlatformTypes).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  RevisionDate: ").Append(RevisionDate).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiAssessment);
        }

        /// <summary>
        /// Returns true if EdFiAssessment instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiAssessment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiAssessment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AcademicSubjects == input.AcademicSubjects ||
                    this.AcademicSubjects != null &&
                    this.AcademicSubjects.SequenceEqual(input.AcademicSubjects)
                ) && 
                (
                    this.AssessmentIdentifier == input.AssessmentIdentifier ||
                    (this.AssessmentIdentifier != null &&
                    this.AssessmentIdentifier.Equals(input.AssessmentIdentifier))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.AdaptiveAssessment == input.AdaptiveAssessment ||
                    (this.AdaptiveAssessment != null &&
                    this.AdaptiveAssessment.Equals(input.AdaptiveAssessment))
                ) && 
                (
                    this.AssessedGradeLevels == input.AssessedGradeLevels ||
                    this.AssessedGradeLevels != null &&
                    this.AssessedGradeLevels.SequenceEqual(input.AssessedGradeLevels)
                ) && 
                (
                    this.AssessmentCategoryDescriptor == input.AssessmentCategoryDescriptor ||
                    (this.AssessmentCategoryDescriptor != null &&
                    this.AssessmentCategoryDescriptor.Equals(input.AssessmentCategoryDescriptor))
                ) && 
                (
                    this.AssessmentFamily == input.AssessmentFamily ||
                    (this.AssessmentFamily != null &&
                    this.AssessmentFamily.Equals(input.AssessmentFamily))
                ) && 
                (
                    this.AssessmentForm == input.AssessmentForm ||
                    (this.AssessmentForm != null &&
                    this.AssessmentForm.Equals(input.AssessmentForm))
                ) && 
                (
                    this.AssessmentTitle == input.AssessmentTitle ||
                    (this.AssessmentTitle != null &&
                    this.AssessmentTitle.Equals(input.AssessmentTitle))
                ) && 
                (
                    this.AssessmentVersion == input.AssessmentVersion ||
                    (this.AssessmentVersion != null &&
                    this.AssessmentVersion.Equals(input.AssessmentVersion))
                ) && 
                (
                    this.ContentStandard == input.ContentStandard ||
                    (this.ContentStandard != null &&
                    this.ContentStandard.Equals(input.ContentStandard))
                ) && 
                (
                    this.IdentificationCodes == input.IdentificationCodes ||
                    this.IdentificationCodes != null &&
                    this.IdentificationCodes.SequenceEqual(input.IdentificationCodes)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.MaxRawScore == input.MaxRawScore ||
                    (this.MaxRawScore != null &&
                    this.MaxRawScore.Equals(input.MaxRawScore))
                ) && 
                (
                    this.Nomenclature == input.Nomenclature ||
                    (this.Nomenclature != null &&
                    this.Nomenclature.Equals(input.Nomenclature))
                ) && 
                (
                    this.PerformanceLevels == input.PerformanceLevels ||
                    this.PerformanceLevels != null &&
                    this.PerformanceLevels.SequenceEqual(input.PerformanceLevels)
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.PlatformTypes == input.PlatformTypes ||
                    this.PlatformTypes != null &&
                    this.PlatformTypes.SequenceEqual(input.PlatformTypes)
                ) && 
                (
                    this.Programs == input.Programs ||
                    this.Programs != null &&
                    this.Programs.SequenceEqual(input.Programs)
                ) && 
                (
                    this.RevisionDate == input.RevisionDate ||
                    (this.RevisionDate != null &&
                    this.RevisionDate.Equals(input.RevisionDate))
                ) && 
                (
                    this.Scores == input.Scores ||
                    this.Scores != null &&
                    this.Scores.SequenceEqual(input.Scores)
                ) && 
                (
                    this.Sections == input.Sections ||
                    this.Sections != null &&
                    this.Sections.SequenceEqual(input.Sections)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AcademicSubjects != null)
                    hashCode = hashCode * 59 + this.AcademicSubjects.GetHashCode();
                if (this.AssessmentIdentifier != null)
                    hashCode = hashCode * 59 + this.AssessmentIdentifier.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.AdaptiveAssessment != null)
                    hashCode = hashCode * 59 + this.AdaptiveAssessment.GetHashCode();
                if (this.AssessedGradeLevels != null)
                    hashCode = hashCode * 59 + this.AssessedGradeLevels.GetHashCode();
                if (this.AssessmentCategoryDescriptor != null)
                    hashCode = hashCode * 59 + this.AssessmentCategoryDescriptor.GetHashCode();
                if (this.AssessmentFamily != null)
                    hashCode = hashCode * 59 + this.AssessmentFamily.GetHashCode();
                if (this.AssessmentForm != null)
                    hashCode = hashCode * 59 + this.AssessmentForm.GetHashCode();
                if (this.AssessmentTitle != null)
                    hashCode = hashCode * 59 + this.AssessmentTitle.GetHashCode();
                if (this.AssessmentVersion != null)
                    hashCode = hashCode * 59 + this.AssessmentVersion.GetHashCode();
                if (this.ContentStandard != null)
                    hashCode = hashCode * 59 + this.ContentStandard.GetHashCode();
                if (this.IdentificationCodes != null)
                    hashCode = hashCode * 59 + this.IdentificationCodes.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.MaxRawScore != null)
                    hashCode = hashCode * 59 + this.MaxRawScore.GetHashCode();
                if (this.Nomenclature != null)
                    hashCode = hashCode * 59 + this.Nomenclature.GetHashCode();
                if (this.PerformanceLevels != null)
                    hashCode = hashCode * 59 + this.PerformanceLevels.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.PlatformTypes != null)
                    hashCode = hashCode * 59 + this.PlatformTypes.GetHashCode();
                if (this.Programs != null)
                    hashCode = hashCode * 59 + this.Programs.GetHashCode();
                if (this.RevisionDate != null)
                    hashCode = hashCode * 59 + this.RevisionDate.GetHashCode();
                if (this.Scores != null)
                    hashCode = hashCode * 59 + this.Scores.GetHashCode();
                if (this.Sections != null)
                    hashCode = hashCode * 59 + this.Sections.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
