/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment
    /// </summary>
    [DataContract]
    public partial class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment :  IEquatable<EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment" /> class.
        /// </summary>
        /// <param name="monitoredDescriptor">Student is monitored on content achievement who are no longer receiving services..</param>
        /// <param name="participationDescriptor">Field indicating the participation in the yearly English language assessment..</param>
        /// <param name="proficiencyDescriptor">The proficiency level for the yearly English language assessment..</param>
        /// <param name="progressDescriptor">The yearly progress or growth from last year&#39;s assessment..</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        public EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment(string monitoredDescriptor = default(string), string participationDescriptor = default(string), string proficiencyDescriptor = default(string), string progressDescriptor = default(string), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference))
        {
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new InvalidDataException("schoolYearTypeReference is a required property for EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment and cannot be null");
            }
            else
            {
                this.SchoolYearTypeReference = schoolYearTypeReference;
            }
            this.MonitoredDescriptor = monitoredDescriptor;
            this.ParticipationDescriptor = participationDescriptor;
            this.ProficiencyDescriptor = proficiencyDescriptor;
            this.ProgressDescriptor = progressDescriptor;
        }
        
        /// <summary>
        /// Student is monitored on content achievement who are no longer receiving services.
        /// </summary>
        /// <value>Student is monitored on content achievement who are no longer receiving services.</value>
        [DataMember(Name="monitoredDescriptor", EmitDefaultValue=false)]
        public string MonitoredDescriptor { get; set; }

        /// <summary>
        /// Field indicating the participation in the yearly English language assessment.
        /// </summary>
        /// <value>Field indicating the participation in the yearly English language assessment.</value>
        [DataMember(Name="participationDescriptor", EmitDefaultValue=false)]
        public string ParticipationDescriptor { get; set; }

        /// <summary>
        /// The proficiency level for the yearly English language assessment.
        /// </summary>
        /// <value>The proficiency level for the yearly English language assessment.</value>
        [DataMember(Name="proficiencyDescriptor", EmitDefaultValue=false)]
        public string ProficiencyDescriptor { get; set; }

        /// <summary>
        /// The yearly progress or growth from last year&#39;s assessment.
        /// </summary>
        /// <value>The yearly progress or growth from last year&#39;s assessment.</value>
        [DataMember(Name="progressDescriptor", EmitDefaultValue=false)]
        public string ProgressDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment {\n");
            sb.Append("  MonitoredDescriptor: ").Append(MonitoredDescriptor).Append("\n");
            sb.Append("  ParticipationDescriptor: ").Append(ParticipationDescriptor).Append("\n");
            sb.Append("  ProficiencyDescriptor: ").Append(ProficiencyDescriptor).Append("\n");
            sb.Append("  ProgressDescriptor: ").Append(ProgressDescriptor).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment);
        }

        /// <summary>
        /// Returns true if EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MonitoredDescriptor == input.MonitoredDescriptor ||
                    (this.MonitoredDescriptor != null &&
                    this.MonitoredDescriptor.Equals(input.MonitoredDescriptor))
                ) && 
                (
                    this.ParticipationDescriptor == input.ParticipationDescriptor ||
                    (this.ParticipationDescriptor != null &&
                    this.ParticipationDescriptor.Equals(input.ParticipationDescriptor))
                ) && 
                (
                    this.ProficiencyDescriptor == input.ProficiencyDescriptor ||
                    (this.ProficiencyDescriptor != null &&
                    this.ProficiencyDescriptor.Equals(input.ProficiencyDescriptor))
                ) && 
                (
                    this.ProgressDescriptor == input.ProgressDescriptor ||
                    (this.ProgressDescriptor != null &&
                    this.ProgressDescriptor.Equals(input.ProgressDescriptor))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MonitoredDescriptor != null)
                    hashCode = hashCode * 59 + this.MonitoredDescriptor.GetHashCode();
                if (this.ParticipationDescriptor != null)
                    hashCode = hashCode * 59 + this.ParticipationDescriptor.GetHashCode();
                if (this.ProficiencyDescriptor != null)
                    hashCode = hashCode * 59 + this.ProficiencyDescriptor.GetHashCode();
                if (this.ProgressDescriptor != null)
                    hashCode = hashCode * 59 + this.ProgressDescriptor.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                return hashCode;
            }
        }
    }

}
