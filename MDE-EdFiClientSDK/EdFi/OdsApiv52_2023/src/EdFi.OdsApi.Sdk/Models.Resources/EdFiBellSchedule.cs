/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiBellSchedule
    /// </summary>
    [DataContract]
    public partial class EdFiBellSchedule :  IEquatable<EdFiBellSchedule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiBellSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiBellSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiBellSchedule" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="bellScheduleName">Name or title of the BellSchedule. (required).</param>
        /// <param name="classPeriods">An unordered collection of bellScheduleClassPeriods. The class periods that compose this BellSchedule. (required).</param>
        /// <param name="schoolReference">schoolReference (required).</param>
        /// <param name="alternateDayName">An alternate name for the day (e.g., Red, Blue)..</param>
        /// <param name="dates">An unordered collection of bellScheduleDates. The dates for which the BellSchedule applies..</param>
        /// <param name="endTime">An indication of the time of day the bell schedule ends..</param>
        /// <param name="gradeLevels">An unordered collection of bellScheduleGradeLevels. The grade levels the particular BellSchedule applies to..</param>
        /// <param name="startTime">An indication of the time of day the bell schedule begins..</param>
        /// <param name="totalInstructionalTime">The total instructional time in minutes per day for the bell schedule..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiBellSchedule(string id = default(string), string bellScheduleName = default(string), List<EdFiBellScheduleClassPeriod> classPeriods = default(List<EdFiBellScheduleClassPeriod>), EdFiSchoolReference schoolReference = default(EdFiSchoolReference), string alternateDayName = default(string), List<EdFiBellScheduleDate> dates = default(List<EdFiBellScheduleDate>), string endTime = default(string), List<EdFiBellScheduleGradeLevel> gradeLevels = default(List<EdFiBellScheduleGradeLevel>), string startTime = default(string), int? totalInstructionalTime = default(int?), string etag = default(string))
        {
            // to ensure "bellScheduleName" is required (not null)
            if (bellScheduleName == null)
            {
                throw new InvalidDataException("bellScheduleName is a required property for EdFiBellSchedule and cannot be null");
            }
            else
            {
                this.BellScheduleName = bellScheduleName;
            }
            // to ensure "classPeriods" is required (not null)
            if (classPeriods == null)
            {
                throw new InvalidDataException("classPeriods is a required property for EdFiBellSchedule and cannot be null");
            }
            else
            {
                this.ClassPeriods = classPeriods;
            }
            // to ensure "schoolReference" is required (not null)
            if (schoolReference == null)
            {
                throw new InvalidDataException("schoolReference is a required property for EdFiBellSchedule and cannot be null");
            }
            else
            {
                this.SchoolReference = schoolReference;
            }
            this.Id = id;
            this.AlternateDayName = alternateDayName;
            this.Dates = dates;
            this.EndTime = endTime;
            this.GradeLevels = gradeLevels;
            this.StartTime = startTime;
            this.TotalInstructionalTime = totalInstructionalTime;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name or title of the BellSchedule.
        /// </summary>
        /// <value>Name or title of the BellSchedule.</value>
        [DataMember(Name="bellScheduleName", EmitDefaultValue=false)]
        public string BellScheduleName { get; set; }

        /// <summary>
        /// An unordered collection of bellScheduleClassPeriods. The class periods that compose this BellSchedule.
        /// </summary>
        /// <value>An unordered collection of bellScheduleClassPeriods. The class periods that compose this BellSchedule.</value>
        [DataMember(Name="classPeriods", EmitDefaultValue=false)]
        public List<EdFiBellScheduleClassPeriod> ClassPeriods { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name="schoolReference", EmitDefaultValue=false)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// An alternate name for the day (e.g., Red, Blue).
        /// </summary>
        /// <value>An alternate name for the day (e.g., Red, Blue).</value>
        [DataMember(Name="alternateDayName", EmitDefaultValue=false)]
        public string AlternateDayName { get; set; }

        /// <summary>
        /// An unordered collection of bellScheduleDates. The dates for which the BellSchedule applies.
        /// </summary>
        /// <value>An unordered collection of bellScheduleDates. The dates for which the BellSchedule applies.</value>
        [DataMember(Name="dates", EmitDefaultValue=false)]
        public List<EdFiBellScheduleDate> Dates { get; set; }

        /// <summary>
        /// An indication of the time of day the bell schedule ends.
        /// </summary>
        /// <value>An indication of the time of day the bell schedule ends.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// An unordered collection of bellScheduleGradeLevels. The grade levels the particular BellSchedule applies to.
        /// </summary>
        /// <value>An unordered collection of bellScheduleGradeLevels. The grade levels the particular BellSchedule applies to.</value>
        [DataMember(Name="gradeLevels", EmitDefaultValue=false)]
        public List<EdFiBellScheduleGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// An indication of the time of day the bell schedule begins.
        /// </summary>
        /// <value>An indication of the time of day the bell schedule begins.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// The total instructional time in minutes per day for the bell schedule.
        /// </summary>
        /// <value>The total instructional time in minutes per day for the bell schedule.</value>
        [DataMember(Name="totalInstructionalTime", EmitDefaultValue=false)]
        public int? TotalInstructionalTime { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiBellSchedule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BellScheduleName: ").Append(BellScheduleName).Append("\n");
            sb.Append("  ClassPeriods: ").Append(ClassPeriods).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  AlternateDayName: ").Append(AlternateDayName).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  TotalInstructionalTime: ").Append(TotalInstructionalTime).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiBellSchedule);
        }

        /// <summary>
        /// Returns true if EdFiBellSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiBellSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiBellSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BellScheduleName == input.BellScheduleName ||
                    (this.BellScheduleName != null &&
                    this.BellScheduleName.Equals(input.BellScheduleName))
                ) && 
                (
                    this.ClassPeriods == input.ClassPeriods ||
                    this.ClassPeriods != null &&
                    this.ClassPeriods.SequenceEqual(input.ClassPeriods)
                ) && 
                (
                    this.SchoolReference == input.SchoolReference ||
                    (this.SchoolReference != null &&
                    this.SchoolReference.Equals(input.SchoolReference))
                ) && 
                (
                    this.AlternateDayName == input.AlternateDayName ||
                    (this.AlternateDayName != null &&
                    this.AlternateDayName.Equals(input.AlternateDayName))
                ) && 
                (
                    this.Dates == input.Dates ||
                    this.Dates != null &&
                    this.Dates.SequenceEqual(input.Dates)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.TotalInstructionalTime == input.TotalInstructionalTime ||
                    (this.TotalInstructionalTime != null &&
                    this.TotalInstructionalTime.Equals(input.TotalInstructionalTime))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BellScheduleName != null)
                    hashCode = hashCode * 59 + this.BellScheduleName.GetHashCode();
                if (this.ClassPeriods != null)
                    hashCode = hashCode * 59 + this.ClassPeriods.GetHashCode();
                if (this.SchoolReference != null)
                    hashCode = hashCode * 59 + this.SchoolReference.GetHashCode();
                if (this.AlternateDayName != null)
                    hashCode = hashCode * 59 + this.AlternateDayName.GetHashCode();
                if (this.Dates != null)
                    hashCode = hashCode * 59 + this.Dates.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.TotalInstructionalTime != null)
                    hashCode = hashCode * 59 + this.TotalInstructionalTime.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
