/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiGradeLearningStandardGrade
    /// </summary>
    [DataContract]
    public partial class EdFiGradeLearningStandardGrade :  IEquatable<EdFiGradeLearningStandardGrade>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradeLearningStandardGrade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGradeLearningStandardGrade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradeLearningStandardGrade" /> class.
        /// </summary>
        /// <param name="performanceBaseConversionDescriptor">A performance level that describes the student proficiency..</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score..</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor..</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor..</param>
        /// <param name="learningStandardReference">learningStandardReference (required).</param>
        public EdFiGradeLearningStandardGrade(string performanceBaseConversionDescriptor = default(string), string diagnosticStatement = default(string), string letterGradeEarned = default(string), double? numericGradeEarned = default(double?), EdFiLearningStandardReference learningStandardReference = default(EdFiLearningStandardReference))
        {
            // to ensure "learningStandardReference" is required (not null)
            if (learningStandardReference == null)
            {
                throw new InvalidDataException("learningStandardReference is a required property for EdFiGradeLearningStandardGrade and cannot be null");
            }
            else
            {
                this.LearningStandardReference = learningStandardReference;
            }
            this.PerformanceBaseConversionDescriptor = performanceBaseConversionDescriptor;
            this.DiagnosticStatement = diagnosticStatement;
            this.LetterGradeEarned = letterGradeEarned;
            this.NumericGradeEarned = numericGradeEarned;
        }
        
        /// <summary>
        /// A performance level that describes the student proficiency.
        /// </summary>
        /// <value>A performance level that describes the student proficiency.</value>
        [DataMember(Name="performanceBaseConversionDescriptor", EmitDefaultValue=false)]
        public string PerformanceBaseConversionDescriptor { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [DataMember(Name="diagnosticStatement", EmitDefaultValue=false)]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor.</value>
        [DataMember(Name="letterGradeEarned", EmitDefaultValue=false)]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance for a learning standard as submitted by the instructor.</value>
        [DataMember(Name="numericGradeEarned", EmitDefaultValue=false)]
        public double? NumericGradeEarned { get; set; }

        /// <summary>
        /// Gets or Sets LearningStandardReference
        /// </summary>
        [DataMember(Name="learningStandardReference", EmitDefaultValue=false)]
        public EdFiLearningStandardReference LearningStandardReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiGradeLearningStandardGrade {\n");
            sb.Append("  PerformanceBaseConversionDescriptor: ").Append(PerformanceBaseConversionDescriptor).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  LearningStandardReference: ").Append(LearningStandardReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiGradeLearningStandardGrade);
        }

        /// <summary>
        /// Returns true if EdFiGradeLearningStandardGrade instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiGradeLearningStandardGrade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiGradeLearningStandardGrade input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PerformanceBaseConversionDescriptor == input.PerformanceBaseConversionDescriptor ||
                    (this.PerformanceBaseConversionDescriptor != null &&
                    this.PerformanceBaseConversionDescriptor.Equals(input.PerformanceBaseConversionDescriptor))
                ) && 
                (
                    this.DiagnosticStatement == input.DiagnosticStatement ||
                    (this.DiagnosticStatement != null &&
                    this.DiagnosticStatement.Equals(input.DiagnosticStatement))
                ) && 
                (
                    this.LetterGradeEarned == input.LetterGradeEarned ||
                    (this.LetterGradeEarned != null &&
                    this.LetterGradeEarned.Equals(input.LetterGradeEarned))
                ) && 
                (
                    this.NumericGradeEarned == input.NumericGradeEarned ||
                    (this.NumericGradeEarned != null &&
                    this.NumericGradeEarned.Equals(input.NumericGradeEarned))
                ) && 
                (
                    this.LearningStandardReference == input.LearningStandardReference ||
                    (this.LearningStandardReference != null &&
                    this.LearningStandardReference.Equals(input.LearningStandardReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PerformanceBaseConversionDescriptor != null)
                    hashCode = hashCode * 59 + this.PerformanceBaseConversionDescriptor.GetHashCode();
                if (this.DiagnosticStatement != null)
                    hashCode = hashCode * 59 + this.DiagnosticStatement.GetHashCode();
                if (this.LetterGradeEarned != null)
                    hashCode = hashCode * 59 + this.LetterGradeEarned.GetHashCode();
                if (this.NumericGradeEarned != null)
                    hashCode = hashCode * 59 + this.NumericGradeEarned.GetHashCode();
                if (this.LearningStandardReference != null)
                    hashCode = hashCode * 59 + this.LearningStandardReference.GetHashCode();
                return hashCode;
            }
        }
    }

}
