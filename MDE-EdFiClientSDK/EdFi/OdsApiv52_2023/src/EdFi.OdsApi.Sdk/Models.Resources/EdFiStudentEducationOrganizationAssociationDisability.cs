/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssociationDisability
    /// </summary>
    [DataContract]
    public partial class EdFiStudentEducationOrganizationAssociationDisability :  IEquatable<EdFiStudentEducationOrganizationAssociationDisability>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationDisability" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentEducationOrganizationAssociationDisability() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationDisability" /> class.
        /// </summary>
        /// <param name="disabilityDescriptor">A disability category that describes a child&#39;s impairment. (required).</param>
        /// <param name="disabilityDeterminationSourceTypeDescriptor">The source that provided the disability determination..</param>
        /// <param name="disabilityDiagnosis">A description of the disability diagnosis..</param>
        /// <param name="orderOfDisability">The order by severity of student&#39;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc..</param>
        /// <param name="designations">An unordered collection of studentEducationOrganizationAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation..</param>
        public EdFiStudentEducationOrganizationAssociationDisability(string disabilityDescriptor = default(string), string disabilityDeterminationSourceTypeDescriptor = default(string), string disabilityDiagnosis = default(string), int? orderOfDisability = default(int?), List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation> designations = default(List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation>))
        {
            // to ensure "disabilityDescriptor" is required (not null)
            if (disabilityDescriptor == null)
            {
                throw new InvalidDataException("disabilityDescriptor is a required property for EdFiStudentEducationOrganizationAssociationDisability and cannot be null");
            }
            else
            {
                this.DisabilityDescriptor = disabilityDescriptor;
            }
            this.DisabilityDeterminationSourceTypeDescriptor = disabilityDeterminationSourceTypeDescriptor;
            this.DisabilityDiagnosis = disabilityDiagnosis;
            this.OrderOfDisability = orderOfDisability;
            this.Designations = designations;
        }
        
        /// <summary>
        /// A disability category that describes a child&#39;s impairment.
        /// </summary>
        /// <value>A disability category that describes a child&#39;s impairment.</value>
        [DataMember(Name="disabilityDescriptor", EmitDefaultValue=false)]
        public string DisabilityDescriptor { get; set; }

        /// <summary>
        /// The source that provided the disability determination.
        /// </summary>
        /// <value>The source that provided the disability determination.</value>
        [DataMember(Name="disabilityDeterminationSourceTypeDescriptor", EmitDefaultValue=false)]
        public string DisabilityDeterminationSourceTypeDescriptor { get; set; }

        /// <summary>
        /// A description of the disability diagnosis.
        /// </summary>
        /// <value>A description of the disability diagnosis.</value>
        [DataMember(Name="disabilityDiagnosis", EmitDefaultValue=false)]
        public string DisabilityDiagnosis { get; set; }

        /// <summary>
        /// The order by severity of student&#39;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        /// </summary>
        /// <value>The order by severity of student&#39;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.</value>
        [DataMember(Name="orderOfDisability", EmitDefaultValue=false)]
        public int? OrderOfDisability { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation.</value>
        [DataMember(Name="designations", EmitDefaultValue=false)]
        public List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation> Designations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssociationDisability {\n");
            sb.Append("  DisabilityDescriptor: ").Append(DisabilityDescriptor).Append("\n");
            sb.Append("  DisabilityDeterminationSourceTypeDescriptor: ").Append(DisabilityDeterminationSourceTypeDescriptor).Append("\n");
            sb.Append("  DisabilityDiagnosis: ").Append(DisabilityDiagnosis).Append("\n");
            sb.Append("  OrderOfDisability: ").Append(OrderOfDisability).Append("\n");
            sb.Append("  Designations: ").Append(Designations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentEducationOrganizationAssociationDisability);
        }

        /// <summary>
        /// Returns true if EdFiStudentEducationOrganizationAssociationDisability instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentEducationOrganizationAssociationDisability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentEducationOrganizationAssociationDisability input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisabilityDescriptor == input.DisabilityDescriptor ||
                    (this.DisabilityDescriptor != null &&
                    this.DisabilityDescriptor.Equals(input.DisabilityDescriptor))
                ) && 
                (
                    this.DisabilityDeterminationSourceTypeDescriptor == input.DisabilityDeterminationSourceTypeDescriptor ||
                    (this.DisabilityDeterminationSourceTypeDescriptor != null &&
                    this.DisabilityDeterminationSourceTypeDescriptor.Equals(input.DisabilityDeterminationSourceTypeDescriptor))
                ) && 
                (
                    this.DisabilityDiagnosis == input.DisabilityDiagnosis ||
                    (this.DisabilityDiagnosis != null &&
                    this.DisabilityDiagnosis.Equals(input.DisabilityDiagnosis))
                ) && 
                (
                    this.OrderOfDisability == input.OrderOfDisability ||
                    (this.OrderOfDisability != null &&
                    this.OrderOfDisability.Equals(input.OrderOfDisability))
                ) && 
                (
                    this.Designations == input.Designations ||
                    this.Designations != null &&
                    this.Designations.SequenceEqual(input.Designations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisabilityDescriptor != null)
                    hashCode = hashCode * 59 + this.DisabilityDescriptor.GetHashCode();
                if (this.DisabilityDeterminationSourceTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.DisabilityDeterminationSourceTypeDescriptor.GetHashCode();
                if (this.DisabilityDiagnosis != null)
                    hashCode = hashCode * 59 + this.DisabilityDiagnosis.GetHashCode();
                if (this.OrderOfDisability != null)
                    hashCode = hashCode * 59 + this.OrderOfDisability.GetHashCode();
                if (this.Designations != null)
                    hashCode = hashCode * 59 + this.Designations.GetHashCode();
                return hashCode;
            }
        }
    }

}
