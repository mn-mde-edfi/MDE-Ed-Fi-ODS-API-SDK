/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiCompetencyObjective
    /// </summary>
    [DataContract]
    public partial class EdFiCompetencyObjective :  IEquatable<EdFiCompetencyObjective>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCompetencyObjective" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCompetencyObjective() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCompetencyObjective" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="objective">The designated title of the CompetencyObjective. (required).</param>
        /// <param name="objectiveGradeLevelDescriptor">The grade level for which the CompetencyObjective is targeted. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="competencyObjectiveId">The Identifier for the CompetencyObjective..</param>
        /// <param name="description">The description of the student competency objective..</param>
        /// <param name="successCriteria">One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiCompetencyObjective(string id = default(string), string objective = default(string), string objectiveGradeLevelDescriptor = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), string competencyObjectiveId = default(string), string description = default(string), string successCriteria = default(string), string etag = default(string))
        {
            // to ensure "objective" is required (not null)
            if (objective == null)
            {
                throw new InvalidDataException("objective is a required property for EdFiCompetencyObjective and cannot be null");
            }
            else
            {
                this.Objective = objective;
            }
            // to ensure "objectiveGradeLevelDescriptor" is required (not null)
            if (objectiveGradeLevelDescriptor == null)
            {
                throw new InvalidDataException("objectiveGradeLevelDescriptor is a required property for EdFiCompetencyObjective and cannot be null");
            }
            else
            {
                this.ObjectiveGradeLevelDescriptor = objectiveGradeLevelDescriptor;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for EdFiCompetencyObjective and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            this.Id = id;
            this.CompetencyObjectiveId = competencyObjectiveId;
            this.Description = description;
            this.SuccessCriteria = successCriteria;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The designated title of the CompetencyObjective.
        /// </summary>
        /// <value>The designated title of the CompetencyObjective.</value>
        [DataMember(Name="objective", EmitDefaultValue=false)]
        public string Objective { get; set; }

        /// <summary>
        /// The grade level for which the CompetencyObjective is targeted.
        /// </summary>
        /// <value>The grade level for which the CompetencyObjective is targeted.</value>
        [DataMember(Name="objectiveGradeLevelDescriptor", EmitDefaultValue=false)]
        public string ObjectiveGradeLevelDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The Identifier for the CompetencyObjective.
        /// </summary>
        /// <value>The Identifier for the CompetencyObjective.</value>
        [DataMember(Name="competencyObjectiveId", EmitDefaultValue=false)]
        public string CompetencyObjectiveId { get; set; }

        /// <summary>
        /// The description of the student competency objective.
        /// </summary>
        /// <value>The description of the student competency objective.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.
        /// </summary>
        /// <value>One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.</value>
        [DataMember(Name="successCriteria", EmitDefaultValue=false)]
        public string SuccessCriteria { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiCompetencyObjective {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  ObjectiveGradeLevelDescriptor: ").Append(ObjectiveGradeLevelDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  CompetencyObjectiveId: ").Append(CompetencyObjectiveId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SuccessCriteria: ").Append(SuccessCriteria).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiCompetencyObjective);
        }

        /// <summary>
        /// Returns true if EdFiCompetencyObjective instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiCompetencyObjective to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiCompetencyObjective input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Objective == input.Objective ||
                    (this.Objective != null &&
                    this.Objective.Equals(input.Objective))
                ) && 
                (
                    this.ObjectiveGradeLevelDescriptor == input.ObjectiveGradeLevelDescriptor ||
                    (this.ObjectiveGradeLevelDescriptor != null &&
                    this.ObjectiveGradeLevelDescriptor.Equals(input.ObjectiveGradeLevelDescriptor))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.CompetencyObjectiveId == input.CompetencyObjectiveId ||
                    (this.CompetencyObjectiveId != null &&
                    this.CompetencyObjectiveId.Equals(input.CompetencyObjectiveId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SuccessCriteria == input.SuccessCriteria ||
                    (this.SuccessCriteria != null &&
                    this.SuccessCriteria.Equals(input.SuccessCriteria))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Objective != null)
                    hashCode = hashCode * 59 + this.Objective.GetHashCode();
                if (this.ObjectiveGradeLevelDescriptor != null)
                    hashCode = hashCode * 59 + this.ObjectiveGradeLevelDescriptor.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.CompetencyObjectiveId != null)
                    hashCode = hashCode * 59 + this.CompetencyObjectiveId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SuccessCriteria != null)
                    hashCode = hashCode * 59 + this.SuccessCriteria.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
