/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiGradebookEntry
    /// </summary>
    [DataContract]
    public partial class EdFiGradebookEntry :  IEquatable<EdFiGradebookEntry>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradebookEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGradebookEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradebookEntry" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (required).</param>
        /// <param name="gradebookEntryTitle">The name or title of the activity to be recorded in the GradebookEntry. (required).</param>
        /// <param name="gradingPeriodReference">gradingPeriodReference.</param>
        /// <param name="sectionReference">sectionReference (required).</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment..</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due..</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc..</param>
        /// <param name="learningObjectives">An unordered collection of gradebookEntryLearningObjectives. LearningObjectives associated with the GradebookEntry..</param>
        /// <param name="learningStandards">An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the GradebookEntry..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiGradebookEntry(string id = default(string), DateTime? dateAssigned = default(DateTime?), string gradebookEntryTitle = default(string), EdFiGradingPeriodReference gradingPeriodReference = default(EdFiGradingPeriodReference), EdFiSectionReference sectionReference = default(EdFiSectionReference), string description = default(string), DateTime? dueDate = default(DateTime?), string gradebookEntryTypeDescriptor = default(string), List<EdFiGradebookEntryLearningObjective> learningObjectives = default(List<EdFiGradebookEntryLearningObjective>), List<EdFiGradebookEntryLearningStandard> learningStandards = default(List<EdFiGradebookEntryLearningStandard>), string etag = default(string))
        {
            // to ensure "dateAssigned" is required (not null)
            if (dateAssigned == null)
            {
                throw new InvalidDataException("dateAssigned is a required property for EdFiGradebookEntry and cannot be null");
            }
            else
            {
                this.DateAssigned = dateAssigned;
            }
            // to ensure "gradebookEntryTitle" is required (not null)
            if (gradebookEntryTitle == null)
            {
                throw new InvalidDataException("gradebookEntryTitle is a required property for EdFiGradebookEntry and cannot be null");
            }
            else
            {
                this.GradebookEntryTitle = gradebookEntryTitle;
            }
            // to ensure "sectionReference" is required (not null)
            if (sectionReference == null)
            {
                throw new InvalidDataException("sectionReference is a required property for EdFiGradebookEntry and cannot be null");
            }
            else
            {
                this.SectionReference = sectionReference;
            }
            this.Id = id;
            this.GradingPeriodReference = gradingPeriodReference;
            this.Description = description;
            this.DueDate = dueDate;
            this.GradebookEntryTypeDescriptor = gradebookEntryTypeDescriptor;
            this.LearningObjectives = learningObjectives;
            this.LearningStandards = learningStandards;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        /// </summary>
        /// <value>The date the assignment, homework, or assessment was assigned or executed.</value>
        [DataMember(Name="dateAssigned", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateAssigned { get; set; }

        /// <summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        /// </summary>
        /// <value>The name or title of the activity to be recorded in the GradebookEntry.</value>
        [DataMember(Name="gradebookEntryTitle", EmitDefaultValue=false)]
        public string GradebookEntryTitle { get; set; }

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [DataMember(Name="gradingPeriodReference", EmitDefaultValue=false)]
        public EdFiGradingPeriodReference GradingPeriodReference { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [DataMember(Name="sectionReference", EmitDefaultValue=false)]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// A description of the assignment, homework, or classroom assessment.
        /// </summary>
        /// <value>A description of the assignment, homework, or classroom assessment.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The date the assignment, homework, or assessment is due.
        /// </summary>
        /// <value>The date the assignment, homework, or assessment is due.</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.
        /// </summary>
        /// <value>The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.</value>
        [DataMember(Name="gradebookEntryTypeDescriptor", EmitDefaultValue=false)]
        public string GradebookEntryTypeDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of gradebookEntryLearningObjectives. LearningObjectives associated with the GradebookEntry.
        /// </summary>
        /// <value>An unordered collection of gradebookEntryLearningObjectives. LearningObjectives associated with the GradebookEntry.</value>
        [DataMember(Name="learningObjectives", EmitDefaultValue=false)]
        public List<EdFiGradebookEntryLearningObjective> LearningObjectives { get; set; }

        /// <summary>
        /// An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the GradebookEntry.
        /// </summary>
        /// <value>An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the GradebookEntry.</value>
        [DataMember(Name="learningStandards", EmitDefaultValue=false)]
        public List<EdFiGradebookEntryLearningStandard> LearningStandards { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiGradebookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateAssigned: ").Append(DateAssigned).Append("\n");
            sb.Append("  GradebookEntryTitle: ").Append(GradebookEntryTitle).Append("\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  GradebookEntryTypeDescriptor: ").Append(GradebookEntryTypeDescriptor).Append("\n");
            sb.Append("  LearningObjectives: ").Append(LearningObjectives).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiGradebookEntry);
        }

        /// <summary>
        /// Returns true if EdFiGradebookEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiGradebookEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiGradebookEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DateAssigned == input.DateAssigned ||
                    (this.DateAssigned != null &&
                    this.DateAssigned.Equals(input.DateAssigned))
                ) && 
                (
                    this.GradebookEntryTitle == input.GradebookEntryTitle ||
                    (this.GradebookEntryTitle != null &&
                    this.GradebookEntryTitle.Equals(input.GradebookEntryTitle))
                ) && 
                (
                    this.GradingPeriodReference == input.GradingPeriodReference ||
                    (this.GradingPeriodReference != null &&
                    this.GradingPeriodReference.Equals(input.GradingPeriodReference))
                ) && 
                (
                    this.SectionReference == input.SectionReference ||
                    (this.SectionReference != null &&
                    this.SectionReference.Equals(input.SectionReference))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.GradebookEntryTypeDescriptor == input.GradebookEntryTypeDescriptor ||
                    (this.GradebookEntryTypeDescriptor != null &&
                    this.GradebookEntryTypeDescriptor.Equals(input.GradebookEntryTypeDescriptor))
                ) && 
                (
                    this.LearningObjectives == input.LearningObjectives ||
                    this.LearningObjectives != null &&
                    this.LearningObjectives.SequenceEqual(input.LearningObjectives)
                ) && 
                (
                    this.LearningStandards == input.LearningStandards ||
                    this.LearningStandards != null &&
                    this.LearningStandards.SequenceEqual(input.LearningStandards)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DateAssigned != null)
                    hashCode = hashCode * 59 + this.DateAssigned.GetHashCode();
                if (this.GradebookEntryTitle != null)
                    hashCode = hashCode * 59 + this.GradebookEntryTitle.GetHashCode();
                if (this.GradingPeriodReference != null)
                    hashCode = hashCode * 59 + this.GradingPeriodReference.GetHashCode();
                if (this.SectionReference != null)
                    hashCode = hashCode * 59 + this.SectionReference.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.GradebookEntryTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.GradebookEntryTypeDescriptor.GetHashCode();
                if (this.LearningObjectives != null)
                    hashCode = hashCode * 59 + this.LearningObjectives.GetHashCode();
                if (this.LearningStandards != null)
                    hashCode = hashCode * 59 + this.LearningStandards.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
