/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiCohort
    /// </summary>
    [DataContract]
    public partial class EdFiCohort :  IEquatable<EdFiCohort>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCohort" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCohort() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCohort" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="cohortIdentifier">The name or ID for the Cohort. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="academicSubjectDescriptor">The academic subject associated with an academic intervention..</param>
        /// <param name="cohortDescription">The description of the Cohort and its purpose..</param>
        /// <param name="cohortScopeDescriptor">The scope of cohort (e.g., school, district, classroom)..</param>
        /// <param name="cohortTypeDescriptor">The type of cohort (e.g., academic intervention, classroom breakout). (required).</param>
        /// <param name="programs">An unordered collection of cohortPrograms. The (optional) program associated with this Cohort (e.g., special education)..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiCohort(string id = default(string), string cohortIdentifier = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), string academicSubjectDescriptor = default(string), string cohortDescription = default(string), string cohortScopeDescriptor = default(string), string cohortTypeDescriptor = default(string), List<EdFiCohortProgram> programs = default(List<EdFiCohortProgram>), string etag = default(string))
        {
            // to ensure "cohortIdentifier" is required (not null)
            if (cohortIdentifier == null)
            {
                throw new InvalidDataException("cohortIdentifier is a required property for EdFiCohort and cannot be null");
            }
            else
            {
                this.CohortIdentifier = cohortIdentifier;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for EdFiCohort and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "cohortTypeDescriptor" is required (not null)
            if (cohortTypeDescriptor == null)
            {
                throw new InvalidDataException("cohortTypeDescriptor is a required property for EdFiCohort and cannot be null");
            }
            else
            {
                this.CohortTypeDescriptor = cohortTypeDescriptor;
            }
            this.Id = id;
            this.AcademicSubjectDescriptor = academicSubjectDescriptor;
            this.CohortDescription = cohortDescription;
            this.CohortScopeDescriptor = cohortScopeDescriptor;
            this.Programs = programs;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name or ID for the Cohort.
        /// </summary>
        /// <value>The name or ID for the Cohort.</value>
        [DataMember(Name="cohortIdentifier", EmitDefaultValue=false)]
        public string CohortIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The academic subject associated with an academic intervention.
        /// </summary>
        /// <value>The academic subject associated with an academic intervention.</value>
        [DataMember(Name="academicSubjectDescriptor", EmitDefaultValue=false)]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The description of the Cohort and its purpose.
        /// </summary>
        /// <value>The description of the Cohort and its purpose.</value>
        [DataMember(Name="cohortDescription", EmitDefaultValue=false)]
        public string CohortDescription { get; set; }

        /// <summary>
        /// The scope of cohort (e.g., school, district, classroom).
        /// </summary>
        /// <value>The scope of cohort (e.g., school, district, classroom).</value>
        [DataMember(Name="cohortScopeDescriptor", EmitDefaultValue=false)]
        public string CohortScopeDescriptor { get; set; }

        /// <summary>
        /// The type of cohort (e.g., academic intervention, classroom breakout).
        /// </summary>
        /// <value>The type of cohort (e.g., academic intervention, classroom breakout).</value>
        [DataMember(Name="cohortTypeDescriptor", EmitDefaultValue=false)]
        public string CohortTypeDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of cohortPrograms. The (optional) program associated with this Cohort (e.g., special education).
        /// </summary>
        /// <value>An unordered collection of cohortPrograms. The (optional) program associated with this Cohort (e.g., special education).</value>
        [DataMember(Name="programs", EmitDefaultValue=false)]
        public List<EdFiCohortProgram> Programs { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiCohort {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CohortIdentifier: ").Append(CohortIdentifier).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  CohortDescription: ").Append(CohortDescription).Append("\n");
            sb.Append("  CohortScopeDescriptor: ").Append(CohortScopeDescriptor).Append("\n");
            sb.Append("  CohortTypeDescriptor: ").Append(CohortTypeDescriptor).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiCohort);
        }

        /// <summary>
        /// Returns true if EdFiCohort instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiCohort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiCohort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CohortIdentifier == input.CohortIdentifier ||
                    (this.CohortIdentifier != null &&
                    this.CohortIdentifier.Equals(input.CohortIdentifier))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.AcademicSubjectDescriptor == input.AcademicSubjectDescriptor ||
                    (this.AcademicSubjectDescriptor != null &&
                    this.AcademicSubjectDescriptor.Equals(input.AcademicSubjectDescriptor))
                ) && 
                (
                    this.CohortDescription == input.CohortDescription ||
                    (this.CohortDescription != null &&
                    this.CohortDescription.Equals(input.CohortDescription))
                ) && 
                (
                    this.CohortScopeDescriptor == input.CohortScopeDescriptor ||
                    (this.CohortScopeDescriptor != null &&
                    this.CohortScopeDescriptor.Equals(input.CohortScopeDescriptor))
                ) && 
                (
                    this.CohortTypeDescriptor == input.CohortTypeDescriptor ||
                    (this.CohortTypeDescriptor != null &&
                    this.CohortTypeDescriptor.Equals(input.CohortTypeDescriptor))
                ) && 
                (
                    this.Programs == input.Programs ||
                    this.Programs != null &&
                    this.Programs.SequenceEqual(input.Programs)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CohortIdentifier != null)
                    hashCode = hashCode * 59 + this.CohortIdentifier.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.AcademicSubjectDescriptor != null)
                    hashCode = hashCode * 59 + this.AcademicSubjectDescriptor.GetHashCode();
                if (this.CohortDescription != null)
                    hashCode = hashCode * 59 + this.CohortDescription.GetHashCode();
                if (this.CohortScopeDescriptor != null)
                    hashCode = hashCode * 59 + this.CohortScopeDescriptor.GetHashCode();
                if (this.CohortTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.CohortTypeDescriptor.GetHashCode();
                if (this.Programs != null)
                    hashCode = hashCode * 59 + this.Programs.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
