/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiSurveyResponse
    /// </summary>
    [DataContract]
    public partial class EdFiSurveyResponse :  IEquatable<EdFiSurveyResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="surveyResponseIdentifier">The identifier of the survey typically from the survey application. (required).</param>
        /// <param name="parentReference">parentReference.</param>
        /// <param name="staffReference">staffReference.</param>
        /// <param name="studentReference">studentReference.</param>
        /// <param name="surveyReference">surveyReference (required).</param>
        /// <param name="electronicMailAddress">Email address of the respondent..</param>
        /// <param name="fullName">Full name of the respondent..</param>
        /// <param name="location">Location of the respondent, often a city, district, or school..</param>
        /// <param name="responseDate">Date of the survey response. (required).</param>
        /// <param name="responseTime">The amount of time (in seconds) it took for the respondent to complete the survey..</param>
        /// <param name="surveyLevels">An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiSurveyResponse(string id = default(string), string surveyResponseIdentifier = default(string), EdFiParentReference parentReference = default(EdFiParentReference), EdFiStaffReference staffReference = default(EdFiStaffReference), EdFiStudentReference studentReference = default(EdFiStudentReference), EdFiSurveyReference surveyReference = default(EdFiSurveyReference), string electronicMailAddress = default(string), string fullName = default(string), string location = default(string), DateTime? responseDate = default(DateTime?), int? responseTime = default(int?), List<EdFiSurveyResponseSurveyLevel> surveyLevels = default(List<EdFiSurveyResponseSurveyLevel>), string etag = default(string))
        {
            // to ensure "surveyResponseIdentifier" is required (not null)
            if (surveyResponseIdentifier == null)
            {
                throw new InvalidDataException("surveyResponseIdentifier is a required property for EdFiSurveyResponse and cannot be null");
            }
            else
            {
                this.SurveyResponseIdentifier = surveyResponseIdentifier;
            }
            // to ensure "surveyReference" is required (not null)
            if (surveyReference == null)
            {
                throw new InvalidDataException("surveyReference is a required property for EdFiSurveyResponse and cannot be null");
            }
            else
            {
                this.SurveyReference = surveyReference;
            }
            // to ensure "responseDate" is required (not null)
            if (responseDate == null)
            {
                throw new InvalidDataException("responseDate is a required property for EdFiSurveyResponse and cannot be null");
            }
            else
            {
                this.ResponseDate = responseDate;
            }
            this.Id = id;
            this.ParentReference = parentReference;
            this.StaffReference = staffReference;
            this.StudentReference = studentReference;
            this.ElectronicMailAddress = electronicMailAddress;
            this.FullName = fullName;
            this.Location = location;
            this.ResponseTime = responseTime;
            this.SurveyLevels = surveyLevels;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        /// <value>The identifier of the survey typically from the survey application.</value>
        [DataMember(Name="surveyResponseIdentifier", EmitDefaultValue=false)]
        public string SurveyResponseIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ParentReference
        /// </summary>
        [DataMember(Name="parentReference", EmitDefaultValue=false)]
        public EdFiParentReference ParentReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name="staffReference", EmitDefaultValue=false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name="studentReference", EmitDefaultValue=false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Gets or Sets SurveyReference
        /// </summary>
        [DataMember(Name="surveyReference", EmitDefaultValue=false)]
        public EdFiSurveyReference SurveyReference { get; set; }

        /// <summary>
        /// Email address of the respondent.
        /// </summary>
        /// <value>Email address of the respondent.</value>
        [DataMember(Name="electronicMailAddress", EmitDefaultValue=false)]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// Full name of the respondent.
        /// </summary>
        /// <value>Full name of the respondent.</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Location of the respondent, often a city, district, or school.
        /// </summary>
        /// <value>Location of the respondent, often a city, district, or school.</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Date of the survey response.
        /// </summary>
        /// <value>Date of the survey response.</value>
        [DataMember(Name="responseDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ResponseDate { get; set; }

        /// <summary>
        /// The amount of time (in seconds) it took for the respondent to complete the survey.
        /// </summary>
        /// <value>The amount of time (in seconds) it took for the respondent to complete the survey.</value>
        [DataMember(Name="responseTime", EmitDefaultValue=false)]
        public int? ResponseTime { get; set; }

        /// <summary>
        /// An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together.
        /// </summary>
        /// <value>An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together.</value>
        [DataMember(Name="surveyLevels", EmitDefaultValue=false)]
        public List<EdFiSurveyResponseSurveyLevel> SurveyLevels { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiSurveyResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SurveyResponseIdentifier: ").Append(SurveyResponseIdentifier).Append("\n");
            sb.Append("  ParentReference: ").Append(ParentReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  SurveyReference: ").Append(SurveyReference).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ResponseDate: ").Append(ResponseDate).Append("\n");
            sb.Append("  ResponseTime: ").Append(ResponseTime).Append("\n");
            sb.Append("  SurveyLevels: ").Append(SurveyLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiSurveyResponse);
        }

        /// <summary>
        /// Returns true if EdFiSurveyResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiSurveyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiSurveyResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SurveyResponseIdentifier == input.SurveyResponseIdentifier ||
                    (this.SurveyResponseIdentifier != null &&
                    this.SurveyResponseIdentifier.Equals(input.SurveyResponseIdentifier))
                ) && 
                (
                    this.ParentReference == input.ParentReference ||
                    (this.ParentReference != null &&
                    this.ParentReference.Equals(input.ParentReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.SurveyReference == input.SurveyReference ||
                    (this.SurveyReference != null &&
                    this.SurveyReference.Equals(input.SurveyReference))
                ) && 
                (
                    this.ElectronicMailAddress == input.ElectronicMailAddress ||
                    (this.ElectronicMailAddress != null &&
                    this.ElectronicMailAddress.Equals(input.ElectronicMailAddress))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.ResponseDate == input.ResponseDate ||
                    (this.ResponseDate != null &&
                    this.ResponseDate.Equals(input.ResponseDate))
                ) && 
                (
                    this.ResponseTime == input.ResponseTime ||
                    (this.ResponseTime != null &&
                    this.ResponseTime.Equals(input.ResponseTime))
                ) && 
                (
                    this.SurveyLevels == input.SurveyLevels ||
                    this.SurveyLevels != null &&
                    this.SurveyLevels.SequenceEqual(input.SurveyLevels)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SurveyResponseIdentifier != null)
                    hashCode = hashCode * 59 + this.SurveyResponseIdentifier.GetHashCode();
                if (this.ParentReference != null)
                    hashCode = hashCode * 59 + this.ParentReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.StudentReference != null)
                    hashCode = hashCode * 59 + this.StudentReference.GetHashCode();
                if (this.SurveyReference != null)
                    hashCode = hashCode * 59 + this.SurveyReference.GetHashCode();
                if (this.ElectronicMailAddress != null)
                    hashCode = hashCode * 59 + this.ElectronicMailAddress.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.ResponseDate != null)
                    hashCode = hashCode * 59 + this.ResponseDate.GetHashCode();
                if (this.ResponseTime != null)
                    hashCode = hashCode * 59 + this.ResponseTime.GetHashCode();
                if (this.SurveyLevels != null)
                    hashCode = hashCode * 59 + this.SurveyLevels.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
