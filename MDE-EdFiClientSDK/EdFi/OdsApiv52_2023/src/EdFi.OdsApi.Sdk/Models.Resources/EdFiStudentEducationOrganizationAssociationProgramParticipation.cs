/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssociationProgramParticipation
    /// </summary>
    [DataContract]
    public partial class EdFiStudentEducationOrganizationAssociationProgramParticipation :  IEquatable<EdFiStudentEducationOrganizationAssociationProgramParticipation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationProgramParticipation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentEducationOrganizationAssociationProgramParticipation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationProgramParticipation" /> class.
        /// </summary>
        /// <param name="programTypeDescriptor">The type of program. (required).</param>
        /// <param name="beginDate">The date the Student was associated with the Program or service..</param>
        /// <param name="designatedBy">The person, organization, or department that designated the program association..</param>
        /// <param name="endDate">The date the Program participation ended..</param>
        /// <param name="programCharacteristics">An unordered collection of studentEducationOrganizationAssociationProgramParticipationProgramCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications..</param>
        public EdFiStudentEducationOrganizationAssociationProgramParticipation(string programTypeDescriptor = default(string), DateTime? beginDate = default(DateTime?), string designatedBy = default(string), DateTime? endDate = default(DateTime?), List<EdFiStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> programCharacteristics = default(List<EdFiStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic>))
        {
            // to ensure "programTypeDescriptor" is required (not null)
            if (programTypeDescriptor == null)
            {
                throw new InvalidDataException("programTypeDescriptor is a required property for EdFiStudentEducationOrganizationAssociationProgramParticipation and cannot be null");
            }
            else
            {
                this.ProgramTypeDescriptor = programTypeDescriptor;
            }
            this.BeginDate = beginDate;
            this.DesignatedBy = designatedBy;
            this.EndDate = endDate;
            this.ProgramCharacteristics = programCharacteristics;
        }
        
        /// <summary>
        /// The type of program.
        /// </summary>
        /// <value>The type of program.</value>
        [DataMember(Name="programTypeDescriptor", EmitDefaultValue=false)]
        public string ProgramTypeDescriptor { get; set; }

        /// <summary>
        /// The date the Student was associated with the Program or service.
        /// </summary>
        /// <value>The date the Student was associated with the Program or service.</value>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The person, organization, or department that designated the program association.
        /// </summary>
        /// <value>The person, organization, or department that designated the program association.</value>
        [DataMember(Name="designatedBy", EmitDefaultValue=false)]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The date the Program participation ended.
        /// </summary>
        /// <value>The date the Program participation ended.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationProgramParticipationProgramCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationProgramParticipationProgramCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications.</value>
        [DataMember(Name="programCharacteristics", EmitDefaultValue=false)]
        public List<EdFiStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> ProgramCharacteristics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssociationProgramParticipation {\n");
            sb.Append("  ProgramTypeDescriptor: ").Append(ProgramTypeDescriptor).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  DesignatedBy: ").Append(DesignatedBy).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ProgramCharacteristics: ").Append(ProgramCharacteristics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentEducationOrganizationAssociationProgramParticipation);
        }

        /// <summary>
        /// Returns true if EdFiStudentEducationOrganizationAssociationProgramParticipation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentEducationOrganizationAssociationProgramParticipation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentEducationOrganizationAssociationProgramParticipation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProgramTypeDescriptor == input.ProgramTypeDescriptor ||
                    (this.ProgramTypeDescriptor != null &&
                    this.ProgramTypeDescriptor.Equals(input.ProgramTypeDescriptor))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.DesignatedBy == input.DesignatedBy ||
                    (this.DesignatedBy != null &&
                    this.DesignatedBy.Equals(input.DesignatedBy))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ProgramCharacteristics == input.ProgramCharacteristics ||
                    this.ProgramCharacteristics != null &&
                    this.ProgramCharacteristics.SequenceEqual(input.ProgramCharacteristics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProgramTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.ProgramTypeDescriptor.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.DesignatedBy != null)
                    hashCode = hashCode * 59 + this.DesignatedBy.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ProgramCharacteristics != null)
                    hashCode = hashCode * 59 + this.ProgramCharacteristics.GetHashCode();
                return hashCode;
            }
        }
    }

}
