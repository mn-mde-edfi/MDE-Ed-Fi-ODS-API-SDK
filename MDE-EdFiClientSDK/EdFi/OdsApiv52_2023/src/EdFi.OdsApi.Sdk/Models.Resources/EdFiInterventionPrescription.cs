/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiInterventionPrescription
    /// </summary>
    [DataContract]
    public partial class EdFiInterventionPrescription :  IEquatable<EdFiInterventionPrescription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiInterventionPrescription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiInterventionPrescription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiInterventionPrescription" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="interventionPrescriptionIdentificationCode">A unique number or alphanumeric code assigned to an intervention prescription. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="appropriateGradeLevels">An unordered collection of interventionPrescriptionAppropriateGradeLevels. Grade levels for the prescribed intervention. If omitted, considered generally applicable..</param>
        /// <param name="appropriateSexes">An unordered collection of interventionPrescriptionAppropriateSexes. Sexes for the InterventionPrescription. If omitted, considered generally applicable..</param>
        /// <param name="deliveryMethodDescriptor">The way in which an intervention was implemented: individual, small group, whole class, or whole school. (required).</param>
        /// <param name="diagnoses">An unordered collection of interventionPrescriptionDiagnoses. Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk)..</param>
        /// <param name="educationContents">An unordered collection of interventionPrescriptionEducationContents. Relates the education content source to the education content..</param>
        /// <param name="interventionClassDescriptor">The way in which an intervention is used: curriculum, supplement, or practice. (required).</param>
        /// <param name="learningResourceMetadataURIs">An unordered collection of interventionPrescriptionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item..</param>
        /// <param name="maxDosage">The maximum duration of time in minutes that is recommended for the intervention..</param>
        /// <param name="minDosage">The minimum duration of time in minutes that is recommended for the intervention..</param>
        /// <param name="populationServeds">An unordered collection of interventionPrescriptionPopulationServeds. A subset of students that are the focus of the InterventionPrescription..</param>
        /// <param name="uris">An unordered collection of interventionPrescriptionURIs. The URI (typical a URL) pointing to an education content item..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiInterventionPrescription(string id = default(string), string interventionPrescriptionIdentificationCode = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), List<EdFiInterventionPrescriptionAppropriateGradeLevel> appropriateGradeLevels = default(List<EdFiInterventionPrescriptionAppropriateGradeLevel>), List<EdFiInterventionPrescriptionAppropriateSex> appropriateSexes = default(List<EdFiInterventionPrescriptionAppropriateSex>), string deliveryMethodDescriptor = default(string), List<EdFiInterventionPrescriptionDiagnosis> diagnoses = default(List<EdFiInterventionPrescriptionDiagnosis>), List<EdFiInterventionPrescriptionEducationContent> educationContents = default(List<EdFiInterventionPrescriptionEducationContent>), string interventionClassDescriptor = default(string), List<EdFiInterventionPrescriptionLearningResourceMetadataURI> learningResourceMetadataURIs = default(List<EdFiInterventionPrescriptionLearningResourceMetadataURI>), int? maxDosage = default(int?), int? minDosage = default(int?), List<EdFiInterventionPrescriptionPopulationServed> populationServeds = default(List<EdFiInterventionPrescriptionPopulationServed>), List<EdFiInterventionPrescriptionURI> uris = default(List<EdFiInterventionPrescriptionURI>), string etag = default(string))
        {
            // to ensure "interventionPrescriptionIdentificationCode" is required (not null)
            if (interventionPrescriptionIdentificationCode == null)
            {
                throw new InvalidDataException("interventionPrescriptionIdentificationCode is a required property for EdFiInterventionPrescription and cannot be null");
            }
            else
            {
                this.InterventionPrescriptionIdentificationCode = interventionPrescriptionIdentificationCode;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for EdFiInterventionPrescription and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "deliveryMethodDescriptor" is required (not null)
            if (deliveryMethodDescriptor == null)
            {
                throw new InvalidDataException("deliveryMethodDescriptor is a required property for EdFiInterventionPrescription and cannot be null");
            }
            else
            {
                this.DeliveryMethodDescriptor = deliveryMethodDescriptor;
            }
            // to ensure "interventionClassDescriptor" is required (not null)
            if (interventionClassDescriptor == null)
            {
                throw new InvalidDataException("interventionClassDescriptor is a required property for EdFiInterventionPrescription and cannot be null");
            }
            else
            {
                this.InterventionClassDescriptor = interventionClassDescriptor;
            }
            this.Id = id;
            this.AppropriateGradeLevels = appropriateGradeLevels;
            this.AppropriateSexes = appropriateSexes;
            this.Diagnoses = diagnoses;
            this.EducationContents = educationContents;
            this.LearningResourceMetadataURIs = learningResourceMetadataURIs;
            this.MaxDosage = maxDosage;
            this.MinDosage = minDosage;
            this.PopulationServeds = populationServeds;
            this.Uris = uris;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an intervention prescription.</value>
        [DataMember(Name="interventionPrescriptionIdentificationCode", EmitDefaultValue=false)]
        public string InterventionPrescriptionIdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionAppropriateGradeLevels. Grade levels for the prescribed intervention. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionAppropriateGradeLevels. Grade levels for the prescribed intervention. If omitted, considered generally applicable.</value>
        [DataMember(Name="appropriateGradeLevels", EmitDefaultValue=false)]
        public List<EdFiInterventionPrescriptionAppropriateGradeLevel> AppropriateGradeLevels { get; set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionAppropriateSexes. Sexes for the InterventionPrescription. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionAppropriateSexes. Sexes for the InterventionPrescription. If omitted, considered generally applicable.</value>
        [DataMember(Name="appropriateSexes", EmitDefaultValue=false)]
        public List<EdFiInterventionPrescriptionAppropriateSex> AppropriateSexes { get; set; }

        /// <summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        /// </summary>
        /// <value>The way in which an intervention was implemented: individual, small group, whole class, or whole school.</value>
        [DataMember(Name="deliveryMethodDescriptor", EmitDefaultValue=false)]
        public string DeliveryMethodDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionDiagnoses. Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionDiagnoses. Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).</value>
        [DataMember(Name="diagnoses", EmitDefaultValue=false)]
        public List<EdFiInterventionPrescriptionDiagnosis> Diagnoses { get; set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionEducationContents. Relates the education content source to the education content.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionEducationContents. Relates the education content source to the education content.</value>
        [DataMember(Name="educationContents", EmitDefaultValue=false)]
        public List<EdFiInterventionPrescriptionEducationContent> EducationContents { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        /// <value>The way in which an intervention is used: curriculum, supplement, or practice.</value>
        [DataMember(Name="interventionClassDescriptor", EmitDefaultValue=false)]
        public string InterventionClassDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</value>
        [DataMember(Name="learningResourceMetadataURIs", EmitDefaultValue=false)]
        public List<EdFiInterventionPrescriptionLearningResourceMetadataURI> LearningResourceMetadataURIs { get; set; }

        /// <summary>
        /// The maximum duration of time in minutes that is recommended for the intervention.
        /// </summary>
        /// <value>The maximum duration of time in minutes that is recommended for the intervention.</value>
        [DataMember(Name="maxDosage", EmitDefaultValue=false)]
        public int? MaxDosage { get; set; }

        /// <summary>
        /// The minimum duration of time in minutes that is recommended for the intervention.
        /// </summary>
        /// <value>The minimum duration of time in minutes that is recommended for the intervention.</value>
        [DataMember(Name="minDosage", EmitDefaultValue=false)]
        public int? MinDosage { get; set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionPopulationServeds. A subset of students that are the focus of the InterventionPrescription.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionPopulationServeds. A subset of students that are the focus of the InterventionPrescription.</value>
        [DataMember(Name="populationServeds", EmitDefaultValue=false)]
        public List<EdFiInterventionPrescriptionPopulationServed> PopulationServeds { get; set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionURIs. The URI (typical a URL) pointing to an education content item.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionURIs. The URI (typical a URL) pointing to an education content item.</value>
        [DataMember(Name="uris", EmitDefaultValue=false)]
        public List<EdFiInterventionPrescriptionURI> Uris { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiInterventionPrescription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InterventionPrescriptionIdentificationCode: ").Append(InterventionPrescriptionIdentificationCode).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AppropriateGradeLevels: ").Append(AppropriateGradeLevels).Append("\n");
            sb.Append("  AppropriateSexes: ").Append(AppropriateSexes).Append("\n");
            sb.Append("  DeliveryMethodDescriptor: ").Append(DeliveryMethodDescriptor).Append("\n");
            sb.Append("  Diagnoses: ").Append(Diagnoses).Append("\n");
            sb.Append("  EducationContents: ").Append(EducationContents).Append("\n");
            sb.Append("  InterventionClassDescriptor: ").Append(InterventionClassDescriptor).Append("\n");
            sb.Append("  LearningResourceMetadataURIs: ").Append(LearningResourceMetadataURIs).Append("\n");
            sb.Append("  MaxDosage: ").Append(MaxDosage).Append("\n");
            sb.Append("  MinDosage: ").Append(MinDosage).Append("\n");
            sb.Append("  PopulationServeds: ").Append(PopulationServeds).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiInterventionPrescription);
        }

        /// <summary>
        /// Returns true if EdFiInterventionPrescription instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiInterventionPrescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiInterventionPrescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InterventionPrescriptionIdentificationCode == input.InterventionPrescriptionIdentificationCode ||
                    (this.InterventionPrescriptionIdentificationCode != null &&
                    this.InterventionPrescriptionIdentificationCode.Equals(input.InterventionPrescriptionIdentificationCode))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.AppropriateGradeLevels == input.AppropriateGradeLevels ||
                    this.AppropriateGradeLevels != null &&
                    this.AppropriateGradeLevels.SequenceEqual(input.AppropriateGradeLevels)
                ) && 
                (
                    this.AppropriateSexes == input.AppropriateSexes ||
                    this.AppropriateSexes != null &&
                    this.AppropriateSexes.SequenceEqual(input.AppropriateSexes)
                ) && 
                (
                    this.DeliveryMethodDescriptor == input.DeliveryMethodDescriptor ||
                    (this.DeliveryMethodDescriptor != null &&
                    this.DeliveryMethodDescriptor.Equals(input.DeliveryMethodDescriptor))
                ) && 
                (
                    this.Diagnoses == input.Diagnoses ||
                    this.Diagnoses != null &&
                    this.Diagnoses.SequenceEqual(input.Diagnoses)
                ) && 
                (
                    this.EducationContents == input.EducationContents ||
                    this.EducationContents != null &&
                    this.EducationContents.SequenceEqual(input.EducationContents)
                ) && 
                (
                    this.InterventionClassDescriptor == input.InterventionClassDescriptor ||
                    (this.InterventionClassDescriptor != null &&
                    this.InterventionClassDescriptor.Equals(input.InterventionClassDescriptor))
                ) && 
                (
                    this.LearningResourceMetadataURIs == input.LearningResourceMetadataURIs ||
                    this.LearningResourceMetadataURIs != null &&
                    this.LearningResourceMetadataURIs.SequenceEqual(input.LearningResourceMetadataURIs)
                ) && 
                (
                    this.MaxDosage == input.MaxDosage ||
                    (this.MaxDosage != null &&
                    this.MaxDosage.Equals(input.MaxDosage))
                ) && 
                (
                    this.MinDosage == input.MinDosage ||
                    (this.MinDosage != null &&
                    this.MinDosage.Equals(input.MinDosage))
                ) && 
                (
                    this.PopulationServeds == input.PopulationServeds ||
                    this.PopulationServeds != null &&
                    this.PopulationServeds.SequenceEqual(input.PopulationServeds)
                ) && 
                (
                    this.Uris == input.Uris ||
                    this.Uris != null &&
                    this.Uris.SequenceEqual(input.Uris)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InterventionPrescriptionIdentificationCode != null)
                    hashCode = hashCode * 59 + this.InterventionPrescriptionIdentificationCode.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.AppropriateGradeLevels != null)
                    hashCode = hashCode * 59 + this.AppropriateGradeLevels.GetHashCode();
                if (this.AppropriateSexes != null)
                    hashCode = hashCode * 59 + this.AppropriateSexes.GetHashCode();
                if (this.DeliveryMethodDescriptor != null)
                    hashCode = hashCode * 59 + this.DeliveryMethodDescriptor.GetHashCode();
                if (this.Diagnoses != null)
                    hashCode = hashCode * 59 + this.Diagnoses.GetHashCode();
                if (this.EducationContents != null)
                    hashCode = hashCode * 59 + this.EducationContents.GetHashCode();
                if (this.InterventionClassDescriptor != null)
                    hashCode = hashCode * 59 + this.InterventionClassDescriptor.GetHashCode();
                if (this.LearningResourceMetadataURIs != null)
                    hashCode = hashCode * 59 + this.LearningResourceMetadataURIs.GetHashCode();
                if (this.MaxDosage != null)
                    hashCode = hashCode * 59 + this.MaxDosage.GetHashCode();
                if (this.MinDosage != null)
                    hashCode = hashCode * 59 + this.MinDosage.GetHashCode();
                if (this.PopulationServeds != null)
                    hashCode = hashCode * 59 + this.PopulationServeds.GetHashCode();
                if (this.Uris != null)
                    hashCode = hashCode * 59 + this.Uris.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
