/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStateEducationAgencyFederalFunds
    /// </summary>
    [DataContract]
    public partial class EdFiStateEducationAgencyFederalFunds :  IEquatable<EdFiStateEducationAgencyFederalFunds>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStateEducationAgencyFederalFunds" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStateEducationAgencyFederalFunds() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStateEducationAgencyFederalFunds" /> class.
        /// </summary>
        /// <param name="fiscalYear">The fiscal year for which the federal funds are received. (required).</param>
        /// <param name="federalProgramsFundingAllocation">The amount of federal dollars distributed to Local Education Agencies (LEAs), retained by the State Education Agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs)..</param>
        public EdFiStateEducationAgencyFederalFunds(int? fiscalYear = default(int?), double? federalProgramsFundingAllocation = default(double?))
        {
            // to ensure "fiscalYear" is required (not null)
            if (fiscalYear == null)
            {
                throw new InvalidDataException("fiscalYear is a required property for EdFiStateEducationAgencyFederalFunds and cannot be null");
            }
            else
            {
                this.FiscalYear = fiscalYear;
            }
            this.FederalProgramsFundingAllocation = federalProgramsFundingAllocation;
        }
        
        /// <summary>
        /// The fiscal year for which the federal funds are received.
        /// </summary>
        /// <value>The fiscal year for which the federal funds are received.</value>
        [DataMember(Name="fiscalYear", EmitDefaultValue=false)]
        public int? FiscalYear { get; set; }

        /// <summary>
        /// The amount of federal dollars distributed to Local Education Agencies (LEAs), retained by the State Education Agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs).
        /// </summary>
        /// <value>The amount of federal dollars distributed to Local Education Agencies (LEAs), retained by the State Education Agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs).</value>
        [DataMember(Name="federalProgramsFundingAllocation", EmitDefaultValue=false)]
        public double? FederalProgramsFundingAllocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStateEducationAgencyFederalFunds {\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  FederalProgramsFundingAllocation: ").Append(FederalProgramsFundingAllocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStateEducationAgencyFederalFunds);
        }

        /// <summary>
        /// Returns true if EdFiStateEducationAgencyFederalFunds instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStateEducationAgencyFederalFunds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStateEducationAgencyFederalFunds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FiscalYear == input.FiscalYear ||
                    (this.FiscalYear != null &&
                    this.FiscalYear.Equals(input.FiscalYear))
                ) && 
                (
                    this.FederalProgramsFundingAllocation == input.FederalProgramsFundingAllocation ||
                    (this.FederalProgramsFundingAllocation != null &&
                    this.FederalProgramsFundingAllocation.Equals(input.FederalProgramsFundingAllocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FiscalYear != null)
                    hashCode = hashCode * 59 + this.FiscalYear.GetHashCode();
                if (this.FederalProgramsFundingAllocation != null)
                    hashCode = hashCode * 59 + this.FederalProgramsFundingAllocation.GetHashCode();
                return hashCode;
            }
        }
    }

}
