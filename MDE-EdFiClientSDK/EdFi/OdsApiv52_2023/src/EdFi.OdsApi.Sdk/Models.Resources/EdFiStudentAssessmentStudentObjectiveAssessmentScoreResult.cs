/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult
    /// </summary>
    [DataContract]
    public partial class EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult :  IEquatable<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult" /> class.
        /// </summary>
        /// <param name="assessmentReportingMethodDescriptor">The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used. (required).</param>
        /// <param name="resultDatatypeTypeDescriptor">The datatype of the result. The results can be expressed as a number, percentile, range, level, etc. (required).</param>
        /// <param name="result">The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc. (required).</param>
        public EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult(string assessmentReportingMethodDescriptor = default(string), string resultDatatypeTypeDescriptor = default(string), string result = default(string))
        {
            // to ensure "assessmentReportingMethodDescriptor" is required (not null)
            if (assessmentReportingMethodDescriptor == null)
            {
                throw new InvalidDataException("assessmentReportingMethodDescriptor is a required property for EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult and cannot be null");
            }
            else
            {
                this.AssessmentReportingMethodDescriptor = assessmentReportingMethodDescriptor;
            }
            // to ensure "resultDatatypeTypeDescriptor" is required (not null)
            if (resultDatatypeTypeDescriptor == null)
            {
                throw new InvalidDataException("resultDatatypeTypeDescriptor is a required property for EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult and cannot be null");
            }
            else
            {
                this.ResultDatatypeTypeDescriptor = resultDatatypeTypeDescriptor;
            }
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new InvalidDataException("result is a required property for EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult and cannot be null");
            }
            else
            {
                this.Result = result;
            }
        }
        
        /// <summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        /// </summary>
        /// <value>The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.</value>
        [DataMember(Name="assessmentReportingMethodDescriptor", EmitDefaultValue=false)]
        public string AssessmentReportingMethodDescriptor { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.</value>
        [DataMember(Name="resultDatatypeTypeDescriptor", EmitDefaultValue=false)]
        public string ResultDatatypeTypeDescriptor { get; set; }

        /// <summary>
        /// The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult {\n");
            sb.Append("  AssessmentReportingMethodDescriptor: ").Append(AssessmentReportingMethodDescriptor).Append("\n");
            sb.Append("  ResultDatatypeTypeDescriptor: ").Append(ResultDatatypeTypeDescriptor).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult);
        }

        /// <summary>
        /// Returns true if EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssessmentReportingMethodDescriptor == input.AssessmentReportingMethodDescriptor ||
                    (this.AssessmentReportingMethodDescriptor != null &&
                    this.AssessmentReportingMethodDescriptor.Equals(input.AssessmentReportingMethodDescriptor))
                ) && 
                (
                    this.ResultDatatypeTypeDescriptor == input.ResultDatatypeTypeDescriptor ||
                    (this.ResultDatatypeTypeDescriptor != null &&
                    this.ResultDatatypeTypeDescriptor.Equals(input.ResultDatatypeTypeDescriptor))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssessmentReportingMethodDescriptor != null)
                    hashCode = hashCode * 59 + this.AssessmentReportingMethodDescriptor.GetHashCode();
                if (this.ResultDatatypeTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.ResultDatatypeTypeDescriptor.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }
    }

}
