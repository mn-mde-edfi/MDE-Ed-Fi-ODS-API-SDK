/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiLearningStandard
    /// </summary>
    [DataContract]
    public partial class EdFiLearningStandard :  IEquatable<EdFiLearningStandard>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLearningStandard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandard" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="academicSubjects">An unordered collection of learningStandardAcademicSubjects. Subject area for the LearningStandard. (required).</param>
        /// <param name="gradeLevels">An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard. (required).</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (required).</param>
        /// <param name="parentLearningStandardReference">parentLearningStandardReference.</param>
        /// <param name="contentStandard">contentStandard.</param>
        /// <param name="courseTitle">The official Course Title with which this learning standard is associated..</param>
        /// <param name="description">The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;. (required).</param>
        /// <param name="identificationCodes">An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard..</param>
        /// <param name="learningStandardCategoryDescriptor">An additional classification of the type of a specific learning standard..</param>
        /// <param name="learningStandardItemCode">A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique)..</param>
        /// <param name="learningStandardScopeDescriptor">Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body..</param>
        /// <param name="_namespace">The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control. (required).</param>
        /// <param name="prerequisiteLearningStandards">An unordered collection of learningStandardPrerequisiteLearningStandards. The unique identifier of a prerequisite learning standard item, a competency needed prior to learning this one. (Some items may have no prerequisites others may have one or more prerequisites. This should only be used to represent the immediate predecessors in a competency-based pathway, i.e. not prerequisites of prerequisites)..</param>
        /// <param name="successCriteria">One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard..</param>
        /// <param name="uri">An unambiguous reference to the statement using a network-resolvable URI..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiLearningStandard(string id = default(string), List<EdFiLearningStandardAcademicSubject> academicSubjects = default(List<EdFiLearningStandardAcademicSubject>), List<EdFiLearningStandardGradeLevel> gradeLevels = default(List<EdFiLearningStandardGradeLevel>), string learningStandardId = default(string), EdFiLearningStandardReference parentLearningStandardReference = default(EdFiLearningStandardReference), EdFiLearningStandardContentStandard contentStandard = default(EdFiLearningStandardContentStandard), string courseTitle = default(string), string description = default(string), List<EdFiLearningStandardIdentificationCode> identificationCodes = default(List<EdFiLearningStandardIdentificationCode>), string learningStandardCategoryDescriptor = default(string), string learningStandardItemCode = default(string), string learningStandardScopeDescriptor = default(string), string _namespace = default(string), List<EdFiLearningStandardPrerequisiteLearningStandard> prerequisiteLearningStandards = default(List<EdFiLearningStandardPrerequisiteLearningStandard>), string successCriteria = default(string), string uri = default(string), string etag = default(string))
        {
            // to ensure "academicSubjects" is required (not null)
            if (academicSubjects == null)
            {
                throw new InvalidDataException("academicSubjects is a required property for EdFiLearningStandard and cannot be null");
            }
            else
            {
                this.AcademicSubjects = academicSubjects;
            }
            // to ensure "gradeLevels" is required (not null)
            if (gradeLevels == null)
            {
                throw new InvalidDataException("gradeLevels is a required property for EdFiLearningStandard and cannot be null");
            }
            else
            {
                this.GradeLevels = gradeLevels;
            }
            // to ensure "learningStandardId" is required (not null)
            if (learningStandardId == null)
            {
                throw new InvalidDataException("learningStandardId is a required property for EdFiLearningStandard and cannot be null");
            }
            else
            {
                this.LearningStandardId = learningStandardId;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for EdFiLearningStandard and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "_namespace" is required (not null)
            if (_namespace == null)
            {
                throw new InvalidDataException("_namespace is a required property for EdFiLearningStandard and cannot be null");
            }
            else
            {
                this.Namespace = _namespace;
            }
            this.Id = id;
            this.ParentLearningStandardReference = parentLearningStandardReference;
            this.ContentStandard = contentStandard;
            this.CourseTitle = courseTitle;
            this.IdentificationCodes = identificationCodes;
            this.LearningStandardCategoryDescriptor = learningStandardCategoryDescriptor;
            this.LearningStandardItemCode = learningStandardItemCode;
            this.LearningStandardScopeDescriptor = learningStandardScopeDescriptor;
            this.PrerequisiteLearningStandards = prerequisiteLearningStandards;
            this.SuccessCriteria = successCriteria;
            this.Uri = uri;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardAcademicSubjects. Subject area for the LearningStandard.
        /// </summary>
        /// <value>An unordered collection of learningStandardAcademicSubjects. Subject area for the LearningStandard.</value>
        [DataMember(Name="academicSubjects", EmitDefaultValue=false)]
        public List<EdFiLearningStandardAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard.</value>
        [DataMember(Name="gradeLevels", EmitDefaultValue=false)]
        public List<EdFiLearningStandardGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        /// <value>The identifier for the specific learning standard (e.g., 111.15.3.1.A).</value>
        [DataMember(Name="learningStandardId", EmitDefaultValue=false)]
        public string LearningStandardId { get; set; }

        /// <summary>
        /// Gets or Sets ParentLearningStandardReference
        /// </summary>
        [DataMember(Name="parentLearningStandardReference", EmitDefaultValue=false)]
        public EdFiLearningStandardReference ParentLearningStandardReference { get; set; }

        /// <summary>
        /// Gets or Sets ContentStandard
        /// </summary>
        [DataMember(Name="contentStandard", EmitDefaultValue=false)]
        public EdFiLearningStandardContentStandard ContentStandard { get; set; }

        /// <summary>
        /// The official Course Title with which this learning standard is associated.
        /// </summary>
        /// <value>The official Course Title with which this learning standard is associated.</value>
        [DataMember(Name="courseTitle", EmitDefaultValue=false)]
        public string CourseTitle { get; set; }

        /// <summary>
        /// The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;.
        /// </summary>
        /// <value>The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.</value>
        [DataMember(Name="identificationCodes", EmitDefaultValue=false)]
        public List<EdFiLearningStandardIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An additional classification of the type of a specific learning standard.
        /// </summary>
        /// <value>An additional classification of the type of a specific learning standard.</value>
        [DataMember(Name="learningStandardCategoryDescriptor", EmitDefaultValue=false)]
        public string LearningStandardCategoryDescriptor { get; set; }

        /// <summary>
        /// A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).
        /// </summary>
        /// <value>A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).</value>
        [DataMember(Name="learningStandardItemCode", EmitDefaultValue=false)]
        public string LearningStandardItemCode { get; set; }

        /// <summary>
        /// Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body.
        /// </summary>
        /// <value>Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body.</value>
        [DataMember(Name="learningStandardScopeDescriptor", EmitDefaultValue=false)]
        public string LearningStandardScopeDescriptor { get; set; }

        /// <summary>
        /// The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control.
        /// </summary>
        /// <value>The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control.</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardPrerequisiteLearningStandards. The unique identifier of a prerequisite learning standard item, a competency needed prior to learning this one. (Some items may have no prerequisites others may have one or more prerequisites. This should only be used to represent the immediate predecessors in a competency-based pathway, i.e. not prerequisites of prerequisites).
        /// </summary>
        /// <value>An unordered collection of learningStandardPrerequisiteLearningStandards. The unique identifier of a prerequisite learning standard item, a competency needed prior to learning this one. (Some items may have no prerequisites others may have one or more prerequisites. This should only be used to represent the immediate predecessors in a competency-based pathway, i.e. not prerequisites of prerequisites).</value>
        [DataMember(Name="prerequisiteLearningStandards", EmitDefaultValue=false)]
        public List<EdFiLearningStandardPrerequisiteLearningStandard> PrerequisiteLearningStandards { get; set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.
        /// </summary>
        /// <value>One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.</value>
        [DataMember(Name="successCriteria", EmitDefaultValue=false)]
        public string SuccessCriteria { get; set; }

        /// <summary>
        /// An unambiguous reference to the statement using a network-resolvable URI.
        /// </summary>
        /// <value>An unambiguous reference to the statement using a network-resolvable URI.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiLearningStandard {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  LearningStandardId: ").Append(LearningStandardId).Append("\n");
            sb.Append("  ParentLearningStandardReference: ").Append(ParentLearningStandardReference).Append("\n");
            sb.Append("  ContentStandard: ").Append(ContentStandard).Append("\n");
            sb.Append("  CourseTitle: ").Append(CourseTitle).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  LearningStandardCategoryDescriptor: ").Append(LearningStandardCategoryDescriptor).Append("\n");
            sb.Append("  LearningStandardItemCode: ").Append(LearningStandardItemCode).Append("\n");
            sb.Append("  LearningStandardScopeDescriptor: ").Append(LearningStandardScopeDescriptor).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  PrerequisiteLearningStandards: ").Append(PrerequisiteLearningStandards).Append("\n");
            sb.Append("  SuccessCriteria: ").Append(SuccessCriteria).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiLearningStandard);
        }

        /// <summary>
        /// Returns true if EdFiLearningStandard instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiLearningStandard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiLearningStandard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AcademicSubjects == input.AcademicSubjects ||
                    this.AcademicSubjects != null &&
                    this.AcademicSubjects.SequenceEqual(input.AcademicSubjects)
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                ) && 
                (
                    this.LearningStandardId == input.LearningStandardId ||
                    (this.LearningStandardId != null &&
                    this.LearningStandardId.Equals(input.LearningStandardId))
                ) && 
                (
                    this.ParentLearningStandardReference == input.ParentLearningStandardReference ||
                    (this.ParentLearningStandardReference != null &&
                    this.ParentLearningStandardReference.Equals(input.ParentLearningStandardReference))
                ) && 
                (
                    this.ContentStandard == input.ContentStandard ||
                    (this.ContentStandard != null &&
                    this.ContentStandard.Equals(input.ContentStandard))
                ) && 
                (
                    this.CourseTitle == input.CourseTitle ||
                    (this.CourseTitle != null &&
                    this.CourseTitle.Equals(input.CourseTitle))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IdentificationCodes == input.IdentificationCodes ||
                    this.IdentificationCodes != null &&
                    this.IdentificationCodes.SequenceEqual(input.IdentificationCodes)
                ) && 
                (
                    this.LearningStandardCategoryDescriptor == input.LearningStandardCategoryDescriptor ||
                    (this.LearningStandardCategoryDescriptor != null &&
                    this.LearningStandardCategoryDescriptor.Equals(input.LearningStandardCategoryDescriptor))
                ) && 
                (
                    this.LearningStandardItemCode == input.LearningStandardItemCode ||
                    (this.LearningStandardItemCode != null &&
                    this.LearningStandardItemCode.Equals(input.LearningStandardItemCode))
                ) && 
                (
                    this.LearningStandardScopeDescriptor == input.LearningStandardScopeDescriptor ||
                    (this.LearningStandardScopeDescriptor != null &&
                    this.LearningStandardScopeDescriptor.Equals(input.LearningStandardScopeDescriptor))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.PrerequisiteLearningStandards == input.PrerequisiteLearningStandards ||
                    this.PrerequisiteLearningStandards != null &&
                    this.PrerequisiteLearningStandards.SequenceEqual(input.PrerequisiteLearningStandards)
                ) && 
                (
                    this.SuccessCriteria == input.SuccessCriteria ||
                    (this.SuccessCriteria != null &&
                    this.SuccessCriteria.Equals(input.SuccessCriteria))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AcademicSubjects != null)
                    hashCode = hashCode * 59 + this.AcademicSubjects.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                if (this.LearningStandardId != null)
                    hashCode = hashCode * 59 + this.LearningStandardId.GetHashCode();
                if (this.ParentLearningStandardReference != null)
                    hashCode = hashCode * 59 + this.ParentLearningStandardReference.GetHashCode();
                if (this.ContentStandard != null)
                    hashCode = hashCode * 59 + this.ContentStandard.GetHashCode();
                if (this.CourseTitle != null)
                    hashCode = hashCode * 59 + this.CourseTitle.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IdentificationCodes != null)
                    hashCode = hashCode * 59 + this.IdentificationCodes.GetHashCode();
                if (this.LearningStandardCategoryDescriptor != null)
                    hashCode = hashCode * 59 + this.LearningStandardCategoryDescriptor.GetHashCode();
                if (this.LearningStandardItemCode != null)
                    hashCode = hashCode * 59 + this.LearningStandardItemCode.GetHashCode();
                if (this.LearningStandardScopeDescriptor != null)
                    hashCode = hashCode * 59 + this.LearningStandardScopeDescriptor.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.PrerequisiteLearningStandards != null)
                    hashCode = hashCode * 59 + this.PrerequisiteLearningStandards.GetHashCode();
                if (this.SuccessCriteria != null)
                    hashCode = hashCode * 59 + this.SuccessCriteria.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
