/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStudentAcademicRecordDiploma
    /// </summary>
    [DataContract]
    public partial class EdFiStudentAcademicRecordDiploma :  IEquatable<EdFiStudentAcademicRecordDiploma>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAcademicRecordDiploma" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAcademicRecordDiploma() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAcademicRecordDiploma" /> class.
        /// </summary>
        /// <param name="diplomaTypeDescriptor">The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements. (required).</param>
        /// <param name="diplomaAwardDate">The month, day, and year on which the student met  graduation requirements and was awarded a diploma. (required).</param>
        /// <param name="achievementCategoryDescriptor">The category of achievement attributed to the learner..</param>
        /// <param name="diplomaLevelDescriptor">The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.         Minimum high school program         Recommended high school program         Distinguished Achievement Program..</param>
        /// <param name="achievementCategorySystem">The system that defines the categories by which an achievement is attributed to the learner..</param>
        /// <param name="achievementTitle">The title assigned to the achievement..</param>
        /// <param name="criteria">The criteria for competency-based completion of the achievement/award..</param>
        /// <param name="criteriaURL">The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award..</param>
        /// <param name="cteCompleter">Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED..</param>
        /// <param name="diplomaAwardExpiresDate">Date on which the award expires..</param>
        /// <param name="diplomaDescription">The description of diploma given to the student for accomplishments..</param>
        /// <param name="evidenceStatement">A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement..</param>
        /// <param name="imageURL">The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement..</param>
        /// <param name="issuerName">The name of the agent, entity, or institution issuing the element..</param>
        /// <param name="issuerOriginURL">The Uniform Resource Locator (URL) from which the award was issued..</param>
        public EdFiStudentAcademicRecordDiploma(string diplomaTypeDescriptor = default(string), DateTime? diplomaAwardDate = default(DateTime?), string achievementCategoryDescriptor = default(string), string diplomaLevelDescriptor = default(string), string achievementCategorySystem = default(string), string achievementTitle = default(string), string criteria = default(string), string criteriaURL = default(string), bool? cteCompleter = default(bool?), DateTime? diplomaAwardExpiresDate = default(DateTime?), string diplomaDescription = default(string), string evidenceStatement = default(string), string imageURL = default(string), string issuerName = default(string), string issuerOriginURL = default(string))
        {
            // to ensure "diplomaTypeDescriptor" is required (not null)
            if (diplomaTypeDescriptor == null)
            {
                throw new InvalidDataException("diplomaTypeDescriptor is a required property for EdFiStudentAcademicRecordDiploma and cannot be null");
            }
            else
            {
                this.DiplomaTypeDescriptor = diplomaTypeDescriptor;
            }
            // to ensure "diplomaAwardDate" is required (not null)
            if (diplomaAwardDate == null)
            {
                throw new InvalidDataException("diplomaAwardDate is a required property for EdFiStudentAcademicRecordDiploma and cannot be null");
            }
            else
            {
                this.DiplomaAwardDate = diplomaAwardDate;
            }
            this.AchievementCategoryDescriptor = achievementCategoryDescriptor;
            this.DiplomaLevelDescriptor = diplomaLevelDescriptor;
            this.AchievementCategorySystem = achievementCategorySystem;
            this.AchievementTitle = achievementTitle;
            this.Criteria = criteria;
            this.CriteriaURL = criteriaURL;
            this.CteCompleter = cteCompleter;
            this.DiplomaAwardExpiresDate = diplomaAwardExpiresDate;
            this.DiplomaDescription = diplomaDescription;
            this.EvidenceStatement = evidenceStatement;
            this.ImageURL = imageURL;
            this.IssuerName = issuerName;
            this.IssuerOriginURL = issuerOriginURL;
        }
        
        /// <summary>
        /// The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
        /// </summary>
        /// <value>The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.</value>
        [DataMember(Name="diplomaTypeDescriptor", EmitDefaultValue=false)]
        public string DiplomaTypeDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which the student met  graduation requirements and was awarded a diploma.
        /// </summary>
        /// <value>The month, day, and year on which the student met  graduation requirements and was awarded a diploma.</value>
        [DataMember(Name="diplomaAwardDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DiplomaAwardDate { get; set; }

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        /// <value>The category of achievement attributed to the learner.</value>
        [DataMember(Name="achievementCategoryDescriptor", EmitDefaultValue=false)]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.         Minimum high school program         Recommended high school program         Distinguished Achievement Program.
        /// </summary>
        /// <value>The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.         Minimum high school program         Recommended high school program         Distinguished Achievement Program.</value>
        [DataMember(Name="diplomaLevelDescriptor", EmitDefaultValue=false)]
        public string DiplomaLevelDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        /// <value>The system that defines the categories by which an achievement is attributed to the learner.</value>
        [DataMember(Name="achievementCategorySystem", EmitDefaultValue=false)]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        /// <value>The title assigned to the achievement.</value>
        [DataMember(Name="achievementTitle", EmitDefaultValue=false)]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        /// <value>The criteria for competency-based completion of the achievement/award.</value>
        [DataMember(Name="criteria", EmitDefaultValue=false)]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        /// <value>The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.</value>
        [DataMember(Name="criteriaURL", EmitDefaultValue=false)]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.
        /// </summary>
        /// <value>Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.</value>
        [DataMember(Name="cteCompleter", EmitDefaultValue=false)]
        public bool? CteCompleter { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        /// <value>Date on which the award expires.</value>
        [DataMember(Name="diplomaAwardExpiresDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DiplomaAwardExpiresDate { get; set; }

        /// <summary>
        /// The description of diploma given to the student for accomplishments.
        /// </summary>
        /// <value>The description of diploma given to the student for accomplishments.</value>
        [DataMember(Name="diplomaDescription", EmitDefaultValue=false)]
        public string DiplomaDescription { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        /// <value>A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.</value>
        [DataMember(Name="evidenceStatement", EmitDefaultValue=false)]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        /// <value>The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.</value>
        [DataMember(Name="imageURL", EmitDefaultValue=false)]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        /// <value>The name of the agent, entity, or institution issuing the element.</value>
        [DataMember(Name="issuerName", EmitDefaultValue=false)]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        /// <value>The Uniform Resource Locator (URL) from which the award was issued.</value>
        [DataMember(Name="issuerOriginURL", EmitDefaultValue=false)]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentAcademicRecordDiploma {\n");
            sb.Append("  DiplomaTypeDescriptor: ").Append(DiplomaTypeDescriptor).Append("\n");
            sb.Append("  DiplomaAwardDate: ").Append(DiplomaAwardDate).Append("\n");
            sb.Append("  AchievementCategoryDescriptor: ").Append(AchievementCategoryDescriptor).Append("\n");
            sb.Append("  DiplomaLevelDescriptor: ").Append(DiplomaLevelDescriptor).Append("\n");
            sb.Append("  AchievementCategorySystem: ").Append(AchievementCategorySystem).Append("\n");
            sb.Append("  AchievementTitle: ").Append(AchievementTitle).Append("\n");
            sb.Append("  Criteria: ").Append(Criteria).Append("\n");
            sb.Append("  CriteriaURL: ").Append(CriteriaURL).Append("\n");
            sb.Append("  CteCompleter: ").Append(CteCompleter).Append("\n");
            sb.Append("  DiplomaAwardExpiresDate: ").Append(DiplomaAwardExpiresDate).Append("\n");
            sb.Append("  DiplomaDescription: ").Append(DiplomaDescription).Append("\n");
            sb.Append("  EvidenceStatement: ").Append(EvidenceStatement).Append("\n");
            sb.Append("  ImageURL: ").Append(ImageURL).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  IssuerOriginURL: ").Append(IssuerOriginURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentAcademicRecordDiploma);
        }

        /// <summary>
        /// Returns true if EdFiStudentAcademicRecordDiploma instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentAcademicRecordDiploma to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentAcademicRecordDiploma input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiplomaTypeDescriptor == input.DiplomaTypeDescriptor ||
                    (this.DiplomaTypeDescriptor != null &&
                    this.DiplomaTypeDescriptor.Equals(input.DiplomaTypeDescriptor))
                ) && 
                (
                    this.DiplomaAwardDate == input.DiplomaAwardDate ||
                    (this.DiplomaAwardDate != null &&
                    this.DiplomaAwardDate.Equals(input.DiplomaAwardDate))
                ) && 
                (
                    this.AchievementCategoryDescriptor == input.AchievementCategoryDescriptor ||
                    (this.AchievementCategoryDescriptor != null &&
                    this.AchievementCategoryDescriptor.Equals(input.AchievementCategoryDescriptor))
                ) && 
                (
                    this.DiplomaLevelDescriptor == input.DiplomaLevelDescriptor ||
                    (this.DiplomaLevelDescriptor != null &&
                    this.DiplomaLevelDescriptor.Equals(input.DiplomaLevelDescriptor))
                ) && 
                (
                    this.AchievementCategorySystem == input.AchievementCategorySystem ||
                    (this.AchievementCategorySystem != null &&
                    this.AchievementCategorySystem.Equals(input.AchievementCategorySystem))
                ) && 
                (
                    this.AchievementTitle == input.AchievementTitle ||
                    (this.AchievementTitle != null &&
                    this.AchievementTitle.Equals(input.AchievementTitle))
                ) && 
                (
                    this.Criteria == input.Criteria ||
                    (this.Criteria != null &&
                    this.Criteria.Equals(input.Criteria))
                ) && 
                (
                    this.CriteriaURL == input.CriteriaURL ||
                    (this.CriteriaURL != null &&
                    this.CriteriaURL.Equals(input.CriteriaURL))
                ) && 
                (
                    this.CteCompleter == input.CteCompleter ||
                    (this.CteCompleter != null &&
                    this.CteCompleter.Equals(input.CteCompleter))
                ) && 
                (
                    this.DiplomaAwardExpiresDate == input.DiplomaAwardExpiresDate ||
                    (this.DiplomaAwardExpiresDate != null &&
                    this.DiplomaAwardExpiresDate.Equals(input.DiplomaAwardExpiresDate))
                ) && 
                (
                    this.DiplomaDescription == input.DiplomaDescription ||
                    (this.DiplomaDescription != null &&
                    this.DiplomaDescription.Equals(input.DiplomaDescription))
                ) && 
                (
                    this.EvidenceStatement == input.EvidenceStatement ||
                    (this.EvidenceStatement != null &&
                    this.EvidenceStatement.Equals(input.EvidenceStatement))
                ) && 
                (
                    this.ImageURL == input.ImageURL ||
                    (this.ImageURL != null &&
                    this.ImageURL.Equals(input.ImageURL))
                ) && 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                ) && 
                (
                    this.IssuerOriginURL == input.IssuerOriginURL ||
                    (this.IssuerOriginURL != null &&
                    this.IssuerOriginURL.Equals(input.IssuerOriginURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiplomaTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.DiplomaTypeDescriptor.GetHashCode();
                if (this.DiplomaAwardDate != null)
                    hashCode = hashCode * 59 + this.DiplomaAwardDate.GetHashCode();
                if (this.AchievementCategoryDescriptor != null)
                    hashCode = hashCode * 59 + this.AchievementCategoryDescriptor.GetHashCode();
                if (this.DiplomaLevelDescriptor != null)
                    hashCode = hashCode * 59 + this.DiplomaLevelDescriptor.GetHashCode();
                if (this.AchievementCategorySystem != null)
                    hashCode = hashCode * 59 + this.AchievementCategorySystem.GetHashCode();
                if (this.AchievementTitle != null)
                    hashCode = hashCode * 59 + this.AchievementTitle.GetHashCode();
                if (this.Criteria != null)
                    hashCode = hashCode * 59 + this.Criteria.GetHashCode();
                if (this.CriteriaURL != null)
                    hashCode = hashCode * 59 + this.CriteriaURL.GetHashCode();
                if (this.CteCompleter != null)
                    hashCode = hashCode * 59 + this.CteCompleter.GetHashCode();
                if (this.DiplomaAwardExpiresDate != null)
                    hashCode = hashCode * 59 + this.DiplomaAwardExpiresDate.GetHashCode();
                if (this.DiplomaDescription != null)
                    hashCode = hashCode * 59 + this.DiplomaDescription.GetHashCode();
                if (this.EvidenceStatement != null)
                    hashCode = hashCode * 59 + this.EvidenceStatement.GetHashCode();
                if (this.ImageURL != null)
                    hashCode = hashCode * 59 + this.ImageURL.GetHashCode();
                if (this.IssuerName != null)
                    hashCode = hashCode * 59 + this.IssuerName.GetHashCode();
                if (this.IssuerOriginURL != null)
                    hashCode = hashCode * 59 + this.IssuerOriginURL.GetHashCode();
                return hashCode;
            }
        }
    }

}
