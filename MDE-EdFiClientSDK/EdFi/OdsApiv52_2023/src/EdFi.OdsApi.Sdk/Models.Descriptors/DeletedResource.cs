/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Descriptors
{
    /// <summary>
    /// DeletedResource
    /// </summary>
    [DataContract]
    public partial class DeletedResource :  IEquatable<DeletedResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedResource" /> class.
        /// </summary>
        /// <param name="id">Resource identifier.</param>
        /// <param name="changeVersion">Change version.</param>
        public DeletedResource(string id = default(string), decimal? changeVersion = default(decimal?))
        {
            this.Id = id;
            this.ChangeVersion = changeVersion;
        }
        
        /// <summary>
        /// Resource identifier
        /// </summary>
        /// <value>Resource identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Change version
        /// </summary>
        /// <value>Change version</value>
        [DataMember(Name="changeVersion", EmitDefaultValue=false)]
        public decimal? ChangeVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeletedResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChangeVersion: ").Append(ChangeVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeletedResource);
        }

        /// <summary>
        /// Returns true if DeletedResource instances are equal
        /// </summary>
        /// <param name="input">Instance of DeletedResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeletedResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ChangeVersion == input.ChangeVersion ||
                    (this.ChangeVersion != null &&
                    this.ChangeVersion.Equals(input.ChangeVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ChangeVersion != null)
                    hashCode = hashCode * 59 + this.ChangeVersion.GetHashCode();
                return hashCode;
            }
        }
    }

}
