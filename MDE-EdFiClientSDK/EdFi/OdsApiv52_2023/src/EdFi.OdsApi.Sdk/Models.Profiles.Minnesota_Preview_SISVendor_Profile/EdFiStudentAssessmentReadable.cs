/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// EdFiStudentAssessmentReadable
    /// </summary>
    [DataContract]
    public partial class EdFiStudentAssessmentReadable :  IEquatable<EdFiStudentAssessmentReadable>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentReadable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAssessmentReadable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentReadable" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="studentAssessmentIdentifier">A unique number or alphanumeric code assigned to an assessment administered to a student. (required).</param>
        /// <param name="assessmentReference">assessmentReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference.</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="accommodations">An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:         Braille         Enlarged monitor view         Extra time         Large Print         Setting         Oral Administration         ....</param>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones. (required).</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended..</param>
        /// <param name="administrationEnvironmentDescriptor">The environment in which the test was administered..</param>
        /// <param name="administrationLanguageDescriptor">The language in which an assessment is written and/or administered..</param>
        /// <param name="eventCircumstanceDescriptor">An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc..</param>
        /// <param name="eventDescription">Describes special events that occur before during or after the assessment session that may impact use of results..</param>
        /// <param name="items">An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard..</param>
        /// <param name="performanceLevels">An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment..</param>
        /// <param name="platformTypeDescriptor">The platform with which the assessment was delivered to the student during the assessment session..</param>
        /// <param name="reasonNotTestedDescriptor">The primary reason student is not tested. For example:         Absent         Refusal by parent         Refusal by student         Medical waiver         Illness         Disruptive behavior         LEP Exempt         ....</param>
        /// <param name="retestIndicatorDescriptor">Indicator if the test was retaken. For example:         Primary administration         First retest         Second retest         ....</param>
        /// <param name="scoreResults">An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc..</param>
        /// <param name="serialNumber">The unique number for the assessment form or answer document..</param>
        /// <param name="studentObjectiveAssessments">An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an ObjectiveAssessment..</param>
        /// <param name="whenAssessedGradeLevelDescriptor">The grade level of a student when assessed..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="ext">ext.</param>
        public EdFiStudentAssessmentReadable(string id = default(string), string studentAssessmentIdentifier = default(string), EdFiAssessmentReference assessmentReference = default(EdFiAssessmentReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), EdFiStudentReference studentReference = default(EdFiStudentReference), List<EdFiStudentAssessmentAccommodationReadable> accommodations = default(List<EdFiStudentAssessmentAccommodationReadable>), DateTime? administrationDate = default(DateTime?), DateTime? administrationEndDate = default(DateTime?), string administrationEnvironmentDescriptor = default(string), string administrationLanguageDescriptor = default(string), string eventCircumstanceDescriptor = default(string), string eventDescription = default(string), List<EdFiStudentAssessmentItemReadable> items = default(List<EdFiStudentAssessmentItemReadable>), List<EdFiStudentAssessmentPerformanceLevelReadable> performanceLevels = default(List<EdFiStudentAssessmentPerformanceLevelReadable>), string platformTypeDescriptor = default(string), string reasonNotTestedDescriptor = default(string), string retestIndicatorDescriptor = default(string), List<EdFiStudentAssessmentScoreResultReadable> scoreResults = default(List<EdFiStudentAssessmentScoreResultReadable>), string serialNumber = default(string), List<EdFiStudentAssessmentStudentObjectiveAssessmentReadable> studentObjectiveAssessments = default(List<EdFiStudentAssessmentStudentObjectiveAssessmentReadable>), string whenAssessedGradeLevelDescriptor = default(string), string etag = default(string), StudentAssessmentExtensionsReadable ext = default(StudentAssessmentExtensionsReadable))
        {
            // to ensure "studentAssessmentIdentifier" is required (not null)
            if (studentAssessmentIdentifier == null)
            {
                throw new InvalidDataException("studentAssessmentIdentifier is a required property for EdFiStudentAssessmentReadable and cannot be null");
            }
            else
            {
                this.StudentAssessmentIdentifier = studentAssessmentIdentifier;
            }
            // to ensure "assessmentReference" is required (not null)
            if (assessmentReference == null)
            {
                throw new InvalidDataException("assessmentReference is a required property for EdFiStudentAssessmentReadable and cannot be null");
            }
            else
            {
                this.AssessmentReference = assessmentReference;
            }
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new InvalidDataException("studentReference is a required property for EdFiStudentAssessmentReadable and cannot be null");
            }
            else
            {
                this.StudentReference = studentReference;
            }
            // to ensure "administrationDate" is required (not null)
            if (administrationDate == null)
            {
                throw new InvalidDataException("administrationDate is a required property for EdFiStudentAssessmentReadable and cannot be null");
            }
            else
            {
                this.AdministrationDate = administrationDate;
            }
            this.Id = id;
            this.SchoolYearTypeReference = schoolYearTypeReference;
            this.Accommodations = accommodations;
            this.AdministrationEndDate = administrationEndDate;
            this.AdministrationEnvironmentDescriptor = administrationEnvironmentDescriptor;
            this.AdministrationLanguageDescriptor = administrationLanguageDescriptor;
            this.EventCircumstanceDescriptor = eventCircumstanceDescriptor;
            this.EventDescription = eventDescription;
            this.Items = items;
            this.PerformanceLevels = performanceLevels;
            this.PlatformTypeDescriptor = platformTypeDescriptor;
            this.ReasonNotTestedDescriptor = reasonNotTestedDescriptor;
            this.RetestIndicatorDescriptor = retestIndicatorDescriptor;
            this.ScoreResults = scoreResults;
            this.SerialNumber = serialNumber;
            this.StudentObjectiveAssessments = studentObjectiveAssessments;
            this.WhenAssessedGradeLevelDescriptor = whenAssessedGradeLevelDescriptor;
            this.Etag = etag;
            this.Ext = ext;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an assessment administered to a student.</value>
        [DataMember(Name="studentAssessmentIdentifier", EmitDefaultValue=false)]
        public string StudentAssessmentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentReference
        /// </summary>
        [DataMember(Name="assessmentReference", EmitDefaultValue=false)]
        public EdFiAssessmentReference AssessmentReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name="studentReference", EmitDefaultValue=false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:         Braille         Enlarged monitor view         Extra time         Large Print         Setting         Oral Administration         ...
        /// </summary>
        /// <value>An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:         Braille         Enlarged monitor view         Extra time         Large Print         Setting         Oral Administration         ...</value>
        [DataMember(Name="accommodations", EmitDefaultValue=false)]
        public List<EdFiStudentAssessmentAccommodationReadable> Accommodations { get; set; }

        /// <summary>
        /// The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        /// </summary>
        /// <value>The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.</value>
        [DataMember(Name="administrationDate", EmitDefaultValue=false)]
        public DateTime? AdministrationDate { get; set; }

        /// <summary>
        /// The date and time an assessment administration ended.
        /// </summary>
        /// <value>The date and time an assessment administration ended.</value>
        [DataMember(Name="administrationEndDate", EmitDefaultValue=false)]
        public DateTime? AdministrationEndDate { get; set; }

        /// <summary>
        /// The environment in which the test was administered.
        /// </summary>
        /// <value>The environment in which the test was administered.</value>
        [DataMember(Name="administrationEnvironmentDescriptor", EmitDefaultValue=false)]
        public string AdministrationEnvironmentDescriptor { get; set; }

        /// <summary>
        /// The language in which an assessment is written and/or administered.
        /// </summary>
        /// <value>The language in which an assessment is written and/or administered.</value>
        [DataMember(Name="administrationLanguageDescriptor", EmitDefaultValue=false)]
        public string AdministrationLanguageDescriptor { get; set; }

        /// <summary>
        /// An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
        /// </summary>
        /// <value>An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.</value>
        [DataMember(Name="eventCircumstanceDescriptor", EmitDefaultValue=false)]
        public string EventCircumstanceDescriptor { get; set; }

        /// <summary>
        /// Describes special events that occur before during or after the assessment session that may impact use of results.
        /// </summary>
        /// <value>Describes special events that occur before during or after the assessment session that may impact use of results.</value>
        [DataMember(Name="eventDescription", EmitDefaultValue=false)]
        public string EventDescription { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<EdFiStudentAssessmentItemReadable> Items { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.</value>
        [DataMember(Name="performanceLevels", EmitDefaultValue=false)]
        public List<EdFiStudentAssessmentPerformanceLevelReadable> PerformanceLevels { get; set; }

        /// <summary>
        /// The platform with which the assessment was delivered to the student during the assessment session.
        /// </summary>
        /// <value>The platform with which the assessment was delivered to the student during the assessment session.</value>
        [DataMember(Name="platformTypeDescriptor", EmitDefaultValue=false)]
        public string PlatformTypeDescriptor { get; set; }

        /// <summary>
        /// The primary reason student is not tested. For example:         Absent         Refusal by parent         Refusal by student         Medical waiver         Illness         Disruptive behavior         LEP Exempt         ...
        /// </summary>
        /// <value>The primary reason student is not tested. For example:         Absent         Refusal by parent         Refusal by student         Medical waiver         Illness         Disruptive behavior         LEP Exempt         ...</value>
        [DataMember(Name="reasonNotTestedDescriptor", EmitDefaultValue=false)]
        public string ReasonNotTestedDescriptor { get; set; }

        /// <summary>
        /// Indicator if the test was retaken. For example:         Primary administration         First retest         Second retest         ...
        /// </summary>
        /// <value>Indicator if the test was retaken. For example:         Primary administration         First retest         Second retest         ...</value>
        [DataMember(Name="retestIndicatorDescriptor", EmitDefaultValue=false)]
        public string RetestIndicatorDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</value>
        [DataMember(Name="scoreResults", EmitDefaultValue=false)]
        public List<EdFiStudentAssessmentScoreResultReadable> ScoreResults { get; set; }

        /// <summary>
        /// The unique number for the assessment form or answer document.
        /// </summary>
        /// <value>The unique number for the assessment form or answer document.</value>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an ObjectiveAssessment.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an ObjectiveAssessment.</value>
        [DataMember(Name="studentObjectiveAssessments", EmitDefaultValue=false)]
        public List<EdFiStudentAssessmentStudentObjectiveAssessmentReadable> StudentObjectiveAssessments { get; set; }

        /// <summary>
        /// The grade level of a student when assessed.
        /// </summary>
        /// <value>The grade level of a student when assessed.</value>
        [DataMember(Name="whenAssessedGradeLevelDescriptor", EmitDefaultValue=false)]
        public string WhenAssessedGradeLevelDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [DataMember(Name="_ext", EmitDefaultValue=false)]
        public StudentAssessmentExtensionsReadable Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentReadable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StudentAssessmentIdentifier: ").Append(StudentAssessmentIdentifier).Append("\n");
            sb.Append("  AssessmentReference: ").Append(AssessmentReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Accommodations: ").Append(Accommodations).Append("\n");
            sb.Append("  AdministrationDate: ").Append(AdministrationDate).Append("\n");
            sb.Append("  AdministrationEndDate: ").Append(AdministrationEndDate).Append("\n");
            sb.Append("  AdministrationEnvironmentDescriptor: ").Append(AdministrationEnvironmentDescriptor).Append("\n");
            sb.Append("  AdministrationLanguageDescriptor: ").Append(AdministrationLanguageDescriptor).Append("\n");
            sb.Append("  EventCircumstanceDescriptor: ").Append(EventCircumstanceDescriptor).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PerformanceLevels: ").Append(PerformanceLevels).Append("\n");
            sb.Append("  PlatformTypeDescriptor: ").Append(PlatformTypeDescriptor).Append("\n");
            sb.Append("  ReasonNotTestedDescriptor: ").Append(ReasonNotTestedDescriptor).Append("\n");
            sb.Append("  RetestIndicatorDescriptor: ").Append(RetestIndicatorDescriptor).Append("\n");
            sb.Append("  ScoreResults: ").Append(ScoreResults).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  StudentObjectiveAssessments: ").Append(StudentObjectiveAssessments).Append("\n");
            sb.Append("  WhenAssessedGradeLevelDescriptor: ").Append(WhenAssessedGradeLevelDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentAssessmentReadable);
        }

        /// <summary>
        /// Returns true if EdFiStudentAssessmentReadable instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentAssessmentReadable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentAssessmentReadable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StudentAssessmentIdentifier == input.StudentAssessmentIdentifier ||
                    (this.StudentAssessmentIdentifier != null &&
                    this.StudentAssessmentIdentifier.Equals(input.StudentAssessmentIdentifier))
                ) && 
                (
                    this.AssessmentReference == input.AssessmentReference ||
                    (this.AssessmentReference != null &&
                    this.AssessmentReference.Equals(input.AssessmentReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.Accommodations == input.Accommodations ||
                    this.Accommodations != null &&
                    this.Accommodations.SequenceEqual(input.Accommodations)
                ) && 
                (
                    this.AdministrationDate == input.AdministrationDate ||
                    (this.AdministrationDate != null &&
                    this.AdministrationDate.Equals(input.AdministrationDate))
                ) && 
                (
                    this.AdministrationEndDate == input.AdministrationEndDate ||
                    (this.AdministrationEndDate != null &&
                    this.AdministrationEndDate.Equals(input.AdministrationEndDate))
                ) && 
                (
                    this.AdministrationEnvironmentDescriptor == input.AdministrationEnvironmentDescriptor ||
                    (this.AdministrationEnvironmentDescriptor != null &&
                    this.AdministrationEnvironmentDescriptor.Equals(input.AdministrationEnvironmentDescriptor))
                ) && 
                (
                    this.AdministrationLanguageDescriptor == input.AdministrationLanguageDescriptor ||
                    (this.AdministrationLanguageDescriptor != null &&
                    this.AdministrationLanguageDescriptor.Equals(input.AdministrationLanguageDescriptor))
                ) && 
                (
                    this.EventCircumstanceDescriptor == input.EventCircumstanceDescriptor ||
                    (this.EventCircumstanceDescriptor != null &&
                    this.EventCircumstanceDescriptor.Equals(input.EventCircumstanceDescriptor))
                ) && 
                (
                    this.EventDescription == input.EventDescription ||
                    (this.EventDescription != null &&
                    this.EventDescription.Equals(input.EventDescription))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.PerformanceLevels == input.PerformanceLevels ||
                    this.PerformanceLevels != null &&
                    this.PerformanceLevels.SequenceEqual(input.PerformanceLevels)
                ) && 
                (
                    this.PlatformTypeDescriptor == input.PlatformTypeDescriptor ||
                    (this.PlatformTypeDescriptor != null &&
                    this.PlatformTypeDescriptor.Equals(input.PlatformTypeDescriptor))
                ) && 
                (
                    this.ReasonNotTestedDescriptor == input.ReasonNotTestedDescriptor ||
                    (this.ReasonNotTestedDescriptor != null &&
                    this.ReasonNotTestedDescriptor.Equals(input.ReasonNotTestedDescriptor))
                ) && 
                (
                    this.RetestIndicatorDescriptor == input.RetestIndicatorDescriptor ||
                    (this.RetestIndicatorDescriptor != null &&
                    this.RetestIndicatorDescriptor.Equals(input.RetestIndicatorDescriptor))
                ) && 
                (
                    this.ScoreResults == input.ScoreResults ||
                    this.ScoreResults != null &&
                    this.ScoreResults.SequenceEqual(input.ScoreResults)
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.StudentObjectiveAssessments == input.StudentObjectiveAssessments ||
                    this.StudentObjectiveAssessments != null &&
                    this.StudentObjectiveAssessments.SequenceEqual(input.StudentObjectiveAssessments)
                ) && 
                (
                    this.WhenAssessedGradeLevelDescriptor == input.WhenAssessedGradeLevelDescriptor ||
                    (this.WhenAssessedGradeLevelDescriptor != null &&
                    this.WhenAssessedGradeLevelDescriptor.Equals(input.WhenAssessedGradeLevelDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StudentAssessmentIdentifier != null)
                    hashCode = hashCode * 59 + this.StudentAssessmentIdentifier.GetHashCode();
                if (this.AssessmentReference != null)
                    hashCode = hashCode * 59 + this.AssessmentReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.StudentReference != null)
                    hashCode = hashCode * 59 + this.StudentReference.GetHashCode();
                if (this.Accommodations != null)
                    hashCode = hashCode * 59 + this.Accommodations.GetHashCode();
                if (this.AdministrationDate != null)
                    hashCode = hashCode * 59 + this.AdministrationDate.GetHashCode();
                if (this.AdministrationEndDate != null)
                    hashCode = hashCode * 59 + this.AdministrationEndDate.GetHashCode();
                if (this.AdministrationEnvironmentDescriptor != null)
                    hashCode = hashCode * 59 + this.AdministrationEnvironmentDescriptor.GetHashCode();
                if (this.AdministrationLanguageDescriptor != null)
                    hashCode = hashCode * 59 + this.AdministrationLanguageDescriptor.GetHashCode();
                if (this.EventCircumstanceDescriptor != null)
                    hashCode = hashCode * 59 + this.EventCircumstanceDescriptor.GetHashCode();
                if (this.EventDescription != null)
                    hashCode = hashCode * 59 + this.EventDescription.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.PerformanceLevels != null)
                    hashCode = hashCode * 59 + this.PerformanceLevels.GetHashCode();
                if (this.PlatformTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.PlatformTypeDescriptor.GetHashCode();
                if (this.ReasonNotTestedDescriptor != null)
                    hashCode = hashCode * 59 + this.ReasonNotTestedDescriptor.GetHashCode();
                if (this.RetestIndicatorDescriptor != null)
                    hashCode = hashCode * 59 + this.RetestIndicatorDescriptor.GetHashCode();
                if (this.ScoreResults != null)
                    hashCode = hashCode * 59 + this.ScoreResults.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.StudentObjectiveAssessments != null)
                    hashCode = hashCode * 59 + this.StudentObjectiveAssessments.GetHashCode();
                if (this.WhenAssessedGradeLevelDescriptor != null)
                    hashCode = hashCode * 59 + this.WhenAssessedGradeLevelDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.Ext != null)
                    hashCode = hashCode * 59 + this.Ext.GetHashCode();
                return hashCode;
            }
        }
    }

}
