/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_TwentyTwo_TwentyThree_SISVendor_Profile
{
    /// <summary>
    /// MnStudentEducationOrganizationAssociationPreferredPronounReadable
    /// </summary>
    [DataContract]
    public partial class MnStudentEducationOrganizationAssociationPreferredPronounReadable :  IEquatable<MnStudentEducationOrganizationAssociationPreferredPronounReadable>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentEducationOrganizationAssociationPreferredPronounReadable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MnStudentEducationOrganizationAssociationPreferredPronounReadable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentEducationOrganizationAssociationPreferredPronounReadable" /> class.
        /// </summary>
        /// <param name="preferredPronounDescriptor">Preferred pronoun. (required).</param>
        public MnStudentEducationOrganizationAssociationPreferredPronounReadable(string preferredPronounDescriptor = default(string))
        {
            // to ensure "preferredPronounDescriptor" is required (not null)
            if (preferredPronounDescriptor == null)
            {
                throw new InvalidDataException("preferredPronounDescriptor is a required property for MnStudentEducationOrganizationAssociationPreferredPronounReadable and cannot be null");
            }
            else
            {
                this.PreferredPronounDescriptor = preferredPronounDescriptor;
            }
        }
        
        /// <summary>
        /// Preferred pronoun.
        /// </summary>
        /// <value>Preferred pronoun.</value>
        [DataMember(Name="preferredPronounDescriptor", EmitDefaultValue=false)]
        public string PreferredPronounDescriptor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MnStudentEducationOrganizationAssociationPreferredPronounReadable {\n");
            sb.Append("  PreferredPronounDescriptor: ").Append(PreferredPronounDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnStudentEducationOrganizationAssociationPreferredPronounReadable);
        }

        /// <summary>
        /// Returns true if MnStudentEducationOrganizationAssociationPreferredPronounReadable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnStudentEducationOrganizationAssociationPreferredPronounReadable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnStudentEducationOrganizationAssociationPreferredPronounReadable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PreferredPronounDescriptor == input.PreferredPronounDescriptor ||
                    (this.PreferredPronounDescriptor != null &&
                    this.PreferredPronounDescriptor.Equals(input.PreferredPronounDescriptor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PreferredPronounDescriptor != null)
                    hashCode = hashCode * 59 + this.PreferredPronounDescriptor.GetHashCode();
                return hashCode;
            }
        }
    }

}
