/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable
    /// </summary>
    [DataContract(Name = "mn_studentDisciplineIncidentNonOffenderAssociationExtension_writable")]
    public partial class MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable : IEquatable<MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable" /> class.
        /// </summary>
        /// <param name="costToVictimDescriptor">Describes the cost to the victim incurred by an incident..</param>
        /// <param name="didInjuryOccur">Indicator whether an injury occurred related to an incident..</param>
        /// <param name="didSeriousBodilyInjuryOccur">Indicator whether an injury that occured related to an incident was a serious bodily injury..</param>
        public MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable(string costToVictimDescriptor = default(string), bool? didInjuryOccur = default(bool?), bool? didSeriousBodilyInjuryOccur = default(bool?))
        {
            this.CostToVictimDescriptor = costToVictimDescriptor;
            this.DidInjuryOccur = didInjuryOccur;
            this.DidSeriousBodilyInjuryOccur = didSeriousBodilyInjuryOccur;
        }

        /// <summary>
        /// Describes the cost to the victim incurred by an incident.
        /// </summary>
        /// <value>Describes the cost to the victim incurred by an incident.</value>
        [DataMember(Name = "costToVictimDescriptor", EmitDefaultValue = true)]
        public string CostToVictimDescriptor { get; set; }

        /// <summary>
        /// Indicator whether an injury occurred related to an incident.
        /// </summary>
        /// <value>Indicator whether an injury occurred related to an incident.</value>
        [DataMember(Name = "didInjuryOccur", EmitDefaultValue = true)]
        public bool? DidInjuryOccur { get; set; }

        /// <summary>
        /// Indicator whether an injury that occured related to an incident was a serious bodily injury.
        /// </summary>
        /// <value>Indicator whether an injury that occured related to an incident was a serious bodily injury.</value>
        [DataMember(Name = "didSeriousBodilyInjuryOccur", EmitDefaultValue = true)]
        public bool? DidSeriousBodilyInjuryOccur { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable {\n");
            sb.Append("  CostToVictimDescriptor: ").Append(CostToVictimDescriptor).Append("\n");
            sb.Append("  DidInjuryOccur: ").Append(DidInjuryOccur).Append("\n");
            sb.Append("  DidSeriousBodilyInjuryOccur: ").Append(DidSeriousBodilyInjuryOccur).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable);
        }

        /// <summary>
        /// Returns true if MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnStudentDisciplineIncidentNonOffenderAssociationExtensionWritable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CostToVictimDescriptor == input.CostToVictimDescriptor ||
                    (this.CostToVictimDescriptor != null &&
                    this.CostToVictimDescriptor.Equals(input.CostToVictimDescriptor))
                ) && 
                (
                    this.DidInjuryOccur == input.DidInjuryOccur ||
                    (this.DidInjuryOccur != null &&
                    this.DidInjuryOccur.Equals(input.DidInjuryOccur))
                ) && 
                (
                    this.DidSeriousBodilyInjuryOccur == input.DidSeriousBodilyInjuryOccur ||
                    (this.DidSeriousBodilyInjuryOccur != null &&
                    this.DidSeriousBodilyInjuryOccur.Equals(input.DidSeriousBodilyInjuryOccur))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CostToVictimDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.CostToVictimDescriptor.GetHashCode();
                }
                if (this.DidInjuryOccur != null)
                {
                    hashCode = (hashCode * 59) + this.DidInjuryOccur.GetHashCode();
                }
                if (this.DidSeriousBodilyInjuryOccur != null)
                {
                    hashCode = (hashCode * 59) + this.DidSeriousBodilyInjuryOccur.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CostToVictimDescriptor (string) maxLength
            if (this.CostToVictimDescriptor != null && this.CostToVictimDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CostToVictimDescriptor, length must be less than 306.", new [] { "CostToVictimDescriptor" });
            }

            yield break;
        }
    }

}
