/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// TrackedChangesEdFiDisciplineActionWritableKey
    /// </summary>
    [DataContract(Name = "trackedChanges_edFi_disciplineAction_writableKey")]
    public partial class TrackedChangesEdFiDisciplineActionWritableKey : IEquatable<TrackedChangesEdFiDisciplineActionWritableKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiDisciplineActionWritableKey" /> class.
        /// </summary>
        /// <param name="disciplineActionIdentifier">Identifier assigned by the education organization to the discipline action..</param>
        /// <param name="disciplineDate">The date of the discipline action..</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student..</param>
        public TrackedChangesEdFiDisciplineActionWritableKey(string disciplineActionIdentifier = default(string), DateTime disciplineDate = default(DateTime), string studentUniqueId = default(string))
        {
            this.DisciplineActionIdentifier = disciplineActionIdentifier;
            this.DisciplineDate = disciplineDate;
            this.StudentUniqueId = studentUniqueId;
        }

        /// <summary>
        /// Identifier assigned by the education organization to the discipline action.
        /// </summary>
        /// <value>Identifier assigned by the education organization to the discipline action.</value>
        [DataMember(Name = "disciplineActionIdentifier", EmitDefaultValue = false)]
        public string DisciplineActionIdentifier { get; set; }

        /// <summary>
        /// The date of the discipline action.
        /// </summary>
        /// <value>The date of the discipline action.</value>
        [DataMember(Name = "disciplineDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DisciplineDate { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [DataMember(Name = "studentUniqueId", EmitDefaultValue = false)]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiDisciplineActionWritableKey {\n");
            sb.Append("  DisciplineActionIdentifier: ").Append(DisciplineActionIdentifier).Append("\n");
            sb.Append("  DisciplineDate: ").Append(DisciplineDate).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackedChangesEdFiDisciplineActionWritableKey);
        }

        /// <summary>
        /// Returns true if TrackedChangesEdFiDisciplineActionWritableKey instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackedChangesEdFiDisciplineActionWritableKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackedChangesEdFiDisciplineActionWritableKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisciplineActionIdentifier == input.DisciplineActionIdentifier ||
                    (this.DisciplineActionIdentifier != null &&
                    this.DisciplineActionIdentifier.Equals(input.DisciplineActionIdentifier))
                ) && 
                (
                    this.DisciplineDate == input.DisciplineDate ||
                    (this.DisciplineDate != null &&
                    this.DisciplineDate.Equals(input.DisciplineDate))
                ) && 
                (
                    this.StudentUniqueId == input.StudentUniqueId ||
                    (this.StudentUniqueId != null &&
                    this.StudentUniqueId.Equals(input.StudentUniqueId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisciplineActionIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.DisciplineActionIdentifier.GetHashCode();
                }
                if (this.DisciplineDate != null)
                {
                    hashCode = (hashCode * 59) + this.DisciplineDate.GetHashCode();
                }
                if (this.StudentUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.StudentUniqueId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // DisciplineActionIdentifier (string) maxLength
            if (this.DisciplineActionIdentifier != null && this.DisciplineActionIdentifier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisciplineActionIdentifier, length must be less than 32.", new [] { "DisciplineActionIdentifier" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

}
