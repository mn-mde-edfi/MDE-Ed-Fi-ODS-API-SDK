/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// EdFiStudentAssessmentStudentObjectiveAssessmentReadable
    /// </summary>
    [DataContract(Name = "edFi_studentAssessmentStudentObjectiveAssessment_readable")]
    public partial class EdFiStudentAssessmentStudentObjectiveAssessmentReadable : IEquatable<EdFiStudentAssessmentStudentObjectiveAssessmentReadable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentReadable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAssessmentStudentObjectiveAssessmentReadable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentReadable" /> class.
        /// </summary>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones..</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended..</param>
        /// <param name="assessedMinutes">Reported time student was assessed in minutes..</param>
        /// <param name="objectiveAssessmentReference">objectiveAssessmentReference (required).</param>
        /// <param name="performanceLevels">An unordered collection of studentAssessmentStudentObjectiveAssessmentPerformanceLevels. The performance level(s) achieved for the objective assessment..</param>
        /// <param name="scoreResults">An unordered collection of studentAssessmentStudentObjectiveAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc..</param>
        /// <param name="ext">ext.</param>
        public EdFiStudentAssessmentStudentObjectiveAssessmentReadable(DateTime? administrationDate = default(DateTime?), DateTime? administrationEndDate = default(DateTime?), int? assessedMinutes = default(int?), EdFiObjectiveAssessmentReference objectiveAssessmentReference = default(EdFiObjectiveAssessmentReference), List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevelReadable> performanceLevels = default(List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevelReadable>), List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResultReadable> scoreResults = default(List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResultReadable>), StudentAssessmentStudentObjectiveAssessmentExtensionsReadable ext = default(StudentAssessmentStudentObjectiveAssessmentExtensionsReadable))
        {
            // to ensure "objectiveAssessmentReference" is required (not null)
            if (objectiveAssessmentReference == null)
            {
                throw new ArgumentNullException("objectiveAssessmentReference is a required property for EdFiStudentAssessmentStudentObjectiveAssessmentReadable and cannot be null");
            }
            this.ObjectiveAssessmentReference = objectiveAssessmentReference;
            this.AdministrationDate = administrationDate;
            this.AdministrationEndDate = administrationEndDate;
            this.AssessedMinutes = assessedMinutes;
            this.PerformanceLevels = performanceLevels;
            this.ScoreResults = scoreResults;
            this.Ext = ext;
        }

        /// <summary>
        /// The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        /// </summary>
        /// <value>The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.</value>
        [DataMember(Name = "administrationDate", EmitDefaultValue = true)]
        public DateTime? AdministrationDate { get; set; }

        /// <summary>
        /// The date and time an assessment administration ended.
        /// </summary>
        /// <value>The date and time an assessment administration ended.</value>
        [DataMember(Name = "administrationEndDate", EmitDefaultValue = true)]
        public DateTime? AdministrationEndDate { get; set; }

        /// <summary>
        /// Reported time student was assessed in minutes.
        /// </summary>
        /// <value>Reported time student was assessed in minutes.</value>
        [DataMember(Name = "assessedMinutes", EmitDefaultValue = true)]
        public int? AssessedMinutes { get; set; }

        /// <summary>
        /// Gets or Sets ObjectiveAssessmentReference
        /// </summary>
        [DataMember(Name = "objectiveAssessmentReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiObjectiveAssessmentReference ObjectiveAssessmentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentStudentObjectiveAssessmentPerformanceLevels. The performance level(s) achieved for the objective assessment.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentStudentObjectiveAssessmentPerformanceLevels. The performance level(s) achieved for the objective assessment.</value>
        [DataMember(Name = "performanceLevels", EmitDefaultValue = false)]
        public List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevelReadable> PerformanceLevels { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentStudentObjectiveAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentStudentObjectiveAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</value>
        [DataMember(Name = "scoreResults", EmitDefaultValue = false)]
        public List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResultReadable> ScoreResults { get; set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public StudentAssessmentStudentObjectiveAssessmentExtensionsReadable Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentStudentObjectiveAssessmentReadable {\n");
            sb.Append("  AdministrationDate: ").Append(AdministrationDate).Append("\n");
            sb.Append("  AdministrationEndDate: ").Append(AdministrationEndDate).Append("\n");
            sb.Append("  AssessedMinutes: ").Append(AssessedMinutes).Append("\n");
            sb.Append("  ObjectiveAssessmentReference: ").Append(ObjectiveAssessmentReference).Append("\n");
            sb.Append("  PerformanceLevels: ").Append(PerformanceLevels).Append("\n");
            sb.Append("  ScoreResults: ").Append(ScoreResults).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentAssessmentStudentObjectiveAssessmentReadable);
        }

        /// <summary>
        /// Returns true if EdFiStudentAssessmentStudentObjectiveAssessmentReadable instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentAssessmentStudentObjectiveAssessmentReadable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentAssessmentStudentObjectiveAssessmentReadable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdministrationDate == input.AdministrationDate ||
                    (this.AdministrationDate != null &&
                    this.AdministrationDate.Equals(input.AdministrationDate))
                ) && 
                (
                    this.AdministrationEndDate == input.AdministrationEndDate ||
                    (this.AdministrationEndDate != null &&
                    this.AdministrationEndDate.Equals(input.AdministrationEndDate))
                ) && 
                (
                    this.AssessedMinutes == input.AssessedMinutes ||
                    (this.AssessedMinutes != null &&
                    this.AssessedMinutes.Equals(input.AssessedMinutes))
                ) && 
                (
                    this.ObjectiveAssessmentReference == input.ObjectiveAssessmentReference ||
                    (this.ObjectiveAssessmentReference != null &&
                    this.ObjectiveAssessmentReference.Equals(input.ObjectiveAssessmentReference))
                ) && 
                (
                    this.PerformanceLevels == input.PerformanceLevels ||
                    this.PerformanceLevels != null &&
                    input.PerformanceLevels != null &&
                    this.PerformanceLevels.SequenceEqual(input.PerformanceLevels)
                ) && 
                (
                    this.ScoreResults == input.ScoreResults ||
                    this.ScoreResults != null &&
                    input.ScoreResults != null &&
                    this.ScoreResults.SequenceEqual(input.ScoreResults)
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdministrationDate != null)
                {
                    hashCode = (hashCode * 59) + this.AdministrationDate.GetHashCode();
                }
                if (this.AdministrationEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.AdministrationEndDate.GetHashCode();
                }
                if (this.AssessedMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.AssessedMinutes.GetHashCode();
                }
                if (this.ObjectiveAssessmentReference != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectiveAssessmentReference.GetHashCode();
                }
                if (this.PerformanceLevels != null)
                {
                    hashCode = (hashCode * 59) + this.PerformanceLevels.GetHashCode();
                }
                if (this.ScoreResults != null)
                {
                    hashCode = (hashCode * 59) + this.ScoreResults.GetHashCode();
                }
                if (this.Ext != null)
                {
                    hashCode = (hashCode * 59) + this.Ext.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
