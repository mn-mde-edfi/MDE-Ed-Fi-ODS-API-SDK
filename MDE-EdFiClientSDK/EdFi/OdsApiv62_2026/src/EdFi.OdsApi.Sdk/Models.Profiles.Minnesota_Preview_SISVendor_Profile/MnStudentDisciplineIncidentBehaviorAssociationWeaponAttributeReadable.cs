/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable
    /// </summary>
    [DataContract(Name = "mn_studentDisciplineIncidentBehaviorAssociationWeaponAttribute_readable")]
    public partial class MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable : IEquatable<MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable" /> class.
        /// </summary>
        /// <param name="weaponIdentifier">The unique identifier assigned to a weapon entry. (required).</param>
        /// <param name="weaponDescriptor">Defines the type of weapon used in an incident. (required).</param>
        /// <param name="isGunCased">Indicator whether the gun was cased..</param>
        /// <param name="isGunInTrunk">Indicator whether the gun was in the trunk..</param>
        /// <param name="isGunLoaded">Indicator whether the gun was loaded..</param>
        /// <param name="numberOfWeaponsInvolved">The number of weapons involved. (required).</param>
        public MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable(string weaponIdentifier = default(string), string weaponDescriptor = default(string), bool? isGunCased = default(bool?), bool? isGunInTrunk = default(bool?), bool? isGunLoaded = default(bool?), int numberOfWeaponsInvolved = default(int))
        {
            // to ensure "weaponIdentifier" is required (not null)
            if (weaponIdentifier == null)
            {
                throw new ArgumentNullException("weaponIdentifier is a required property for MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable and cannot be null");
            }
            this.WeaponIdentifier = weaponIdentifier;
            // to ensure "weaponDescriptor" is required (not null)
            if (weaponDescriptor == null)
            {
                throw new ArgumentNullException("weaponDescriptor is a required property for MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable and cannot be null");
            }
            this.WeaponDescriptor = weaponDescriptor;
            this.NumberOfWeaponsInvolved = numberOfWeaponsInvolved;
            this.IsGunCased = isGunCased;
            this.IsGunInTrunk = isGunInTrunk;
            this.IsGunLoaded = isGunLoaded;
        }

        /// <summary>
        /// The unique identifier assigned to a weapon entry.
        /// </summary>
        /// <value>The unique identifier assigned to a weapon entry.</value>
        [DataMember(Name = "weaponIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string WeaponIdentifier { get; set; }

        /// <summary>
        /// Defines the type of weapon used in an incident.
        /// </summary>
        /// <value>Defines the type of weapon used in an incident.</value>
        [DataMember(Name = "weaponDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string WeaponDescriptor { get; set; }

        /// <summary>
        /// Indicator whether the gun was cased.
        /// </summary>
        /// <value>Indicator whether the gun was cased.</value>
        [DataMember(Name = "isGunCased", EmitDefaultValue = true)]
        public bool? IsGunCased { get; set; }

        /// <summary>
        /// Indicator whether the gun was in the trunk.
        /// </summary>
        /// <value>Indicator whether the gun was in the trunk.</value>
        [DataMember(Name = "isGunInTrunk", EmitDefaultValue = true)]
        public bool? IsGunInTrunk { get; set; }

        /// <summary>
        /// Indicator whether the gun was loaded.
        /// </summary>
        /// <value>Indicator whether the gun was loaded.</value>
        [DataMember(Name = "isGunLoaded", EmitDefaultValue = true)]
        public bool? IsGunLoaded { get; set; }

        /// <summary>
        /// The number of weapons involved.
        /// </summary>
        /// <value>The number of weapons involved.</value>
        [DataMember(Name = "numberOfWeaponsInvolved", IsRequired = true, EmitDefaultValue = false)]
        public int NumberOfWeaponsInvolved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable {\n");
            sb.Append("  WeaponIdentifier: ").Append(WeaponIdentifier).Append("\n");
            sb.Append("  WeaponDescriptor: ").Append(WeaponDescriptor).Append("\n");
            sb.Append("  IsGunCased: ").Append(IsGunCased).Append("\n");
            sb.Append("  IsGunInTrunk: ").Append(IsGunInTrunk).Append("\n");
            sb.Append("  IsGunLoaded: ").Append(IsGunLoaded).Append("\n");
            sb.Append("  NumberOfWeaponsInvolved: ").Append(NumberOfWeaponsInvolved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable);
        }

        /// <summary>
        /// Returns true if MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeReadable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WeaponIdentifier == input.WeaponIdentifier ||
                    (this.WeaponIdentifier != null &&
                    this.WeaponIdentifier.Equals(input.WeaponIdentifier))
                ) && 
                (
                    this.WeaponDescriptor == input.WeaponDescriptor ||
                    (this.WeaponDescriptor != null &&
                    this.WeaponDescriptor.Equals(input.WeaponDescriptor))
                ) && 
                (
                    this.IsGunCased == input.IsGunCased ||
                    (this.IsGunCased != null &&
                    this.IsGunCased.Equals(input.IsGunCased))
                ) && 
                (
                    this.IsGunInTrunk == input.IsGunInTrunk ||
                    (this.IsGunInTrunk != null &&
                    this.IsGunInTrunk.Equals(input.IsGunInTrunk))
                ) && 
                (
                    this.IsGunLoaded == input.IsGunLoaded ||
                    (this.IsGunLoaded != null &&
                    this.IsGunLoaded.Equals(input.IsGunLoaded))
                ) && 
                (
                    this.NumberOfWeaponsInvolved == input.NumberOfWeaponsInvolved ||
                    this.NumberOfWeaponsInvolved.Equals(input.NumberOfWeaponsInvolved)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WeaponIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.WeaponIdentifier.GetHashCode();
                }
                if (this.WeaponDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.WeaponDescriptor.GetHashCode();
                }
                if (this.IsGunCased != null)
                {
                    hashCode = (hashCode * 59) + this.IsGunCased.GetHashCode();
                }
                if (this.IsGunInTrunk != null)
                {
                    hashCode = (hashCode * 59) + this.IsGunInTrunk.GetHashCode();
                }
                if (this.IsGunLoaded != null)
                {
                    hashCode = (hashCode * 59) + this.IsGunLoaded.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfWeaponsInvolved.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // WeaponIdentifier (string) maxLength
            if (this.WeaponIdentifier != null && this.WeaponIdentifier.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WeaponIdentifier, length must be less than 20.", new [] { "WeaponIdentifier" });
            }

            // WeaponDescriptor (string) maxLength
            if (this.WeaponDescriptor != null && this.WeaponDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WeaponDescriptor, length must be less than 306.", new [] { "WeaponDescriptor" });
            }

            yield break;
        }
    }

}
