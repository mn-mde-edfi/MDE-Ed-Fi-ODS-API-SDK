/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// MnParentExtensionWritable
    /// </summary>
    [DataContract(Name = "mn_parentExtension_writable")]
    public partial class MnParentExtensionWritable : IEquatable<MnParentExtensionWritable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnParentExtensionWritable" /> class.
        /// </summary>
        /// <param name="classroomVolunteerDescriptor">Classification of classroon volunteer capacity of a parent. E.g., Full-time volunteer or part-time volunteer. General purpose but intially implemented for Early Education..</param>
        /// <param name="birthDate">The month, day, and year on which the parent was born..</param>
        /// <param name="householdIncome">Annual income of the household in monetary units..</param>
        /// <param name="householdSize">Number of people in the household..</param>
        /// <param name="receivingInterpreterAssistance">Is parent is receiving interpreter assistance?.</param>
        public MnParentExtensionWritable(string classroomVolunteerDescriptor = default(string), DateTime? birthDate = default(DateTime?), double? householdIncome = default(double?), int? householdSize = default(int?), bool? receivingInterpreterAssistance = default(bool?))
        {
            this.ClassroomVolunteerDescriptor = classroomVolunteerDescriptor;
            this.BirthDate = birthDate;
            this.HouseholdIncome = householdIncome;
            this.HouseholdSize = householdSize;
            this.ReceivingInterpreterAssistance = receivingInterpreterAssistance;
        }

        /// <summary>
        /// Classification of classroon volunteer capacity of a parent. E.g., Full-time volunteer or part-time volunteer. General purpose but intially implemented for Early Education.
        /// </summary>
        /// <value>Classification of classroon volunteer capacity of a parent. E.g., Full-time volunteer or part-time volunteer. General purpose but intially implemented for Early Education.</value>
        [DataMember(Name = "classroomVolunteerDescriptor", EmitDefaultValue = true)]
        public string ClassroomVolunteerDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which the parent was born.
        /// </summary>
        /// <value>The month, day, and year on which the parent was born.</value>
        [DataMember(Name = "birthDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Annual income of the household in monetary units.
        /// </summary>
        /// <value>Annual income of the household in monetary units.</value>
        [DataMember(Name = "householdIncome", EmitDefaultValue = true)]
        public double? HouseholdIncome { get; set; }

        /// <summary>
        /// Number of people in the household.
        /// </summary>
        /// <value>Number of people in the household.</value>
        [DataMember(Name = "householdSize", EmitDefaultValue = true)]
        public int? HouseholdSize { get; set; }

        /// <summary>
        /// Is parent is receiving interpreter assistance?
        /// </summary>
        /// <value>Is parent is receiving interpreter assistance?</value>
        [DataMember(Name = "receivingInterpreterAssistance", EmitDefaultValue = true)]
        public bool? ReceivingInterpreterAssistance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MnParentExtensionWritable {\n");
            sb.Append("  ClassroomVolunteerDescriptor: ").Append(ClassroomVolunteerDescriptor).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  HouseholdIncome: ").Append(HouseholdIncome).Append("\n");
            sb.Append("  HouseholdSize: ").Append(HouseholdSize).Append("\n");
            sb.Append("  ReceivingInterpreterAssistance: ").Append(ReceivingInterpreterAssistance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnParentExtensionWritable);
        }

        /// <summary>
        /// Returns true if MnParentExtensionWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnParentExtensionWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnParentExtensionWritable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClassroomVolunteerDescriptor == input.ClassroomVolunteerDescriptor ||
                    (this.ClassroomVolunteerDescriptor != null &&
                    this.ClassroomVolunteerDescriptor.Equals(input.ClassroomVolunteerDescriptor))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.HouseholdIncome == input.HouseholdIncome ||
                    (this.HouseholdIncome != null &&
                    this.HouseholdIncome.Equals(input.HouseholdIncome))
                ) && 
                (
                    this.HouseholdSize == input.HouseholdSize ||
                    (this.HouseholdSize != null &&
                    this.HouseholdSize.Equals(input.HouseholdSize))
                ) && 
                (
                    this.ReceivingInterpreterAssistance == input.ReceivingInterpreterAssistance ||
                    (this.ReceivingInterpreterAssistance != null &&
                    this.ReceivingInterpreterAssistance.Equals(input.ReceivingInterpreterAssistance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassroomVolunteerDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.ClassroomVolunteerDescriptor.GetHashCode();
                }
                if (this.BirthDate != null)
                {
                    hashCode = (hashCode * 59) + this.BirthDate.GetHashCode();
                }
                if (this.HouseholdIncome != null)
                {
                    hashCode = (hashCode * 59) + this.HouseholdIncome.GetHashCode();
                }
                if (this.HouseholdSize != null)
                {
                    hashCode = (hashCode * 59) + this.HouseholdSize.GetHashCode();
                }
                if (this.ReceivingInterpreterAssistance != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivingInterpreterAssistance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ClassroomVolunteerDescriptor (string) maxLength
            if (this.ClassroomVolunteerDescriptor != null && this.ClassroomVolunteerDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassroomVolunteerDescriptor, length must be less than 306.", new [] { "ClassroomVolunteerDescriptor" });
            }

            yield break;
        }
    }

}
