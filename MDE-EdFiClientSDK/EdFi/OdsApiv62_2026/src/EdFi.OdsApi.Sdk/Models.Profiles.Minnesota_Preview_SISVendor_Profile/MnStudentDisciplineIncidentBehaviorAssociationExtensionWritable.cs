/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable
    /// </summary>
    [DataContract(Name = "mn_studentDisciplineIncidentBehaviorAssociationExtension_writable")]
    public partial class MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable : IEquatable<MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable" /> class.
        /// </summary>
        /// <param name="secondaryBehaviorDescriptor">Indicates the type of offense done by an individual..</param>
        /// <param name="wasArrestedLawEnforcement">Indicator if the offender was arrested by law enforcement..</param>
        /// <param name="wasReferredLawEnforcement">Indicator if the offender was referred to law enforcement..</param>
        /// <param name="wasUnderCurrentSuspension">Indicator of where the offender was under a current suspension at the time of incident..</param>
        /// <param name="bullyingHarassmentTypes">An unordered collection of studentDisciplineIncidentBehaviorAssociationBullyingHarassmentTypes. Indicates the form or the basis of bullying harassment behavior done by an individual..</param>
        /// <param name="drugInformation">An unordered collection of studentDisciplineIncidentBehaviorAssociationDrugInformation. Indicates the drug type associated with an incident..</param>
        /// <param name="weaponAttributes">An unordered collection of studentDisciplineIncidentBehaviorAssociationWeaponAttributes. Describes the weapon/s associated with an incident..</param>
        public MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable(string secondaryBehaviorDescriptor = default(string), bool? wasArrestedLawEnforcement = default(bool?), bool? wasReferredLawEnforcement = default(bool?), bool? wasUnderCurrentSuspension = default(bool?), List<MnStudentDisciplineIncidentBehaviorAssociationBullyingHarassmentTypeWritable> bullyingHarassmentTypes = default(List<MnStudentDisciplineIncidentBehaviorAssociationBullyingHarassmentTypeWritable>), List<MnStudentDisciplineIncidentBehaviorAssociationDrugInformationWritable> drugInformation = default(List<MnStudentDisciplineIncidentBehaviorAssociationDrugInformationWritable>), List<MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeWritable> weaponAttributes = default(List<MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeWritable>))
        {
            this.SecondaryBehaviorDescriptor = secondaryBehaviorDescriptor;
            this.WasArrestedLawEnforcement = wasArrestedLawEnforcement;
            this.WasReferredLawEnforcement = wasReferredLawEnforcement;
            this.WasUnderCurrentSuspension = wasUnderCurrentSuspension;
            this.BullyingHarassmentTypes = bullyingHarassmentTypes;
            this.DrugInformation = drugInformation;
            this.WeaponAttributes = weaponAttributes;
        }

        /// <summary>
        /// Indicates the type of offense done by an individual.
        /// </summary>
        /// <value>Indicates the type of offense done by an individual.</value>
        [DataMember(Name = "secondaryBehaviorDescriptor", EmitDefaultValue = true)]
        public string SecondaryBehaviorDescriptor { get; set; }

        /// <summary>
        /// Indicator if the offender was arrested by law enforcement.
        /// </summary>
        /// <value>Indicator if the offender was arrested by law enforcement.</value>
        [DataMember(Name = "wasArrestedLawEnforcement", EmitDefaultValue = true)]
        public bool? WasArrestedLawEnforcement { get; set; }

        /// <summary>
        /// Indicator if the offender was referred to law enforcement.
        /// </summary>
        /// <value>Indicator if the offender was referred to law enforcement.</value>
        [DataMember(Name = "wasReferredLawEnforcement", EmitDefaultValue = true)]
        public bool? WasReferredLawEnforcement { get; set; }

        /// <summary>
        /// Indicator of where the offender was under a current suspension at the time of incident.
        /// </summary>
        /// <value>Indicator of where the offender was under a current suspension at the time of incident.</value>
        [DataMember(Name = "wasUnderCurrentSuspension", EmitDefaultValue = true)]
        public bool? WasUnderCurrentSuspension { get; set; }

        /// <summary>
        /// An unordered collection of studentDisciplineIncidentBehaviorAssociationBullyingHarassmentTypes. Indicates the form or the basis of bullying harassment behavior done by an individual.
        /// </summary>
        /// <value>An unordered collection of studentDisciplineIncidentBehaviorAssociationBullyingHarassmentTypes. Indicates the form or the basis of bullying harassment behavior done by an individual.</value>
        [DataMember(Name = "bullyingHarassmentTypes", EmitDefaultValue = false)]
        public List<MnStudentDisciplineIncidentBehaviorAssociationBullyingHarassmentTypeWritable> BullyingHarassmentTypes { get; set; }

        /// <summary>
        /// An unordered collection of studentDisciplineIncidentBehaviorAssociationDrugInformation. Indicates the drug type associated with an incident.
        /// </summary>
        /// <value>An unordered collection of studentDisciplineIncidentBehaviorAssociationDrugInformation. Indicates the drug type associated with an incident.</value>
        [DataMember(Name = "drugInformation", EmitDefaultValue = false)]
        public List<MnStudentDisciplineIncidentBehaviorAssociationDrugInformationWritable> DrugInformation { get; set; }

        /// <summary>
        /// An unordered collection of studentDisciplineIncidentBehaviorAssociationWeaponAttributes. Describes the weapon/s associated with an incident.
        /// </summary>
        /// <value>An unordered collection of studentDisciplineIncidentBehaviorAssociationWeaponAttributes. Describes the weapon/s associated with an incident.</value>
        [DataMember(Name = "weaponAttributes", EmitDefaultValue = false)]
        public List<MnStudentDisciplineIncidentBehaviorAssociationWeaponAttributeWritable> WeaponAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable {\n");
            sb.Append("  SecondaryBehaviorDescriptor: ").Append(SecondaryBehaviorDescriptor).Append("\n");
            sb.Append("  WasArrestedLawEnforcement: ").Append(WasArrestedLawEnforcement).Append("\n");
            sb.Append("  WasReferredLawEnforcement: ").Append(WasReferredLawEnforcement).Append("\n");
            sb.Append("  WasUnderCurrentSuspension: ").Append(WasUnderCurrentSuspension).Append("\n");
            sb.Append("  BullyingHarassmentTypes: ").Append(BullyingHarassmentTypes).Append("\n");
            sb.Append("  DrugInformation: ").Append(DrugInformation).Append("\n");
            sb.Append("  WeaponAttributes: ").Append(WeaponAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable);
        }

        /// <summary>
        /// Returns true if MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnStudentDisciplineIncidentBehaviorAssociationExtensionWritable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SecondaryBehaviorDescriptor == input.SecondaryBehaviorDescriptor ||
                    (this.SecondaryBehaviorDescriptor != null &&
                    this.SecondaryBehaviorDescriptor.Equals(input.SecondaryBehaviorDescriptor))
                ) && 
                (
                    this.WasArrestedLawEnforcement == input.WasArrestedLawEnforcement ||
                    (this.WasArrestedLawEnforcement != null &&
                    this.WasArrestedLawEnforcement.Equals(input.WasArrestedLawEnforcement))
                ) && 
                (
                    this.WasReferredLawEnforcement == input.WasReferredLawEnforcement ||
                    (this.WasReferredLawEnforcement != null &&
                    this.WasReferredLawEnforcement.Equals(input.WasReferredLawEnforcement))
                ) && 
                (
                    this.WasUnderCurrentSuspension == input.WasUnderCurrentSuspension ||
                    (this.WasUnderCurrentSuspension != null &&
                    this.WasUnderCurrentSuspension.Equals(input.WasUnderCurrentSuspension))
                ) && 
                (
                    this.BullyingHarassmentTypes == input.BullyingHarassmentTypes ||
                    this.BullyingHarassmentTypes != null &&
                    input.BullyingHarassmentTypes != null &&
                    this.BullyingHarassmentTypes.SequenceEqual(input.BullyingHarassmentTypes)
                ) && 
                (
                    this.DrugInformation == input.DrugInformation ||
                    this.DrugInformation != null &&
                    input.DrugInformation != null &&
                    this.DrugInformation.SequenceEqual(input.DrugInformation)
                ) && 
                (
                    this.WeaponAttributes == input.WeaponAttributes ||
                    this.WeaponAttributes != null &&
                    input.WeaponAttributes != null &&
                    this.WeaponAttributes.SequenceEqual(input.WeaponAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecondaryBehaviorDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryBehaviorDescriptor.GetHashCode();
                }
                if (this.WasArrestedLawEnforcement != null)
                {
                    hashCode = (hashCode * 59) + this.WasArrestedLawEnforcement.GetHashCode();
                }
                if (this.WasReferredLawEnforcement != null)
                {
                    hashCode = (hashCode * 59) + this.WasReferredLawEnforcement.GetHashCode();
                }
                if (this.WasUnderCurrentSuspension != null)
                {
                    hashCode = (hashCode * 59) + this.WasUnderCurrentSuspension.GetHashCode();
                }
                if (this.BullyingHarassmentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.BullyingHarassmentTypes.GetHashCode();
                }
                if (this.DrugInformation != null)
                {
                    hashCode = (hashCode * 59) + this.DrugInformation.GetHashCode();
                }
                if (this.WeaponAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.WeaponAttributes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SecondaryBehaviorDescriptor (string) maxLength
            if (this.SecondaryBehaviorDescriptor != null && this.SecondaryBehaviorDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SecondaryBehaviorDescriptor, length must be less than 306.", new [] { "SecondaryBehaviorDescriptor" });
            }

            yield break;
        }
    }

}
