/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Preview_SISVendor_Profile
{
    /// <summary>
    /// MnStudentAssessmentExtensionReadable
    /// </summary>
    [DataContract(Name = "mn_studentAssessmentExtension_readable")]
    public partial class MnStudentAssessmentExtensionReadable : IEquatable<MnStudentAssessmentExtensionReadable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentAssessmentExtensionReadable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MnStudentAssessmentExtensionReadable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MnStudentAssessmentExtensionReadable" /> class.
        /// </summary>
        /// <param name="assessmentFormatDescriptor">Format for which an assessment was administered. E.g., Online or Paper.</param>
        /// <param name="assessmentTierDescriptor">Tier descriptor for Assessment. E.g., Listening, Reading, Speaking, Writing.</param>
        /// <param name="attemptLogicMetDescriptor">Indication of whether student has met assessment Attempt Logic..</param>
        /// <param name="generalEnrollmentDescriptor">General type of enrollment for a student. E.g., R-Regular, N-Nonpublic, H-Homeschool.</param>
        /// <param name="firstOperationalPassageDescriptor">Delivery Method for Operational Passage 1..</param>
        /// <param name="secondOperationalPassageDescriptor">Delivery Method for Operational Passage 2..</param>
        /// <param name="thirdOperationalPassageDescriptor">Delivery Method for Operational Passage 3..</param>
        /// <param name="sexDescriptor">Student&#39;s birth sex. (required).</param>
        /// <param name="birthDate">Student&#39;s birthdate. (required).</param>
        /// <param name="catStudentTestId">CAT Student Test ID.</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="itemAttempted">Indicates whether or not an item on the assessment was attempted..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (required).</param>
        /// <param name="siteEducationOrganizationReference">siteEducationOrganizationReference.</param>
        /// <param name="characteristics">An unordered collection of studentAssessmentCharacteristics. Generic characteristics about an Assessment other than Accommodations..</param>
        public MnStudentAssessmentExtensionReadable(string assessmentFormatDescriptor = default(string), string assessmentTierDescriptor = default(string), string attemptLogicMetDescriptor = default(string), string generalEnrollmentDescriptor = default(string), string firstOperationalPassageDescriptor = default(string), string secondOperationalPassageDescriptor = default(string), string thirdOperationalPassageDescriptor = default(string), string sexDescriptor = default(string), DateTime birthDate = default(DateTime), string catStudentTestId = default(string), string firstName = default(string), bool itemAttempted = default(bool), string lastSurname = default(string), string middleName = default(string), EdFiEducationOrganizationReference siteEducationOrganizationReference = default(EdFiEducationOrganizationReference), List<MnStudentAssessmentCharacteristicReadable> characteristics = default(List<MnStudentAssessmentCharacteristicReadable>))
        {
            // to ensure "sexDescriptor" is required (not null)
            if (sexDescriptor == null)
            {
                throw new ArgumentNullException("sexDescriptor is a required property for MnStudentAssessmentExtensionReadable and cannot be null");
            }
            this.SexDescriptor = sexDescriptor;
            this.BirthDate = birthDate;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for MnStudentAssessmentExtensionReadable and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastSurname" is required (not null)
            if (lastSurname == null)
            {
                throw new ArgumentNullException("lastSurname is a required property for MnStudentAssessmentExtensionReadable and cannot be null");
            }
            this.LastSurname = lastSurname;
            // to ensure "middleName" is required (not null)
            if (middleName == null)
            {
                throw new ArgumentNullException("middleName is a required property for MnStudentAssessmentExtensionReadable and cannot be null");
            }
            this.MiddleName = middleName;
            this.AssessmentFormatDescriptor = assessmentFormatDescriptor;
            this.AssessmentTierDescriptor = assessmentTierDescriptor;
            this.AttemptLogicMetDescriptor = attemptLogicMetDescriptor;
            this.GeneralEnrollmentDescriptor = generalEnrollmentDescriptor;
            this.FirstOperationalPassageDescriptor = firstOperationalPassageDescriptor;
            this.SecondOperationalPassageDescriptor = secondOperationalPassageDescriptor;
            this.ThirdOperationalPassageDescriptor = thirdOperationalPassageDescriptor;
            this.CatStudentTestId = catStudentTestId;
            this.ItemAttempted = itemAttempted;
            this.SiteEducationOrganizationReference = siteEducationOrganizationReference;
            this.Characteristics = characteristics;
        }

        /// <summary>
        /// Format for which an assessment was administered. E.g., Online or Paper
        /// </summary>
        /// <value>Format for which an assessment was administered. E.g., Online or Paper</value>
        [DataMember(Name = "assessmentFormatDescriptor", EmitDefaultValue = false)]
        public string AssessmentFormatDescriptor { get; set; }

        /// <summary>
        /// Tier descriptor for Assessment. E.g., Listening, Reading, Speaking, Writing
        /// </summary>
        /// <value>Tier descriptor for Assessment. E.g., Listening, Reading, Speaking, Writing</value>
        [DataMember(Name = "assessmentTierDescriptor", EmitDefaultValue = false)]
        public string AssessmentTierDescriptor { get; set; }

        /// <summary>
        /// Indication of whether student has met assessment Attempt Logic.
        /// </summary>
        /// <value>Indication of whether student has met assessment Attempt Logic.</value>
        [DataMember(Name = "attemptLogicMetDescriptor", EmitDefaultValue = false)]
        public string AttemptLogicMetDescriptor { get; set; }

        /// <summary>
        /// General type of enrollment for a student. E.g., R-Regular, N-Nonpublic, H-Homeschool
        /// </summary>
        /// <value>General type of enrollment for a student. E.g., R-Regular, N-Nonpublic, H-Homeschool</value>
        [DataMember(Name = "generalEnrollmentDescriptor", EmitDefaultValue = false)]
        public string GeneralEnrollmentDescriptor { get; set; }

        /// <summary>
        /// Delivery Method for Operational Passage 1.
        /// </summary>
        /// <value>Delivery Method for Operational Passage 1.</value>
        [DataMember(Name = "firstOperationalPassageDescriptor", EmitDefaultValue = false)]
        public string FirstOperationalPassageDescriptor { get; set; }

        /// <summary>
        /// Delivery Method for Operational Passage 2.
        /// </summary>
        /// <value>Delivery Method for Operational Passage 2.</value>
        [DataMember(Name = "secondOperationalPassageDescriptor", EmitDefaultValue = false)]
        public string SecondOperationalPassageDescriptor { get; set; }

        /// <summary>
        /// Delivery Method for Operational Passage 3.
        /// </summary>
        /// <value>Delivery Method for Operational Passage 3.</value>
        [DataMember(Name = "thirdOperationalPassageDescriptor", EmitDefaultValue = false)]
        public string ThirdOperationalPassageDescriptor { get; set; }

        /// <summary>
        /// Student&#39;s birth sex.
        /// </summary>
        /// <value>Student&#39;s birth sex.</value>
        [DataMember(Name = "sexDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// Student&#39;s birthdate.
        /// </summary>
        /// <value>Student&#39;s birthdate.</value>
        [DataMember(Name = "birthDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// CAT Student Test ID
        /// </summary>
        /// <value>CAT Student Test ID</value>
        [DataMember(Name = "catStudentTestId", EmitDefaultValue = false)]
        public string CatStudentTestId { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Indicates whether or not an item on the assessment was attempted.
        /// </summary>
        /// <value>Indicates whether or not an item on the assessment was attempted.</value>
        [DataMember(Name = "itemAttempted", EmitDefaultValue = true)]
        public bool ItemAttempted { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name = "lastSurname", IsRequired = true, EmitDefaultValue = false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name = "middleName", IsRequired = true, EmitDefaultValue = false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets SiteEducationOrganizationReference
        /// </summary>
        [DataMember(Name = "siteEducationOrganizationReference", EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference SiteEducationOrganizationReference { get; set; }

        /// <summary>
        /// An unordered collection of studentAssessmentCharacteristics. Generic characteristics about an Assessment other than Accommodations.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentCharacteristics. Generic characteristics about an Assessment other than Accommodations.</value>
        [DataMember(Name = "characteristics", EmitDefaultValue = false)]
        public List<MnStudentAssessmentCharacteristicReadable> Characteristics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MnStudentAssessmentExtensionReadable {\n");
            sb.Append("  AssessmentFormatDescriptor: ").Append(AssessmentFormatDescriptor).Append("\n");
            sb.Append("  AssessmentTierDescriptor: ").Append(AssessmentTierDescriptor).Append("\n");
            sb.Append("  AttemptLogicMetDescriptor: ").Append(AttemptLogicMetDescriptor).Append("\n");
            sb.Append("  GeneralEnrollmentDescriptor: ").Append(GeneralEnrollmentDescriptor).Append("\n");
            sb.Append("  FirstOperationalPassageDescriptor: ").Append(FirstOperationalPassageDescriptor).Append("\n");
            sb.Append("  SecondOperationalPassageDescriptor: ").Append(SecondOperationalPassageDescriptor).Append("\n");
            sb.Append("  ThirdOperationalPassageDescriptor: ").Append(ThirdOperationalPassageDescriptor).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  CatStudentTestId: ").Append(CatStudentTestId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  ItemAttempted: ").Append(ItemAttempted).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  SiteEducationOrganizationReference: ").Append(SiteEducationOrganizationReference).Append("\n");
            sb.Append("  Characteristics: ").Append(Characteristics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnStudentAssessmentExtensionReadable);
        }

        /// <summary>
        /// Returns true if MnStudentAssessmentExtensionReadable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnStudentAssessmentExtensionReadable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnStudentAssessmentExtensionReadable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssessmentFormatDescriptor == input.AssessmentFormatDescriptor ||
                    (this.AssessmentFormatDescriptor != null &&
                    this.AssessmentFormatDescriptor.Equals(input.AssessmentFormatDescriptor))
                ) && 
                (
                    this.AssessmentTierDescriptor == input.AssessmentTierDescriptor ||
                    (this.AssessmentTierDescriptor != null &&
                    this.AssessmentTierDescriptor.Equals(input.AssessmentTierDescriptor))
                ) && 
                (
                    this.AttemptLogicMetDescriptor == input.AttemptLogicMetDescriptor ||
                    (this.AttemptLogicMetDescriptor != null &&
                    this.AttemptLogicMetDescriptor.Equals(input.AttemptLogicMetDescriptor))
                ) && 
                (
                    this.GeneralEnrollmentDescriptor == input.GeneralEnrollmentDescriptor ||
                    (this.GeneralEnrollmentDescriptor != null &&
                    this.GeneralEnrollmentDescriptor.Equals(input.GeneralEnrollmentDescriptor))
                ) && 
                (
                    this.FirstOperationalPassageDescriptor == input.FirstOperationalPassageDescriptor ||
                    (this.FirstOperationalPassageDescriptor != null &&
                    this.FirstOperationalPassageDescriptor.Equals(input.FirstOperationalPassageDescriptor))
                ) && 
                (
                    this.SecondOperationalPassageDescriptor == input.SecondOperationalPassageDescriptor ||
                    (this.SecondOperationalPassageDescriptor != null &&
                    this.SecondOperationalPassageDescriptor.Equals(input.SecondOperationalPassageDescriptor))
                ) && 
                (
                    this.ThirdOperationalPassageDescriptor == input.ThirdOperationalPassageDescriptor ||
                    (this.ThirdOperationalPassageDescriptor != null &&
                    this.ThirdOperationalPassageDescriptor.Equals(input.ThirdOperationalPassageDescriptor))
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.CatStudentTestId == input.CatStudentTestId ||
                    (this.CatStudentTestId != null &&
                    this.CatStudentTestId.Equals(input.CatStudentTestId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.ItemAttempted == input.ItemAttempted ||
                    this.ItemAttempted.Equals(input.ItemAttempted)
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.SiteEducationOrganizationReference == input.SiteEducationOrganizationReference ||
                    (this.SiteEducationOrganizationReference != null &&
                    this.SiteEducationOrganizationReference.Equals(input.SiteEducationOrganizationReference))
                ) && 
                (
                    this.Characteristics == input.Characteristics ||
                    this.Characteristics != null &&
                    input.Characteristics != null &&
                    this.Characteristics.SequenceEqual(input.Characteristics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssessmentFormatDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.AssessmentFormatDescriptor.GetHashCode();
                }
                if (this.AssessmentTierDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.AssessmentTierDescriptor.GetHashCode();
                }
                if (this.AttemptLogicMetDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.AttemptLogicMetDescriptor.GetHashCode();
                }
                if (this.GeneralEnrollmentDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.GeneralEnrollmentDescriptor.GetHashCode();
                }
                if (this.FirstOperationalPassageDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.FirstOperationalPassageDescriptor.GetHashCode();
                }
                if (this.SecondOperationalPassageDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.SecondOperationalPassageDescriptor.GetHashCode();
                }
                if (this.ThirdOperationalPassageDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.ThirdOperationalPassageDescriptor.GetHashCode();
                }
                if (this.SexDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.SexDescriptor.GetHashCode();
                }
                if (this.BirthDate != null)
                {
                    hashCode = (hashCode * 59) + this.BirthDate.GetHashCode();
                }
                if (this.CatStudentTestId != null)
                {
                    hashCode = (hashCode * 59) + this.CatStudentTestId.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemAttempted.GetHashCode();
                if (this.LastSurname != null)
                {
                    hashCode = (hashCode * 59) + this.LastSurname.GetHashCode();
                }
                if (this.MiddleName != null)
                {
                    hashCode = (hashCode * 59) + this.MiddleName.GetHashCode();
                }
                if (this.SiteEducationOrganizationReference != null)
                {
                    hashCode = (hashCode * 59) + this.SiteEducationOrganizationReference.GetHashCode();
                }
                if (this.Characteristics != null)
                {
                    hashCode = (hashCode * 59) + this.Characteristics.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AssessmentFormatDescriptor (string) maxLength
            if (this.AssessmentFormatDescriptor != null && this.AssessmentFormatDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssessmentFormatDescriptor, length must be less than 306.", new [] { "AssessmentFormatDescriptor" });
            }

            // AssessmentTierDescriptor (string) maxLength
            if (this.AssessmentTierDescriptor != null && this.AssessmentTierDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssessmentTierDescriptor, length must be less than 306.", new [] { "AssessmentTierDescriptor" });
            }

            // AttemptLogicMetDescriptor (string) maxLength
            if (this.AttemptLogicMetDescriptor != null && this.AttemptLogicMetDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AttemptLogicMetDescriptor, length must be less than 306.", new [] { "AttemptLogicMetDescriptor" });
            }

            // GeneralEnrollmentDescriptor (string) maxLength
            if (this.GeneralEnrollmentDescriptor != null && this.GeneralEnrollmentDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GeneralEnrollmentDescriptor, length must be less than 306.", new [] { "GeneralEnrollmentDescriptor" });
            }

            // FirstOperationalPassageDescriptor (string) maxLength
            if (this.FirstOperationalPassageDescriptor != null && this.FirstOperationalPassageDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstOperationalPassageDescriptor, length must be less than 306.", new [] { "FirstOperationalPassageDescriptor" });
            }

            // SecondOperationalPassageDescriptor (string) maxLength
            if (this.SecondOperationalPassageDescriptor != null && this.SecondOperationalPassageDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SecondOperationalPassageDescriptor, length must be less than 306.", new [] { "SecondOperationalPassageDescriptor" });
            }

            // ThirdOperationalPassageDescriptor (string) maxLength
            if (this.ThirdOperationalPassageDescriptor != null && this.ThirdOperationalPassageDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThirdOperationalPassageDescriptor, length must be less than 306.", new [] { "ThirdOperationalPassageDescriptor" });
            }

            // SexDescriptor (string) maxLength
            if (this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            // CatStudentTestId (string) maxLength
            if (this.CatStudentTestId != null && this.CatStudentTestId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CatStudentTestId, length must be less than 100.", new [] { "CatStudentTestId" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // MiddleName (string) maxLength
            if (this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            yield break;
        }
    }

}
