/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_Twenty_Two_Twenty_Three_SISVendor_Profile
{
    /// <summary>
    /// MnSectionExtensionWritable
    /// </summary>
    [DataContract(Name = "mn_sectionExtension_writable")]
    public partial class MnSectionExtensionWritable : IEquatable<MnSectionExtensionWritable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnSectionExtensionWritable" /> class.
        /// </summary>
        /// <param name="instructionalDeliveryModeDescriptor">The delivery mode of instuction. E.g, On-ground, Online, etc.</param>
        /// <param name="instructionMinutesPerTerm">Instruction minutes per term..</param>
        public MnSectionExtensionWritable(string instructionalDeliveryModeDescriptor = default(string), int instructionMinutesPerTerm = default(int))
        {
            this.InstructionalDeliveryModeDescriptor = instructionalDeliveryModeDescriptor;
            this.InstructionMinutesPerTerm = instructionMinutesPerTerm;
        }

        /// <summary>
        /// The delivery mode of instuction. E.g, On-ground, Online, etc
        /// </summary>
        /// <value>The delivery mode of instuction. E.g, On-ground, Online, etc</value>
        [DataMember(Name = "instructionalDeliveryModeDescriptor", EmitDefaultValue = false)]
        public string InstructionalDeliveryModeDescriptor { get; set; }

        /// <summary>
        /// Instruction minutes per term.
        /// </summary>
        /// <value>Instruction minutes per term.</value>
        [DataMember(Name = "instructionMinutesPerTerm", EmitDefaultValue = false)]
        public int InstructionMinutesPerTerm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MnSectionExtensionWritable {\n");
            sb.Append("  InstructionalDeliveryModeDescriptor: ").Append(InstructionalDeliveryModeDescriptor).Append("\n");
            sb.Append("  InstructionMinutesPerTerm: ").Append(InstructionMinutesPerTerm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnSectionExtensionWritable);
        }

        /// <summary>
        /// Returns true if MnSectionExtensionWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnSectionExtensionWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnSectionExtensionWritable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstructionalDeliveryModeDescriptor == input.InstructionalDeliveryModeDescriptor ||
                    (this.InstructionalDeliveryModeDescriptor != null &&
                    this.InstructionalDeliveryModeDescriptor.Equals(input.InstructionalDeliveryModeDescriptor))
                ) && 
                (
                    this.InstructionMinutesPerTerm == input.InstructionMinutesPerTerm ||
                    this.InstructionMinutesPerTerm.Equals(input.InstructionMinutesPerTerm)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstructionalDeliveryModeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionalDeliveryModeDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstructionMinutesPerTerm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // InstructionalDeliveryModeDescriptor (string) maxLength
            if (this.InstructionalDeliveryModeDescriptor != null && this.InstructionalDeliveryModeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstructionalDeliveryModeDescriptor, length must be less than 306.", new [] { "InstructionalDeliveryModeDescriptor" });
            }

            yield break;
        }
    }

}
